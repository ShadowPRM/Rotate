
Rotate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006984  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006afc  08006afc  00020410  2**0
                  CONTENTS
  4 .ARM          00000000  08006afc  08006afc  00020410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006afc  08006afc  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08006b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000410  08006f14  00020410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08006f14  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010348  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002206  00000000  00000000  00030780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012821  00000000  00000000  000343d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b1b  00000000  00000000  00046bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070d39  00000000  00000000  0005770c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a4  00000000  00000000  000c8498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000410 	.word	0x20000410
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a2c 	.word	0x08006a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000414 	.word	0x20000414
 8000104:	08006a2c 	.word	0x08006a2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	46d6      	mov	lr, sl
 8000226:	4646      	mov	r6, r8
 8000228:	000d      	movs	r5, r1
 800022a:	0001      	movs	r1, r0
 800022c:	0018      	movs	r0, r3
 800022e:	b5c0      	push	{r6, r7, lr}
 8000230:	0017      	movs	r7, r2
 8000232:	032b      	lsls	r3, r5, #12
 8000234:	0a5a      	lsrs	r2, r3, #9
 8000236:	0f4b      	lsrs	r3, r1, #29
 8000238:	4313      	orrs	r3, r2
 800023a:	00ca      	lsls	r2, r1, #3
 800023c:	4691      	mov	r9, r2
 800023e:	0302      	lsls	r2, r0, #12
 8000240:	006e      	lsls	r6, r5, #1
 8000242:	0041      	lsls	r1, r0, #1
 8000244:	0a52      	lsrs	r2, r2, #9
 8000246:	0fec      	lsrs	r4, r5, #31
 8000248:	0f7d      	lsrs	r5, r7, #29
 800024a:	4315      	orrs	r5, r2
 800024c:	0d76      	lsrs	r6, r6, #21
 800024e:	0d49      	lsrs	r1, r1, #21
 8000250:	0fc0      	lsrs	r0, r0, #31
 8000252:	4682      	mov	sl, r0
 8000254:	46ac      	mov	ip, r5
 8000256:	00ff      	lsls	r7, r7, #3
 8000258:	1a72      	subs	r2, r6, r1
 800025a:	4284      	cmp	r4, r0
 800025c:	d100      	bne.n	8000260 <__aeabi_dadd+0x40>
 800025e:	e098      	b.n	8000392 <__aeabi_dadd+0x172>
 8000260:	2a00      	cmp	r2, #0
 8000262:	dc00      	bgt.n	8000266 <__aeabi_dadd+0x46>
 8000264:	e081      	b.n	800036a <__aeabi_dadd+0x14a>
 8000266:	2900      	cmp	r1, #0
 8000268:	d100      	bne.n	800026c <__aeabi_dadd+0x4c>
 800026a:	e0b6      	b.n	80003da <__aeabi_dadd+0x1ba>
 800026c:	49c9      	ldr	r1, [pc, #804]	; (8000594 <__aeabi_dadd+0x374>)
 800026e:	428e      	cmp	r6, r1
 8000270:	d100      	bne.n	8000274 <__aeabi_dadd+0x54>
 8000272:	e172      	b.n	800055a <__aeabi_dadd+0x33a>
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0028      	movs	r0, r5
 8000278:	0409      	lsls	r1, r1, #16
 800027a:	4308      	orrs	r0, r1
 800027c:	4684      	mov	ip, r0
 800027e:	2a38      	cmp	r2, #56	; 0x38
 8000280:	dd00      	ble.n	8000284 <__aeabi_dadd+0x64>
 8000282:	e15e      	b.n	8000542 <__aeabi_dadd+0x322>
 8000284:	2a1f      	cmp	r2, #31
 8000286:	dd00      	ble.n	800028a <__aeabi_dadd+0x6a>
 8000288:	e1ee      	b.n	8000668 <__aeabi_dadd+0x448>
 800028a:	2020      	movs	r0, #32
 800028c:	0039      	movs	r1, r7
 800028e:	4665      	mov	r5, ip
 8000290:	1a80      	subs	r0, r0, r2
 8000292:	4087      	lsls	r7, r0
 8000294:	40d1      	lsrs	r1, r2
 8000296:	4085      	lsls	r5, r0
 8000298:	430d      	orrs	r5, r1
 800029a:	0039      	movs	r1, r7
 800029c:	1e4f      	subs	r7, r1, #1
 800029e:	41b9      	sbcs	r1, r7
 80002a0:	4667      	mov	r7, ip
 80002a2:	40d7      	lsrs	r7, r2
 80002a4:	4329      	orrs	r1, r5
 80002a6:	1bdb      	subs	r3, r3, r7
 80002a8:	464a      	mov	r2, r9
 80002aa:	1a55      	subs	r5, r2, r1
 80002ac:	45a9      	cmp	r9, r5
 80002ae:	4189      	sbcs	r1, r1
 80002b0:	4249      	negs	r1, r1
 80002b2:	1a5b      	subs	r3, r3, r1
 80002b4:	4698      	mov	r8, r3
 80002b6:	4643      	mov	r3, r8
 80002b8:	021b      	lsls	r3, r3, #8
 80002ba:	d400      	bmi.n	80002be <__aeabi_dadd+0x9e>
 80002bc:	e0cc      	b.n	8000458 <__aeabi_dadd+0x238>
 80002be:	4643      	mov	r3, r8
 80002c0:	025b      	lsls	r3, r3, #9
 80002c2:	0a5b      	lsrs	r3, r3, #9
 80002c4:	4698      	mov	r8, r3
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_dadd+0xae>
 80002cc:	e12c      	b.n	8000528 <__aeabi_dadd+0x308>
 80002ce:	4640      	mov	r0, r8
 80002d0:	f001 f912 	bl	80014f8 <__clzsi2>
 80002d4:	0001      	movs	r1, r0
 80002d6:	3908      	subs	r1, #8
 80002d8:	2220      	movs	r2, #32
 80002da:	0028      	movs	r0, r5
 80002dc:	4643      	mov	r3, r8
 80002de:	1a52      	subs	r2, r2, r1
 80002e0:	408b      	lsls	r3, r1
 80002e2:	40d0      	lsrs	r0, r2
 80002e4:	408d      	lsls	r5, r1
 80002e6:	4303      	orrs	r3, r0
 80002e8:	428e      	cmp	r6, r1
 80002ea:	dd00      	ble.n	80002ee <__aeabi_dadd+0xce>
 80002ec:	e117      	b.n	800051e <__aeabi_dadd+0x2fe>
 80002ee:	1b8e      	subs	r6, r1, r6
 80002f0:	1c72      	adds	r2, r6, #1
 80002f2:	2a1f      	cmp	r2, #31
 80002f4:	dd00      	ble.n	80002f8 <__aeabi_dadd+0xd8>
 80002f6:	e1a7      	b.n	8000648 <__aeabi_dadd+0x428>
 80002f8:	2120      	movs	r1, #32
 80002fa:	0018      	movs	r0, r3
 80002fc:	002e      	movs	r6, r5
 80002fe:	1a89      	subs	r1, r1, r2
 8000300:	408d      	lsls	r5, r1
 8000302:	4088      	lsls	r0, r1
 8000304:	40d6      	lsrs	r6, r2
 8000306:	40d3      	lsrs	r3, r2
 8000308:	1e69      	subs	r1, r5, #1
 800030a:	418d      	sbcs	r5, r1
 800030c:	4330      	orrs	r0, r6
 800030e:	4698      	mov	r8, r3
 8000310:	2600      	movs	r6, #0
 8000312:	4305      	orrs	r5, r0
 8000314:	076b      	lsls	r3, r5, #29
 8000316:	d009      	beq.n	800032c <__aeabi_dadd+0x10c>
 8000318:	230f      	movs	r3, #15
 800031a:	402b      	ands	r3, r5
 800031c:	2b04      	cmp	r3, #4
 800031e:	d005      	beq.n	800032c <__aeabi_dadd+0x10c>
 8000320:	1d2b      	adds	r3, r5, #4
 8000322:	42ab      	cmp	r3, r5
 8000324:	41ad      	sbcs	r5, r5
 8000326:	426d      	negs	r5, r5
 8000328:	44a8      	add	r8, r5
 800032a:	001d      	movs	r5, r3
 800032c:	4643      	mov	r3, r8
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	d400      	bmi.n	8000334 <__aeabi_dadd+0x114>
 8000332:	e094      	b.n	800045e <__aeabi_dadd+0x23e>
 8000334:	4b97      	ldr	r3, [pc, #604]	; (8000594 <__aeabi_dadd+0x374>)
 8000336:	1c72      	adds	r2, r6, #1
 8000338:	429a      	cmp	r2, r3
 800033a:	d100      	bne.n	800033e <__aeabi_dadd+0x11e>
 800033c:	e09d      	b.n	800047a <__aeabi_dadd+0x25a>
 800033e:	4641      	mov	r1, r8
 8000340:	4b95      	ldr	r3, [pc, #596]	; (8000598 <__aeabi_dadd+0x378>)
 8000342:	08ed      	lsrs	r5, r5, #3
 8000344:	4019      	ands	r1, r3
 8000346:	000b      	movs	r3, r1
 8000348:	0552      	lsls	r2, r2, #21
 800034a:	0749      	lsls	r1, r1, #29
 800034c:	025b      	lsls	r3, r3, #9
 800034e:	4329      	orrs	r1, r5
 8000350:	0b1b      	lsrs	r3, r3, #12
 8000352:	0d52      	lsrs	r2, r2, #21
 8000354:	0512      	lsls	r2, r2, #20
 8000356:	4313      	orrs	r3, r2
 8000358:	07e4      	lsls	r4, r4, #31
 800035a:	4323      	orrs	r3, r4
 800035c:	0008      	movs	r0, r1
 800035e:	0019      	movs	r1, r3
 8000360:	bce0      	pop	{r5, r6, r7}
 8000362:	46ba      	mov	sl, r7
 8000364:	46b1      	mov	r9, r6
 8000366:	46a8      	mov	r8, r5
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	2a00      	cmp	r2, #0
 800036c:	d043      	beq.n	80003f6 <__aeabi_dadd+0x1d6>
 800036e:	1b8a      	subs	r2, r1, r6
 8000370:	2e00      	cmp	r6, #0
 8000372:	d000      	beq.n	8000376 <__aeabi_dadd+0x156>
 8000374:	e12a      	b.n	80005cc <__aeabi_dadd+0x3ac>
 8000376:	464c      	mov	r4, r9
 8000378:	431c      	orrs	r4, r3
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x15e>
 800037c:	e1d1      	b.n	8000722 <__aeabi_dadd+0x502>
 800037e:	1e54      	subs	r4, r2, #1
 8000380:	2a01      	cmp	r2, #1
 8000382:	d100      	bne.n	8000386 <__aeabi_dadd+0x166>
 8000384:	e21f      	b.n	80007c6 <__aeabi_dadd+0x5a6>
 8000386:	4d83      	ldr	r5, [pc, #524]	; (8000594 <__aeabi_dadd+0x374>)
 8000388:	42aa      	cmp	r2, r5
 800038a:	d100      	bne.n	800038e <__aeabi_dadd+0x16e>
 800038c:	e272      	b.n	8000874 <__aeabi_dadd+0x654>
 800038e:	0022      	movs	r2, r4
 8000390:	e123      	b.n	80005da <__aeabi_dadd+0x3ba>
 8000392:	2a00      	cmp	r2, #0
 8000394:	dc00      	bgt.n	8000398 <__aeabi_dadd+0x178>
 8000396:	e098      	b.n	80004ca <__aeabi_dadd+0x2aa>
 8000398:	2900      	cmp	r1, #0
 800039a:	d042      	beq.n	8000422 <__aeabi_dadd+0x202>
 800039c:	497d      	ldr	r1, [pc, #500]	; (8000594 <__aeabi_dadd+0x374>)
 800039e:	428e      	cmp	r6, r1
 80003a0:	d100      	bne.n	80003a4 <__aeabi_dadd+0x184>
 80003a2:	e0da      	b.n	800055a <__aeabi_dadd+0x33a>
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0028      	movs	r0, r5
 80003a8:	0409      	lsls	r1, r1, #16
 80003aa:	4308      	orrs	r0, r1
 80003ac:	4684      	mov	ip, r0
 80003ae:	2a38      	cmp	r2, #56	; 0x38
 80003b0:	dd00      	ble.n	80003b4 <__aeabi_dadd+0x194>
 80003b2:	e129      	b.n	8000608 <__aeabi_dadd+0x3e8>
 80003b4:	2a1f      	cmp	r2, #31
 80003b6:	dc00      	bgt.n	80003ba <__aeabi_dadd+0x19a>
 80003b8:	e187      	b.n	80006ca <__aeabi_dadd+0x4aa>
 80003ba:	0011      	movs	r1, r2
 80003bc:	4665      	mov	r5, ip
 80003be:	3920      	subs	r1, #32
 80003c0:	40cd      	lsrs	r5, r1
 80003c2:	2a20      	cmp	r2, #32
 80003c4:	d004      	beq.n	80003d0 <__aeabi_dadd+0x1b0>
 80003c6:	2040      	movs	r0, #64	; 0x40
 80003c8:	4661      	mov	r1, ip
 80003ca:	1a82      	subs	r2, r0, r2
 80003cc:	4091      	lsls	r1, r2
 80003ce:	430f      	orrs	r7, r1
 80003d0:	0039      	movs	r1, r7
 80003d2:	1e4f      	subs	r7, r1, #1
 80003d4:	41b9      	sbcs	r1, r7
 80003d6:	430d      	orrs	r5, r1
 80003d8:	e11b      	b.n	8000612 <__aeabi_dadd+0x3f2>
 80003da:	0029      	movs	r1, r5
 80003dc:	4339      	orrs	r1, r7
 80003de:	d100      	bne.n	80003e2 <__aeabi_dadd+0x1c2>
 80003e0:	e0b5      	b.n	800054e <__aeabi_dadd+0x32e>
 80003e2:	1e51      	subs	r1, r2, #1
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	d100      	bne.n	80003ea <__aeabi_dadd+0x1ca>
 80003e8:	e1ab      	b.n	8000742 <__aeabi_dadd+0x522>
 80003ea:	486a      	ldr	r0, [pc, #424]	; (8000594 <__aeabi_dadd+0x374>)
 80003ec:	4282      	cmp	r2, r0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_dadd+0x1d2>
 80003f0:	e1b2      	b.n	8000758 <__aeabi_dadd+0x538>
 80003f2:	000a      	movs	r2, r1
 80003f4:	e743      	b.n	800027e <__aeabi_dadd+0x5e>
 80003f6:	4969      	ldr	r1, [pc, #420]	; (800059c <__aeabi_dadd+0x37c>)
 80003f8:	1c75      	adds	r5, r6, #1
 80003fa:	420d      	tst	r5, r1
 80003fc:	d000      	beq.n	8000400 <__aeabi_dadd+0x1e0>
 80003fe:	e0cf      	b.n	80005a0 <__aeabi_dadd+0x380>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d000      	beq.n	8000406 <__aeabi_dadd+0x1e6>
 8000404:	e193      	b.n	800072e <__aeabi_dadd+0x50e>
 8000406:	4649      	mov	r1, r9
 8000408:	4319      	orrs	r1, r3
 800040a:	d100      	bne.n	800040e <__aeabi_dadd+0x1ee>
 800040c:	e1d1      	b.n	80007b2 <__aeabi_dadd+0x592>
 800040e:	4661      	mov	r1, ip
 8000410:	4339      	orrs	r1, r7
 8000412:	d000      	beq.n	8000416 <__aeabi_dadd+0x1f6>
 8000414:	e1e3      	b.n	80007de <__aeabi_dadd+0x5be>
 8000416:	4649      	mov	r1, r9
 8000418:	0758      	lsls	r0, r3, #29
 800041a:	08c9      	lsrs	r1, r1, #3
 800041c:	4301      	orrs	r1, r0
 800041e:	08db      	lsrs	r3, r3, #3
 8000420:	e026      	b.n	8000470 <__aeabi_dadd+0x250>
 8000422:	0029      	movs	r1, r5
 8000424:	4339      	orrs	r1, r7
 8000426:	d100      	bne.n	800042a <__aeabi_dadd+0x20a>
 8000428:	e091      	b.n	800054e <__aeabi_dadd+0x32e>
 800042a:	1e51      	subs	r1, r2, #1
 800042c:	2a01      	cmp	r2, #1
 800042e:	d005      	beq.n	800043c <__aeabi_dadd+0x21c>
 8000430:	4858      	ldr	r0, [pc, #352]	; (8000594 <__aeabi_dadd+0x374>)
 8000432:	4282      	cmp	r2, r0
 8000434:	d100      	bne.n	8000438 <__aeabi_dadd+0x218>
 8000436:	e18f      	b.n	8000758 <__aeabi_dadd+0x538>
 8000438:	000a      	movs	r2, r1
 800043a:	e7b8      	b.n	80003ae <__aeabi_dadd+0x18e>
 800043c:	003d      	movs	r5, r7
 800043e:	444d      	add	r5, r9
 8000440:	454d      	cmp	r5, r9
 8000442:	4189      	sbcs	r1, r1
 8000444:	4463      	add	r3, ip
 8000446:	4698      	mov	r8, r3
 8000448:	4249      	negs	r1, r1
 800044a:	4488      	add	r8, r1
 800044c:	4643      	mov	r3, r8
 800044e:	2602      	movs	r6, #2
 8000450:	021b      	lsls	r3, r3, #8
 8000452:	d500      	bpl.n	8000456 <__aeabi_dadd+0x236>
 8000454:	e0eb      	b.n	800062e <__aeabi_dadd+0x40e>
 8000456:	3e01      	subs	r6, #1
 8000458:	076b      	lsls	r3, r5, #29
 800045a:	d000      	beq.n	800045e <__aeabi_dadd+0x23e>
 800045c:	e75c      	b.n	8000318 <__aeabi_dadd+0xf8>
 800045e:	4643      	mov	r3, r8
 8000460:	08e9      	lsrs	r1, r5, #3
 8000462:	075a      	lsls	r2, r3, #29
 8000464:	4311      	orrs	r1, r2
 8000466:	0032      	movs	r2, r6
 8000468:	08db      	lsrs	r3, r3, #3
 800046a:	484a      	ldr	r0, [pc, #296]	; (8000594 <__aeabi_dadd+0x374>)
 800046c:	4282      	cmp	r2, r0
 800046e:	d021      	beq.n	80004b4 <__aeabi_dadd+0x294>
 8000470:	031b      	lsls	r3, r3, #12
 8000472:	0552      	lsls	r2, r2, #21
 8000474:	0b1b      	lsrs	r3, r3, #12
 8000476:	0d52      	lsrs	r2, r2, #21
 8000478:	e76c      	b.n	8000354 <__aeabi_dadd+0x134>
 800047a:	2300      	movs	r3, #0
 800047c:	2100      	movs	r1, #0
 800047e:	e769      	b.n	8000354 <__aeabi_dadd+0x134>
 8000480:	002a      	movs	r2, r5
 8000482:	433a      	orrs	r2, r7
 8000484:	d069      	beq.n	800055a <__aeabi_dadd+0x33a>
 8000486:	464a      	mov	r2, r9
 8000488:	0758      	lsls	r0, r3, #29
 800048a:	08d1      	lsrs	r1, r2, #3
 800048c:	08da      	lsrs	r2, r3, #3
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	031b      	lsls	r3, r3, #12
 8000492:	4308      	orrs	r0, r1
 8000494:	421a      	tst	r2, r3
 8000496:	d007      	beq.n	80004a8 <__aeabi_dadd+0x288>
 8000498:	0029      	movs	r1, r5
 800049a:	08ed      	lsrs	r5, r5, #3
 800049c:	421d      	tst	r5, r3
 800049e:	d103      	bne.n	80004a8 <__aeabi_dadd+0x288>
 80004a0:	002a      	movs	r2, r5
 80004a2:	08ff      	lsrs	r7, r7, #3
 80004a4:	0748      	lsls	r0, r1, #29
 80004a6:	4338      	orrs	r0, r7
 80004a8:	0f43      	lsrs	r3, r0, #29
 80004aa:	00c1      	lsls	r1, r0, #3
 80004ac:	075b      	lsls	r3, r3, #29
 80004ae:	08c9      	lsrs	r1, r1, #3
 80004b0:	4319      	orrs	r1, r3
 80004b2:	0013      	movs	r3, r2
 80004b4:	000a      	movs	r2, r1
 80004b6:	431a      	orrs	r2, r3
 80004b8:	d100      	bne.n	80004bc <__aeabi_dadd+0x29c>
 80004ba:	e213      	b.n	80008e4 <__aeabi_dadd+0x6c4>
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0312      	lsls	r2, r2, #12
 80004c0:	4313      	orrs	r3, r2
 80004c2:	031b      	lsls	r3, r3, #12
 80004c4:	4a33      	ldr	r2, [pc, #204]	; (8000594 <__aeabi_dadd+0x374>)
 80004c6:	0b1b      	lsrs	r3, r3, #12
 80004c8:	e744      	b.n	8000354 <__aeabi_dadd+0x134>
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d04b      	beq.n	8000566 <__aeabi_dadd+0x346>
 80004ce:	1b8a      	subs	r2, r1, r6
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dadd+0x2b6>
 80004d4:	e0e7      	b.n	80006a6 <__aeabi_dadd+0x486>
 80004d6:	482f      	ldr	r0, [pc, #188]	; (8000594 <__aeabi_dadd+0x374>)
 80004d8:	4281      	cmp	r1, r0
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x2be>
 80004dc:	e195      	b.n	800080a <__aeabi_dadd+0x5ea>
 80004de:	2080      	movs	r0, #128	; 0x80
 80004e0:	0400      	lsls	r0, r0, #16
 80004e2:	4303      	orrs	r3, r0
 80004e4:	2a38      	cmp	r2, #56	; 0x38
 80004e6:	dd00      	ble.n	80004ea <__aeabi_dadd+0x2ca>
 80004e8:	e143      	b.n	8000772 <__aeabi_dadd+0x552>
 80004ea:	2a1f      	cmp	r2, #31
 80004ec:	dd00      	ble.n	80004f0 <__aeabi_dadd+0x2d0>
 80004ee:	e1db      	b.n	80008a8 <__aeabi_dadd+0x688>
 80004f0:	2020      	movs	r0, #32
 80004f2:	001d      	movs	r5, r3
 80004f4:	464e      	mov	r6, r9
 80004f6:	1a80      	subs	r0, r0, r2
 80004f8:	4085      	lsls	r5, r0
 80004fa:	40d6      	lsrs	r6, r2
 80004fc:	4335      	orrs	r5, r6
 80004fe:	464e      	mov	r6, r9
 8000500:	4086      	lsls	r6, r0
 8000502:	0030      	movs	r0, r6
 8000504:	40d3      	lsrs	r3, r2
 8000506:	1e46      	subs	r6, r0, #1
 8000508:	41b0      	sbcs	r0, r6
 800050a:	449c      	add	ip, r3
 800050c:	4305      	orrs	r5, r0
 800050e:	19ed      	adds	r5, r5, r7
 8000510:	42bd      	cmp	r5, r7
 8000512:	419b      	sbcs	r3, r3
 8000514:	425b      	negs	r3, r3
 8000516:	4463      	add	r3, ip
 8000518:	4698      	mov	r8, r3
 800051a:	000e      	movs	r6, r1
 800051c:	e07f      	b.n	800061e <__aeabi_dadd+0x3fe>
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <__aeabi_dadd+0x378>)
 8000520:	1a76      	subs	r6, r6, r1
 8000522:	4013      	ands	r3, r2
 8000524:	4698      	mov	r8, r3
 8000526:	e6f5      	b.n	8000314 <__aeabi_dadd+0xf4>
 8000528:	0028      	movs	r0, r5
 800052a:	f000 ffe5 	bl	80014f8 <__clzsi2>
 800052e:	0001      	movs	r1, r0
 8000530:	3118      	adds	r1, #24
 8000532:	291f      	cmp	r1, #31
 8000534:	dc00      	bgt.n	8000538 <__aeabi_dadd+0x318>
 8000536:	e6cf      	b.n	80002d8 <__aeabi_dadd+0xb8>
 8000538:	002b      	movs	r3, r5
 800053a:	3808      	subs	r0, #8
 800053c:	4083      	lsls	r3, r0
 800053e:	2500      	movs	r5, #0
 8000540:	e6d2      	b.n	80002e8 <__aeabi_dadd+0xc8>
 8000542:	4662      	mov	r2, ip
 8000544:	433a      	orrs	r2, r7
 8000546:	0011      	movs	r1, r2
 8000548:	1e4f      	subs	r7, r1, #1
 800054a:	41b9      	sbcs	r1, r7
 800054c:	e6ac      	b.n	80002a8 <__aeabi_dadd+0x88>
 800054e:	4649      	mov	r1, r9
 8000550:	0758      	lsls	r0, r3, #29
 8000552:	08c9      	lsrs	r1, r1, #3
 8000554:	4301      	orrs	r1, r0
 8000556:	08db      	lsrs	r3, r3, #3
 8000558:	e787      	b.n	800046a <__aeabi_dadd+0x24a>
 800055a:	4649      	mov	r1, r9
 800055c:	075a      	lsls	r2, r3, #29
 800055e:	08c9      	lsrs	r1, r1, #3
 8000560:	4311      	orrs	r1, r2
 8000562:	08db      	lsrs	r3, r3, #3
 8000564:	e7a6      	b.n	80004b4 <__aeabi_dadd+0x294>
 8000566:	490d      	ldr	r1, [pc, #52]	; (800059c <__aeabi_dadd+0x37c>)
 8000568:	1c70      	adds	r0, r6, #1
 800056a:	4208      	tst	r0, r1
 800056c:	d000      	beq.n	8000570 <__aeabi_dadd+0x350>
 800056e:	e0bb      	b.n	80006e8 <__aeabi_dadd+0x4c8>
 8000570:	2e00      	cmp	r6, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_dadd+0x356>
 8000574:	e114      	b.n	80007a0 <__aeabi_dadd+0x580>
 8000576:	4649      	mov	r1, r9
 8000578:	4319      	orrs	r1, r3
 800057a:	d100      	bne.n	800057e <__aeabi_dadd+0x35e>
 800057c:	e175      	b.n	800086a <__aeabi_dadd+0x64a>
 800057e:	0029      	movs	r1, r5
 8000580:	4339      	orrs	r1, r7
 8000582:	d000      	beq.n	8000586 <__aeabi_dadd+0x366>
 8000584:	e17e      	b.n	8000884 <__aeabi_dadd+0x664>
 8000586:	4649      	mov	r1, r9
 8000588:	0758      	lsls	r0, r3, #29
 800058a:	08c9      	lsrs	r1, r1, #3
 800058c:	4301      	orrs	r1, r0
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	e76e      	b.n	8000470 <__aeabi_dadd+0x250>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	000007ff 	.word	0x000007ff
 8000598:	ff7fffff 	.word	0xff7fffff
 800059c:	000007fe 	.word	0x000007fe
 80005a0:	4649      	mov	r1, r9
 80005a2:	1bcd      	subs	r5, r1, r7
 80005a4:	4661      	mov	r1, ip
 80005a6:	1a58      	subs	r0, r3, r1
 80005a8:	45a9      	cmp	r9, r5
 80005aa:	4189      	sbcs	r1, r1
 80005ac:	4249      	negs	r1, r1
 80005ae:	4688      	mov	r8, r1
 80005b0:	0001      	movs	r1, r0
 80005b2:	4640      	mov	r0, r8
 80005b4:	1a09      	subs	r1, r1, r0
 80005b6:	4688      	mov	r8, r1
 80005b8:	0209      	lsls	r1, r1, #8
 80005ba:	d500      	bpl.n	80005be <__aeabi_dadd+0x39e>
 80005bc:	e0a6      	b.n	800070c <__aeabi_dadd+0x4ec>
 80005be:	4641      	mov	r1, r8
 80005c0:	4329      	orrs	r1, r5
 80005c2:	d000      	beq.n	80005c6 <__aeabi_dadd+0x3a6>
 80005c4:	e67f      	b.n	80002c6 <__aeabi_dadd+0xa6>
 80005c6:	2300      	movs	r3, #0
 80005c8:	2400      	movs	r4, #0
 80005ca:	e751      	b.n	8000470 <__aeabi_dadd+0x250>
 80005cc:	4cc7      	ldr	r4, [pc, #796]	; (80008ec <__aeabi_dadd+0x6cc>)
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x3b4>
 80005d2:	e0c7      	b.n	8000764 <__aeabi_dadd+0x544>
 80005d4:	2480      	movs	r4, #128	; 0x80
 80005d6:	0424      	lsls	r4, r4, #16
 80005d8:	4323      	orrs	r3, r4
 80005da:	2a38      	cmp	r2, #56	; 0x38
 80005dc:	dc54      	bgt.n	8000688 <__aeabi_dadd+0x468>
 80005de:	2a1f      	cmp	r2, #31
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dadd+0x3c4>
 80005e2:	e0cc      	b.n	800077e <__aeabi_dadd+0x55e>
 80005e4:	2420      	movs	r4, #32
 80005e6:	4648      	mov	r0, r9
 80005e8:	1aa4      	subs	r4, r4, r2
 80005ea:	001d      	movs	r5, r3
 80005ec:	464e      	mov	r6, r9
 80005ee:	40a0      	lsls	r0, r4
 80005f0:	40d6      	lsrs	r6, r2
 80005f2:	40a5      	lsls	r5, r4
 80005f4:	0004      	movs	r4, r0
 80005f6:	40d3      	lsrs	r3, r2
 80005f8:	4662      	mov	r2, ip
 80005fa:	4335      	orrs	r5, r6
 80005fc:	1e66      	subs	r6, r4, #1
 80005fe:	41b4      	sbcs	r4, r6
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	469c      	mov	ip, r3
 8000604:	4325      	orrs	r5, r4
 8000606:	e044      	b.n	8000692 <__aeabi_dadd+0x472>
 8000608:	4662      	mov	r2, ip
 800060a:	433a      	orrs	r2, r7
 800060c:	0015      	movs	r5, r2
 800060e:	1e6f      	subs	r7, r5, #1
 8000610:	41bd      	sbcs	r5, r7
 8000612:	444d      	add	r5, r9
 8000614:	454d      	cmp	r5, r9
 8000616:	4189      	sbcs	r1, r1
 8000618:	4249      	negs	r1, r1
 800061a:	4688      	mov	r8, r1
 800061c:	4498      	add	r8, r3
 800061e:	4643      	mov	r3, r8
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0x406>
 8000624:	e718      	b.n	8000458 <__aeabi_dadd+0x238>
 8000626:	4bb1      	ldr	r3, [pc, #708]	; (80008ec <__aeabi_dadd+0x6cc>)
 8000628:	3601      	adds	r6, #1
 800062a:	429e      	cmp	r6, r3
 800062c:	d049      	beq.n	80006c2 <__aeabi_dadd+0x4a2>
 800062e:	4642      	mov	r2, r8
 8000630:	4baf      	ldr	r3, [pc, #700]	; (80008f0 <__aeabi_dadd+0x6d0>)
 8000632:	2101      	movs	r1, #1
 8000634:	401a      	ands	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	086a      	lsrs	r2, r5, #1
 800063a:	400d      	ands	r5, r1
 800063c:	4315      	orrs	r5, r2
 800063e:	07d9      	lsls	r1, r3, #31
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	4698      	mov	r8, r3
 8000644:	430d      	orrs	r5, r1
 8000646:	e665      	b.n	8000314 <__aeabi_dadd+0xf4>
 8000648:	0018      	movs	r0, r3
 800064a:	3e1f      	subs	r6, #31
 800064c:	40f0      	lsrs	r0, r6
 800064e:	2a20      	cmp	r2, #32
 8000650:	d003      	beq.n	800065a <__aeabi_dadd+0x43a>
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	1a8a      	subs	r2, r1, r2
 8000656:	4093      	lsls	r3, r2
 8000658:	431d      	orrs	r5, r3
 800065a:	1e69      	subs	r1, r5, #1
 800065c:	418d      	sbcs	r5, r1
 800065e:	2300      	movs	r3, #0
 8000660:	2600      	movs	r6, #0
 8000662:	4698      	mov	r8, r3
 8000664:	4305      	orrs	r5, r0
 8000666:	e6f7      	b.n	8000458 <__aeabi_dadd+0x238>
 8000668:	0011      	movs	r1, r2
 800066a:	4665      	mov	r5, ip
 800066c:	3920      	subs	r1, #32
 800066e:	40cd      	lsrs	r5, r1
 8000670:	2a20      	cmp	r2, #32
 8000672:	d004      	beq.n	800067e <__aeabi_dadd+0x45e>
 8000674:	2040      	movs	r0, #64	; 0x40
 8000676:	4661      	mov	r1, ip
 8000678:	1a82      	subs	r2, r0, r2
 800067a:	4091      	lsls	r1, r2
 800067c:	430f      	orrs	r7, r1
 800067e:	0039      	movs	r1, r7
 8000680:	1e4f      	subs	r7, r1, #1
 8000682:	41b9      	sbcs	r1, r7
 8000684:	4329      	orrs	r1, r5
 8000686:	e60f      	b.n	80002a8 <__aeabi_dadd+0x88>
 8000688:	464a      	mov	r2, r9
 800068a:	4313      	orrs	r3, r2
 800068c:	001d      	movs	r5, r3
 800068e:	1e6b      	subs	r3, r5, #1
 8000690:	419d      	sbcs	r5, r3
 8000692:	1b7d      	subs	r5, r7, r5
 8000694:	42af      	cmp	r7, r5
 8000696:	419b      	sbcs	r3, r3
 8000698:	4662      	mov	r2, ip
 800069a:	425b      	negs	r3, r3
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	4698      	mov	r8, r3
 80006a0:	4654      	mov	r4, sl
 80006a2:	000e      	movs	r6, r1
 80006a4:	e607      	b.n	80002b6 <__aeabi_dadd+0x96>
 80006a6:	4648      	mov	r0, r9
 80006a8:	4318      	orrs	r0, r3
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x48e>
 80006ac:	e0b3      	b.n	8000816 <__aeabi_dadd+0x5f6>
 80006ae:	1e50      	subs	r0, r2, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x496>
 80006b4:	e10d      	b.n	80008d2 <__aeabi_dadd+0x6b2>
 80006b6:	4d8d      	ldr	r5, [pc, #564]	; (80008ec <__aeabi_dadd+0x6cc>)
 80006b8:	42aa      	cmp	r2, r5
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x49e>
 80006bc:	e0a5      	b.n	800080a <__aeabi_dadd+0x5ea>
 80006be:	0002      	movs	r2, r0
 80006c0:	e710      	b.n	80004e4 <__aeabi_dadd+0x2c4>
 80006c2:	0032      	movs	r2, r6
 80006c4:	2300      	movs	r3, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	e644      	b.n	8000354 <__aeabi_dadd+0x134>
 80006ca:	2120      	movs	r1, #32
 80006cc:	0038      	movs	r0, r7
 80006ce:	1a89      	subs	r1, r1, r2
 80006d0:	4665      	mov	r5, ip
 80006d2:	408f      	lsls	r7, r1
 80006d4:	408d      	lsls	r5, r1
 80006d6:	40d0      	lsrs	r0, r2
 80006d8:	1e79      	subs	r1, r7, #1
 80006da:	418f      	sbcs	r7, r1
 80006dc:	4305      	orrs	r5, r0
 80006de:	433d      	orrs	r5, r7
 80006e0:	4667      	mov	r7, ip
 80006e2:	40d7      	lsrs	r7, r2
 80006e4:	19db      	adds	r3, r3, r7
 80006e6:	e794      	b.n	8000612 <__aeabi_dadd+0x3f2>
 80006e8:	4a80      	ldr	r2, [pc, #512]	; (80008ec <__aeabi_dadd+0x6cc>)
 80006ea:	4290      	cmp	r0, r2
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0x4d0>
 80006ee:	e0ec      	b.n	80008ca <__aeabi_dadd+0x6aa>
 80006f0:	0039      	movs	r1, r7
 80006f2:	4449      	add	r1, r9
 80006f4:	4549      	cmp	r1, r9
 80006f6:	4192      	sbcs	r2, r2
 80006f8:	4463      	add	r3, ip
 80006fa:	4252      	negs	r2, r2
 80006fc:	189b      	adds	r3, r3, r2
 80006fe:	07dd      	lsls	r5, r3, #31
 8000700:	0849      	lsrs	r1, r1, #1
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	4698      	mov	r8, r3
 8000706:	0006      	movs	r6, r0
 8000708:	430d      	orrs	r5, r1
 800070a:	e6a5      	b.n	8000458 <__aeabi_dadd+0x238>
 800070c:	464a      	mov	r2, r9
 800070e:	1abd      	subs	r5, r7, r2
 8000710:	42af      	cmp	r7, r5
 8000712:	4189      	sbcs	r1, r1
 8000714:	4662      	mov	r2, ip
 8000716:	4249      	negs	r1, r1
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	1a5b      	subs	r3, r3, r1
 800071c:	4698      	mov	r8, r3
 800071e:	4654      	mov	r4, sl
 8000720:	e5d1      	b.n	80002c6 <__aeabi_dadd+0xa6>
 8000722:	076c      	lsls	r4, r5, #29
 8000724:	08f9      	lsrs	r1, r7, #3
 8000726:	4321      	orrs	r1, r4
 8000728:	08eb      	lsrs	r3, r5, #3
 800072a:	0004      	movs	r4, r0
 800072c:	e69d      	b.n	800046a <__aeabi_dadd+0x24a>
 800072e:	464a      	mov	r2, r9
 8000730:	431a      	orrs	r2, r3
 8000732:	d175      	bne.n	8000820 <__aeabi_dadd+0x600>
 8000734:	4661      	mov	r1, ip
 8000736:	4339      	orrs	r1, r7
 8000738:	d114      	bne.n	8000764 <__aeabi_dadd+0x544>
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	2400      	movs	r4, #0
 800073e:	031b      	lsls	r3, r3, #12
 8000740:	e6bc      	b.n	80004bc <__aeabi_dadd+0x29c>
 8000742:	464a      	mov	r2, r9
 8000744:	1bd5      	subs	r5, r2, r7
 8000746:	45a9      	cmp	r9, r5
 8000748:	4189      	sbcs	r1, r1
 800074a:	4662      	mov	r2, ip
 800074c:	4249      	negs	r1, r1
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	1a5b      	subs	r3, r3, r1
 8000752:	4698      	mov	r8, r3
 8000754:	2601      	movs	r6, #1
 8000756:	e5ae      	b.n	80002b6 <__aeabi_dadd+0x96>
 8000758:	464a      	mov	r2, r9
 800075a:	08d1      	lsrs	r1, r2, #3
 800075c:	075a      	lsls	r2, r3, #29
 800075e:	4311      	orrs	r1, r2
 8000760:	08db      	lsrs	r3, r3, #3
 8000762:	e6a7      	b.n	80004b4 <__aeabi_dadd+0x294>
 8000764:	4663      	mov	r3, ip
 8000766:	08f9      	lsrs	r1, r7, #3
 8000768:	075a      	lsls	r2, r3, #29
 800076a:	4654      	mov	r4, sl
 800076c:	4311      	orrs	r1, r2
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	e6a0      	b.n	80004b4 <__aeabi_dadd+0x294>
 8000772:	464a      	mov	r2, r9
 8000774:	4313      	orrs	r3, r2
 8000776:	001d      	movs	r5, r3
 8000778:	1e6b      	subs	r3, r5, #1
 800077a:	419d      	sbcs	r5, r3
 800077c:	e6c7      	b.n	800050e <__aeabi_dadd+0x2ee>
 800077e:	0014      	movs	r4, r2
 8000780:	001e      	movs	r6, r3
 8000782:	3c20      	subs	r4, #32
 8000784:	40e6      	lsrs	r6, r4
 8000786:	2a20      	cmp	r2, #32
 8000788:	d005      	beq.n	8000796 <__aeabi_dadd+0x576>
 800078a:	2440      	movs	r4, #64	; 0x40
 800078c:	1aa2      	subs	r2, r4, r2
 800078e:	4093      	lsls	r3, r2
 8000790:	464a      	mov	r2, r9
 8000792:	431a      	orrs	r2, r3
 8000794:	4691      	mov	r9, r2
 8000796:	464d      	mov	r5, r9
 8000798:	1e6b      	subs	r3, r5, #1
 800079a:	419d      	sbcs	r5, r3
 800079c:	4335      	orrs	r5, r6
 800079e:	e778      	b.n	8000692 <__aeabi_dadd+0x472>
 80007a0:	464a      	mov	r2, r9
 80007a2:	431a      	orrs	r2, r3
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dadd+0x588>
 80007a6:	e66b      	b.n	8000480 <__aeabi_dadd+0x260>
 80007a8:	076b      	lsls	r3, r5, #29
 80007aa:	08f9      	lsrs	r1, r7, #3
 80007ac:	4319      	orrs	r1, r3
 80007ae:	08eb      	lsrs	r3, r5, #3
 80007b0:	e680      	b.n	80004b4 <__aeabi_dadd+0x294>
 80007b2:	4661      	mov	r1, ip
 80007b4:	4339      	orrs	r1, r7
 80007b6:	d054      	beq.n	8000862 <__aeabi_dadd+0x642>
 80007b8:	4663      	mov	r3, ip
 80007ba:	08f9      	lsrs	r1, r7, #3
 80007bc:	075c      	lsls	r4, r3, #29
 80007be:	4321      	orrs	r1, r4
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	0004      	movs	r4, r0
 80007c4:	e654      	b.n	8000470 <__aeabi_dadd+0x250>
 80007c6:	464a      	mov	r2, r9
 80007c8:	1abd      	subs	r5, r7, r2
 80007ca:	42af      	cmp	r7, r5
 80007cc:	4189      	sbcs	r1, r1
 80007ce:	4662      	mov	r2, ip
 80007d0:	4249      	negs	r1, r1
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	1a5b      	subs	r3, r3, r1
 80007d6:	4698      	mov	r8, r3
 80007d8:	0004      	movs	r4, r0
 80007da:	2601      	movs	r6, #1
 80007dc:	e56b      	b.n	80002b6 <__aeabi_dadd+0x96>
 80007de:	464a      	mov	r2, r9
 80007e0:	1bd5      	subs	r5, r2, r7
 80007e2:	45a9      	cmp	r9, r5
 80007e4:	4189      	sbcs	r1, r1
 80007e6:	4662      	mov	r2, ip
 80007e8:	4249      	negs	r1, r1
 80007ea:	1a9a      	subs	r2, r3, r2
 80007ec:	1a52      	subs	r2, r2, r1
 80007ee:	4690      	mov	r8, r2
 80007f0:	0212      	lsls	r2, r2, #8
 80007f2:	d532      	bpl.n	800085a <__aeabi_dadd+0x63a>
 80007f4:	464a      	mov	r2, r9
 80007f6:	1abd      	subs	r5, r7, r2
 80007f8:	42af      	cmp	r7, r5
 80007fa:	4189      	sbcs	r1, r1
 80007fc:	4662      	mov	r2, ip
 80007fe:	4249      	negs	r1, r1
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	1a5b      	subs	r3, r3, r1
 8000804:	4698      	mov	r8, r3
 8000806:	0004      	movs	r4, r0
 8000808:	e584      	b.n	8000314 <__aeabi_dadd+0xf4>
 800080a:	4663      	mov	r3, ip
 800080c:	08f9      	lsrs	r1, r7, #3
 800080e:	075a      	lsls	r2, r3, #29
 8000810:	4311      	orrs	r1, r2
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	e64e      	b.n	80004b4 <__aeabi_dadd+0x294>
 8000816:	08f9      	lsrs	r1, r7, #3
 8000818:	0768      	lsls	r0, r5, #29
 800081a:	4301      	orrs	r1, r0
 800081c:	08eb      	lsrs	r3, r5, #3
 800081e:	e624      	b.n	800046a <__aeabi_dadd+0x24a>
 8000820:	4662      	mov	r2, ip
 8000822:	433a      	orrs	r2, r7
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x608>
 8000826:	e698      	b.n	800055a <__aeabi_dadd+0x33a>
 8000828:	464a      	mov	r2, r9
 800082a:	08d1      	lsrs	r1, r2, #3
 800082c:	075a      	lsls	r2, r3, #29
 800082e:	4311      	orrs	r1, r2
 8000830:	08da      	lsrs	r2, r3, #3
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	031b      	lsls	r3, r3, #12
 8000836:	421a      	tst	r2, r3
 8000838:	d008      	beq.n	800084c <__aeabi_dadd+0x62c>
 800083a:	4660      	mov	r0, ip
 800083c:	08c5      	lsrs	r5, r0, #3
 800083e:	421d      	tst	r5, r3
 8000840:	d104      	bne.n	800084c <__aeabi_dadd+0x62c>
 8000842:	4654      	mov	r4, sl
 8000844:	002a      	movs	r2, r5
 8000846:	08f9      	lsrs	r1, r7, #3
 8000848:	0743      	lsls	r3, r0, #29
 800084a:	4319      	orrs	r1, r3
 800084c:	0f4b      	lsrs	r3, r1, #29
 800084e:	00c9      	lsls	r1, r1, #3
 8000850:	075b      	lsls	r3, r3, #29
 8000852:	08c9      	lsrs	r1, r1, #3
 8000854:	4319      	orrs	r1, r3
 8000856:	0013      	movs	r3, r2
 8000858:	e62c      	b.n	80004b4 <__aeabi_dadd+0x294>
 800085a:	4641      	mov	r1, r8
 800085c:	4329      	orrs	r1, r5
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x642>
 8000860:	e5fa      	b.n	8000458 <__aeabi_dadd+0x238>
 8000862:	2300      	movs	r3, #0
 8000864:	000a      	movs	r2, r1
 8000866:	2400      	movs	r4, #0
 8000868:	e602      	b.n	8000470 <__aeabi_dadd+0x250>
 800086a:	076b      	lsls	r3, r5, #29
 800086c:	08f9      	lsrs	r1, r7, #3
 800086e:	4319      	orrs	r1, r3
 8000870:	08eb      	lsrs	r3, r5, #3
 8000872:	e5fd      	b.n	8000470 <__aeabi_dadd+0x250>
 8000874:	4663      	mov	r3, ip
 8000876:	08f9      	lsrs	r1, r7, #3
 8000878:	075b      	lsls	r3, r3, #29
 800087a:	4319      	orrs	r1, r3
 800087c:	4663      	mov	r3, ip
 800087e:	0004      	movs	r4, r0
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	e617      	b.n	80004b4 <__aeabi_dadd+0x294>
 8000884:	003d      	movs	r5, r7
 8000886:	444d      	add	r5, r9
 8000888:	4463      	add	r3, ip
 800088a:	454d      	cmp	r5, r9
 800088c:	4189      	sbcs	r1, r1
 800088e:	4698      	mov	r8, r3
 8000890:	4249      	negs	r1, r1
 8000892:	4488      	add	r8, r1
 8000894:	4643      	mov	r3, r8
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	d400      	bmi.n	800089c <__aeabi_dadd+0x67c>
 800089a:	e5dd      	b.n	8000458 <__aeabi_dadd+0x238>
 800089c:	4642      	mov	r2, r8
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <__aeabi_dadd+0x6d0>)
 80008a0:	2601      	movs	r6, #1
 80008a2:	401a      	ands	r2, r3
 80008a4:	4690      	mov	r8, r2
 80008a6:	e5d7      	b.n	8000458 <__aeabi_dadd+0x238>
 80008a8:	0010      	movs	r0, r2
 80008aa:	001e      	movs	r6, r3
 80008ac:	3820      	subs	r0, #32
 80008ae:	40c6      	lsrs	r6, r0
 80008b0:	2a20      	cmp	r2, #32
 80008b2:	d005      	beq.n	80008c0 <__aeabi_dadd+0x6a0>
 80008b4:	2040      	movs	r0, #64	; 0x40
 80008b6:	1a82      	subs	r2, r0, r2
 80008b8:	4093      	lsls	r3, r2
 80008ba:	464a      	mov	r2, r9
 80008bc:	431a      	orrs	r2, r3
 80008be:	4691      	mov	r9, r2
 80008c0:	464d      	mov	r5, r9
 80008c2:	1e6b      	subs	r3, r5, #1
 80008c4:	419d      	sbcs	r5, r3
 80008c6:	4335      	orrs	r5, r6
 80008c8:	e621      	b.n	800050e <__aeabi_dadd+0x2ee>
 80008ca:	0002      	movs	r2, r0
 80008cc:	2300      	movs	r3, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	e540      	b.n	8000354 <__aeabi_dadd+0x134>
 80008d2:	464a      	mov	r2, r9
 80008d4:	19d5      	adds	r5, r2, r7
 80008d6:	42bd      	cmp	r5, r7
 80008d8:	4189      	sbcs	r1, r1
 80008da:	4463      	add	r3, ip
 80008dc:	4698      	mov	r8, r3
 80008de:	4249      	negs	r1, r1
 80008e0:	4488      	add	r8, r1
 80008e2:	e5b3      	b.n	800044c <__aeabi_dadd+0x22c>
 80008e4:	2100      	movs	r1, #0
 80008e6:	4a01      	ldr	r2, [pc, #4]	; (80008ec <__aeabi_dadd+0x6cc>)
 80008e8:	000b      	movs	r3, r1
 80008ea:	e533      	b.n	8000354 <__aeabi_dadd+0x134>
 80008ec:	000007ff 	.word	0x000007ff
 80008f0:	ff7fffff 	.word	0xff7fffff

080008f4 <__aeabi_ddiv>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4657      	mov	r7, sl
 80008f8:	464e      	mov	r6, r9
 80008fa:	4645      	mov	r5, r8
 80008fc:	46de      	mov	lr, fp
 80008fe:	b5e0      	push	{r5, r6, r7, lr}
 8000900:	4681      	mov	r9, r0
 8000902:	0005      	movs	r5, r0
 8000904:	030c      	lsls	r4, r1, #12
 8000906:	0048      	lsls	r0, r1, #1
 8000908:	4692      	mov	sl, r2
 800090a:	001f      	movs	r7, r3
 800090c:	b085      	sub	sp, #20
 800090e:	0b24      	lsrs	r4, r4, #12
 8000910:	0d40      	lsrs	r0, r0, #21
 8000912:	0fce      	lsrs	r6, r1, #31
 8000914:	2800      	cmp	r0, #0
 8000916:	d059      	beq.n	80009cc <__aeabi_ddiv+0xd8>
 8000918:	4b87      	ldr	r3, [pc, #540]	; (8000b38 <__aeabi_ddiv+0x244>)
 800091a:	4298      	cmp	r0, r3
 800091c:	d100      	bne.n	8000920 <__aeabi_ddiv+0x2c>
 800091e:	e098      	b.n	8000a52 <__aeabi_ddiv+0x15e>
 8000920:	0f6b      	lsrs	r3, r5, #29
 8000922:	00e4      	lsls	r4, r4, #3
 8000924:	431c      	orrs	r4, r3
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	041b      	lsls	r3, r3, #16
 800092a:	4323      	orrs	r3, r4
 800092c:	4698      	mov	r8, r3
 800092e:	4b83      	ldr	r3, [pc, #524]	; (8000b3c <__aeabi_ddiv+0x248>)
 8000930:	00ed      	lsls	r5, r5, #3
 8000932:	469b      	mov	fp, r3
 8000934:	2300      	movs	r3, #0
 8000936:	4699      	mov	r9, r3
 8000938:	4483      	add	fp, r0
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	033c      	lsls	r4, r7, #12
 800093e:	007b      	lsls	r3, r7, #1
 8000940:	4650      	mov	r0, sl
 8000942:	0b24      	lsrs	r4, r4, #12
 8000944:	0d5b      	lsrs	r3, r3, #21
 8000946:	0fff      	lsrs	r7, r7, #31
 8000948:	2b00      	cmp	r3, #0
 800094a:	d067      	beq.n	8000a1c <__aeabi_ddiv+0x128>
 800094c:	4a7a      	ldr	r2, [pc, #488]	; (8000b38 <__aeabi_ddiv+0x244>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x90>
 8000952:	497a      	ldr	r1, [pc, #488]	; (8000b3c <__aeabi_ddiv+0x248>)
 8000954:	0f42      	lsrs	r2, r0, #29
 8000956:	468c      	mov	ip, r1
 8000958:	00e4      	lsls	r4, r4, #3
 800095a:	4659      	mov	r1, fp
 800095c:	4314      	orrs	r4, r2
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	4463      	add	r3, ip
 8000962:	0412      	lsls	r2, r2, #16
 8000964:	1acb      	subs	r3, r1, r3
 8000966:	4314      	orrs	r4, r2
 8000968:	469b      	mov	fp, r3
 800096a:	00c2      	lsls	r2, r0, #3
 800096c:	2000      	movs	r0, #0
 800096e:	0033      	movs	r3, r6
 8000970:	407b      	eors	r3, r7
 8000972:	469a      	mov	sl, r3
 8000974:	464b      	mov	r3, r9
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d900      	bls.n	800097c <__aeabi_ddiv+0x88>
 800097a:	e0ef      	b.n	8000b5c <__aeabi_ddiv+0x268>
 800097c:	4970      	ldr	r1, [pc, #448]	; (8000b40 <__aeabi_ddiv+0x24c>)
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	58cb      	ldr	r3, [r1, r3]
 8000982:	469f      	mov	pc, r3
 8000984:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <__aeabi_ddiv+0x250>)
 8000986:	4652      	mov	r2, sl
 8000988:	469c      	mov	ip, r3
 800098a:	4322      	orrs	r2, r4
 800098c:	44e3      	add	fp, ip
 800098e:	2a00      	cmp	r2, #0
 8000990:	d000      	beq.n	8000994 <__aeabi_ddiv+0xa0>
 8000992:	e095      	b.n	8000ac0 <__aeabi_ddiv+0x1cc>
 8000994:	4649      	mov	r1, r9
 8000996:	2302      	movs	r3, #2
 8000998:	4319      	orrs	r1, r3
 800099a:	4689      	mov	r9, r1
 800099c:	2400      	movs	r4, #0
 800099e:	2002      	movs	r0, #2
 80009a0:	e7e5      	b.n	800096e <__aeabi_ddiv+0x7a>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2400      	movs	r4, #0
 80009a6:	2500      	movs	r5, #0
 80009a8:	4652      	mov	r2, sl
 80009aa:	051b      	lsls	r3, r3, #20
 80009ac:	4323      	orrs	r3, r4
 80009ae:	07d2      	lsls	r2, r2, #31
 80009b0:	4313      	orrs	r3, r2
 80009b2:	0028      	movs	r0, r5
 80009b4:	0019      	movs	r1, r3
 80009b6:	b005      	add	sp, #20
 80009b8:	bcf0      	pop	{r4, r5, r6, r7}
 80009ba:	46bb      	mov	fp, r7
 80009bc:	46b2      	mov	sl, r6
 80009be:	46a9      	mov	r9, r5
 80009c0:	46a0      	mov	r8, r4
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c4:	2400      	movs	r4, #0
 80009c6:	2500      	movs	r5, #0
 80009c8:	4b5b      	ldr	r3, [pc, #364]	; (8000b38 <__aeabi_ddiv+0x244>)
 80009ca:	e7ed      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 80009cc:	464b      	mov	r3, r9
 80009ce:	4323      	orrs	r3, r4
 80009d0:	4698      	mov	r8, r3
 80009d2:	d100      	bne.n	80009d6 <__aeabi_ddiv+0xe2>
 80009d4:	e089      	b.n	8000aea <__aeabi_ddiv+0x1f6>
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_ddiv+0xe8>
 80009da:	e1e0      	b.n	8000d9e <__aeabi_ddiv+0x4aa>
 80009dc:	0020      	movs	r0, r4
 80009de:	f000 fd8b 	bl	80014f8 <__clzsi2>
 80009e2:	0001      	movs	r1, r0
 80009e4:	0002      	movs	r2, r0
 80009e6:	390b      	subs	r1, #11
 80009e8:	231d      	movs	r3, #29
 80009ea:	1a5b      	subs	r3, r3, r1
 80009ec:	4649      	mov	r1, r9
 80009ee:	0010      	movs	r0, r2
 80009f0:	40d9      	lsrs	r1, r3
 80009f2:	3808      	subs	r0, #8
 80009f4:	4084      	lsls	r4, r0
 80009f6:	000b      	movs	r3, r1
 80009f8:	464d      	mov	r5, r9
 80009fa:	4323      	orrs	r3, r4
 80009fc:	4698      	mov	r8, r3
 80009fe:	4085      	lsls	r5, r0
 8000a00:	4851      	ldr	r0, [pc, #324]	; (8000b48 <__aeabi_ddiv+0x254>)
 8000a02:	033c      	lsls	r4, r7, #12
 8000a04:	1a83      	subs	r3, r0, r2
 8000a06:	469b      	mov	fp, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	007b      	lsls	r3, r7, #1
 8000a10:	4650      	mov	r0, sl
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	0d5b      	lsrs	r3, r3, #21
 8000a16:	0fff      	lsrs	r7, r7, #31
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d197      	bne.n	800094c <__aeabi_ddiv+0x58>
 8000a1c:	4652      	mov	r2, sl
 8000a1e:	4322      	orrs	r2, r4
 8000a20:	d055      	beq.n	8000ace <__aeabi_ddiv+0x1da>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_ddiv+0x134>
 8000a26:	e1ca      	b.n	8000dbe <__aeabi_ddiv+0x4ca>
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f000 fd65 	bl	80014f8 <__clzsi2>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	3a0b      	subs	r2, #11
 8000a32:	231d      	movs	r3, #29
 8000a34:	0001      	movs	r1, r0
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	4652      	mov	r2, sl
 8000a3a:	3908      	subs	r1, #8
 8000a3c:	40da      	lsrs	r2, r3
 8000a3e:	408c      	lsls	r4, r1
 8000a40:	4314      	orrs	r4, r2
 8000a42:	4652      	mov	r2, sl
 8000a44:	408a      	lsls	r2, r1
 8000a46:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <__aeabi_ddiv+0x258>)
 8000a48:	4458      	add	r0, fp
 8000a4a:	469b      	mov	fp, r3
 8000a4c:	4483      	add	fp, r0
 8000a4e:	2000      	movs	r0, #0
 8000a50:	e78d      	b.n	800096e <__aeabi_ddiv+0x7a>
 8000a52:	464b      	mov	r3, r9
 8000a54:	4323      	orrs	r3, r4
 8000a56:	4698      	mov	r8, r3
 8000a58:	d140      	bne.n	8000adc <__aeabi_ddiv+0x1e8>
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	3b06      	subs	r3, #6
 8000a60:	2500      	movs	r5, #0
 8000a62:	4683      	mov	fp, r0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	e769      	b.n	800093c <__aeabi_ddiv+0x48>
 8000a68:	46b2      	mov	sl, r6
 8000a6a:	9b00      	ldr	r3, [sp, #0]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d0a9      	beq.n	80009c4 <__aeabi_ddiv+0xd0>
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_ddiv+0x182>
 8000a74:	e211      	b.n	8000e9a <__aeabi_ddiv+0x5a6>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d093      	beq.n	80009a2 <__aeabi_ddiv+0xae>
 8000a7a:	4a35      	ldr	r2, [pc, #212]	; (8000b50 <__aeabi_ddiv+0x25c>)
 8000a7c:	445a      	add	r2, fp
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	dc00      	bgt.n	8000a84 <__aeabi_ddiv+0x190>
 8000a82:	e13c      	b.n	8000cfe <__aeabi_ddiv+0x40a>
 8000a84:	076b      	lsls	r3, r5, #29
 8000a86:	d000      	beq.n	8000a8a <__aeabi_ddiv+0x196>
 8000a88:	e1a7      	b.n	8000dda <__aeabi_ddiv+0x4e6>
 8000a8a:	08ed      	lsrs	r5, r5, #3
 8000a8c:	4643      	mov	r3, r8
 8000a8e:	01db      	lsls	r3, r3, #7
 8000a90:	d506      	bpl.n	8000aa0 <__aeabi_ddiv+0x1ac>
 8000a92:	4642      	mov	r2, r8
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <__aeabi_ddiv+0x260>)
 8000a96:	401a      	ands	r2, r3
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	445a      	add	r2, fp
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <__aeabi_ddiv+0x264>)
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	dc8e      	bgt.n	80009c4 <__aeabi_ddiv+0xd0>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	0552      	lsls	r2, r2, #21
 8000aaa:	0758      	lsls	r0, r3, #29
 8000aac:	025c      	lsls	r4, r3, #9
 8000aae:	4305      	orrs	r5, r0
 8000ab0:	0b24      	lsrs	r4, r4, #12
 8000ab2:	0d53      	lsrs	r3, r2, #21
 8000ab4:	e778      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000ab6:	46ba      	mov	sl, r7
 8000ab8:	46a0      	mov	r8, r4
 8000aba:	0015      	movs	r5, r2
 8000abc:	9000      	str	r0, [sp, #0]
 8000abe:	e7d4      	b.n	8000a6a <__aeabi_ddiv+0x176>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	2003      	movs	r0, #3
 8000aca:	4652      	mov	r2, sl
 8000acc:	e74f      	b.n	800096e <__aeabi_ddiv+0x7a>
 8000ace:	4649      	mov	r1, r9
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	4689      	mov	r9, r1
 8000ad6:	2400      	movs	r4, #0
 8000ad8:	2001      	movs	r0, #1
 8000ada:	e748      	b.n	800096e <__aeabi_ddiv+0x7a>
 8000adc:	230c      	movs	r3, #12
 8000ade:	4699      	mov	r9, r3
 8000ae0:	3b09      	subs	r3, #9
 8000ae2:	46a0      	mov	r8, r4
 8000ae4:	4683      	mov	fp, r0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	e728      	b.n	800093c <__aeabi_ddiv+0x48>
 8000aea:	2304      	movs	r3, #4
 8000aec:	4699      	mov	r9, r3
 8000aee:	2300      	movs	r3, #0
 8000af0:	469b      	mov	fp, r3
 8000af2:	3301      	adds	r3, #1
 8000af4:	2500      	movs	r5, #0
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	e720      	b.n	800093c <__aeabi_ddiv+0x48>
 8000afa:	2300      	movs	r3, #0
 8000afc:	2480      	movs	r4, #128	; 0x80
 8000afe:	469a      	mov	sl, r3
 8000b00:	2500      	movs	r5, #0
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <__aeabi_ddiv+0x244>)
 8000b04:	0324      	lsls	r4, r4, #12
 8000b06:	e74f      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	4641      	mov	r1, r8
 8000b0c:	031b      	lsls	r3, r3, #12
 8000b0e:	4219      	tst	r1, r3
 8000b10:	d008      	beq.n	8000b24 <__aeabi_ddiv+0x230>
 8000b12:	421c      	tst	r4, r3
 8000b14:	d106      	bne.n	8000b24 <__aeabi_ddiv+0x230>
 8000b16:	431c      	orrs	r4, r3
 8000b18:	0324      	lsls	r4, r4, #12
 8000b1a:	46ba      	mov	sl, r7
 8000b1c:	0015      	movs	r5, r2
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <__aeabi_ddiv+0x244>)
 8000b20:	0b24      	lsrs	r4, r4, #12
 8000b22:	e741      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000b24:	2480      	movs	r4, #128	; 0x80
 8000b26:	4643      	mov	r3, r8
 8000b28:	0324      	lsls	r4, r4, #12
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	0324      	lsls	r4, r4, #12
 8000b2e:	46b2      	mov	sl, r6
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <__aeabi_ddiv+0x244>)
 8000b32:	0b24      	lsrs	r4, r4, #12
 8000b34:	e738      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	000007ff 	.word	0x000007ff
 8000b3c:	fffffc01 	.word	0xfffffc01
 8000b40:	08006a64 	.word	0x08006a64
 8000b44:	fffff801 	.word	0xfffff801
 8000b48:	fffffc0d 	.word	0xfffffc0d
 8000b4c:	000003f3 	.word	0x000003f3
 8000b50:	000003ff 	.word	0x000003ff
 8000b54:	feffffff 	.word	0xfeffffff
 8000b58:	000007fe 	.word	0x000007fe
 8000b5c:	4544      	cmp	r4, r8
 8000b5e:	d200      	bcs.n	8000b62 <__aeabi_ddiv+0x26e>
 8000b60:	e116      	b.n	8000d90 <__aeabi_ddiv+0x49c>
 8000b62:	d100      	bne.n	8000b66 <__aeabi_ddiv+0x272>
 8000b64:	e111      	b.n	8000d8a <__aeabi_ddiv+0x496>
 8000b66:	2301      	movs	r3, #1
 8000b68:	425b      	negs	r3, r3
 8000b6a:	469c      	mov	ip, r3
 8000b6c:	002e      	movs	r6, r5
 8000b6e:	4640      	mov	r0, r8
 8000b70:	2500      	movs	r5, #0
 8000b72:	44e3      	add	fp, ip
 8000b74:	0223      	lsls	r3, r4, #8
 8000b76:	0e14      	lsrs	r4, r2, #24
 8000b78:	431c      	orrs	r4, r3
 8000b7a:	0c1b      	lsrs	r3, r3, #16
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	0423      	lsls	r3, r4, #16
 8000b80:	0c1f      	lsrs	r7, r3, #16
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	4649      	mov	r1, r9
 8000b86:	9200      	str	r2, [sp, #0]
 8000b88:	9701      	str	r7, [sp, #4]
 8000b8a:	f7ff fb43 	bl	8000214 <__aeabi_uidivmod>
 8000b8e:	0002      	movs	r2, r0
 8000b90:	437a      	muls	r2, r7
 8000b92:	040b      	lsls	r3, r1, #16
 8000b94:	0c31      	lsrs	r1, r6, #16
 8000b96:	4680      	mov	r8, r0
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	d90b      	bls.n	8000bb6 <__aeabi_ddiv+0x2c2>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	469c      	mov	ip, r3
 8000ba4:	1909      	adds	r1, r1, r4
 8000ba6:	44e0      	add	r8, ip
 8000ba8:	428c      	cmp	r4, r1
 8000baa:	d804      	bhi.n	8000bb6 <__aeabi_ddiv+0x2c2>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	d902      	bls.n	8000bb6 <__aeabi_ddiv+0x2c2>
 8000bb0:	1e83      	subs	r3, r0, #2
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	1909      	adds	r1, r1, r4
 8000bb6:	1a88      	subs	r0, r1, r2
 8000bb8:	4649      	mov	r1, r9
 8000bba:	f7ff fb2b 	bl	8000214 <__aeabi_uidivmod>
 8000bbe:	0409      	lsls	r1, r1, #16
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	0431      	lsls	r1, r6, #16
 8000bc4:	4666      	mov	r6, ip
 8000bc6:	9a01      	ldr	r2, [sp, #4]
 8000bc8:	0c09      	lsrs	r1, r1, #16
 8000bca:	4342      	muls	r2, r0
 8000bcc:	0003      	movs	r3, r0
 8000bce:	4331      	orrs	r1, r6
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	d904      	bls.n	8000bde <__aeabi_ddiv+0x2ea>
 8000bd4:	1909      	adds	r1, r1, r4
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	428c      	cmp	r4, r1
 8000bda:	d800      	bhi.n	8000bde <__aeabi_ddiv+0x2ea>
 8000bdc:	e111      	b.n	8000e02 <__aeabi_ddiv+0x50e>
 8000bde:	1a89      	subs	r1, r1, r2
 8000be0:	4642      	mov	r2, r8
 8000be2:	9e00      	ldr	r6, [sp, #0]
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	431a      	orrs	r2, r3
 8000be8:	0c33      	lsrs	r3, r6, #16
 8000bea:	001f      	movs	r7, r3
 8000bec:	0c10      	lsrs	r0, r2, #16
 8000bee:	4690      	mov	r8, r2
 8000bf0:	9302      	str	r3, [sp, #8]
 8000bf2:	0413      	lsls	r3, r2, #16
 8000bf4:	0432      	lsls	r2, r6, #16
 8000bf6:	0c16      	lsrs	r6, r2, #16
 8000bf8:	0032      	movs	r2, r6
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	435a      	muls	r2, r3
 8000bfe:	9603      	str	r6, [sp, #12]
 8000c00:	437b      	muls	r3, r7
 8000c02:	4346      	muls	r6, r0
 8000c04:	4378      	muls	r0, r7
 8000c06:	0c17      	lsrs	r7, r2, #16
 8000c08:	46bc      	mov	ip, r7
 8000c0a:	199b      	adds	r3, r3, r6
 8000c0c:	4463      	add	r3, ip
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d903      	bls.n	8000c1a <__aeabi_ddiv+0x326>
 8000c12:	2680      	movs	r6, #128	; 0x80
 8000c14:	0276      	lsls	r6, r6, #9
 8000c16:	46b4      	mov	ip, r6
 8000c18:	4460      	add	r0, ip
 8000c1a:	0c1e      	lsrs	r6, r3, #16
 8000c1c:	1830      	adds	r0, r6, r0
 8000c1e:	0416      	lsls	r6, r2, #16
 8000c20:	041b      	lsls	r3, r3, #16
 8000c22:	0c36      	lsrs	r6, r6, #16
 8000c24:	199e      	adds	r6, r3, r6
 8000c26:	4281      	cmp	r1, r0
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_ddiv+0x338>
 8000c2a:	e09c      	b.n	8000d66 <__aeabi_ddiv+0x472>
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_ddiv+0x33c>
 8000c2e:	e097      	b.n	8000d60 <__aeabi_ddiv+0x46c>
 8000c30:	1bae      	subs	r6, r5, r6
 8000c32:	1a09      	subs	r1, r1, r0
 8000c34:	42b5      	cmp	r5, r6
 8000c36:	4180      	sbcs	r0, r0
 8000c38:	4240      	negs	r0, r0
 8000c3a:	1a08      	subs	r0, r1, r0
 8000c3c:	4284      	cmp	r4, r0
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0x34e>
 8000c40:	e111      	b.n	8000e66 <__aeabi_ddiv+0x572>
 8000c42:	4649      	mov	r1, r9
 8000c44:	f7ff fae6 	bl	8000214 <__aeabi_uidivmod>
 8000c48:	9a01      	ldr	r2, [sp, #4]
 8000c4a:	040b      	lsls	r3, r1, #16
 8000c4c:	4342      	muls	r2, r0
 8000c4e:	0c31      	lsrs	r1, r6, #16
 8000c50:	0005      	movs	r5, r0
 8000c52:	4319      	orrs	r1, r3
 8000c54:	428a      	cmp	r2, r1
 8000c56:	d907      	bls.n	8000c68 <__aeabi_ddiv+0x374>
 8000c58:	1909      	adds	r1, r1, r4
 8000c5a:	3d01      	subs	r5, #1
 8000c5c:	428c      	cmp	r4, r1
 8000c5e:	d803      	bhi.n	8000c68 <__aeabi_ddiv+0x374>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d901      	bls.n	8000c68 <__aeabi_ddiv+0x374>
 8000c64:	1e85      	subs	r5, r0, #2
 8000c66:	1909      	adds	r1, r1, r4
 8000c68:	1a88      	subs	r0, r1, r2
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	f7ff fad2 	bl	8000214 <__aeabi_uidivmod>
 8000c70:	0409      	lsls	r1, r1, #16
 8000c72:	468c      	mov	ip, r1
 8000c74:	0431      	lsls	r1, r6, #16
 8000c76:	4666      	mov	r6, ip
 8000c78:	9a01      	ldr	r2, [sp, #4]
 8000c7a:	0c09      	lsrs	r1, r1, #16
 8000c7c:	4342      	muls	r2, r0
 8000c7e:	0003      	movs	r3, r0
 8000c80:	4331      	orrs	r1, r6
 8000c82:	428a      	cmp	r2, r1
 8000c84:	d907      	bls.n	8000c96 <__aeabi_ddiv+0x3a2>
 8000c86:	1909      	adds	r1, r1, r4
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	428c      	cmp	r4, r1
 8000c8c:	d803      	bhi.n	8000c96 <__aeabi_ddiv+0x3a2>
 8000c8e:	428a      	cmp	r2, r1
 8000c90:	d901      	bls.n	8000c96 <__aeabi_ddiv+0x3a2>
 8000c92:	1e83      	subs	r3, r0, #2
 8000c94:	1909      	adds	r1, r1, r4
 8000c96:	9e03      	ldr	r6, [sp, #12]
 8000c98:	1a89      	subs	r1, r1, r2
 8000c9a:	0032      	movs	r2, r6
 8000c9c:	042d      	lsls	r5, r5, #16
 8000c9e:	431d      	orrs	r5, r3
 8000ca0:	9f02      	ldr	r7, [sp, #8]
 8000ca2:	042b      	lsls	r3, r5, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	435a      	muls	r2, r3
 8000ca8:	437b      	muls	r3, r7
 8000caa:	469c      	mov	ip, r3
 8000cac:	0c28      	lsrs	r0, r5, #16
 8000cae:	4346      	muls	r6, r0
 8000cb0:	0c13      	lsrs	r3, r2, #16
 8000cb2:	44b4      	add	ip, r6
 8000cb4:	4463      	add	r3, ip
 8000cb6:	4378      	muls	r0, r7
 8000cb8:	429e      	cmp	r6, r3
 8000cba:	d903      	bls.n	8000cc4 <__aeabi_ddiv+0x3d0>
 8000cbc:	2680      	movs	r6, #128	; 0x80
 8000cbe:	0276      	lsls	r6, r6, #9
 8000cc0:	46b4      	mov	ip, r6
 8000cc2:	4460      	add	r0, ip
 8000cc4:	0c1e      	lsrs	r6, r3, #16
 8000cc6:	0412      	lsls	r2, r2, #16
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	0c12      	lsrs	r2, r2, #16
 8000ccc:	1830      	adds	r0, r6, r0
 8000cce:	189b      	adds	r3, r3, r2
 8000cd0:	4281      	cmp	r1, r0
 8000cd2:	d306      	bcc.n	8000ce2 <__aeabi_ddiv+0x3ee>
 8000cd4:	d002      	beq.n	8000cdc <__aeabi_ddiv+0x3e8>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	431d      	orrs	r5, r3
 8000cda:	e6ce      	b.n	8000a7a <__aeabi_ddiv+0x186>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_ddiv+0x3ee>
 8000ce0:	e6cb      	b.n	8000a7a <__aeabi_ddiv+0x186>
 8000ce2:	1861      	adds	r1, r4, r1
 8000ce4:	1e6e      	subs	r6, r5, #1
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	d200      	bcs.n	8000cec <__aeabi_ddiv+0x3f8>
 8000cea:	e0a4      	b.n	8000e36 <__aeabi_ddiv+0x542>
 8000cec:	4281      	cmp	r1, r0
 8000cee:	d200      	bcs.n	8000cf2 <__aeabi_ddiv+0x3fe>
 8000cf0:	e0c9      	b.n	8000e86 <__aeabi_ddiv+0x592>
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0x402>
 8000cf4:	e0d9      	b.n	8000eaa <__aeabi_ddiv+0x5b6>
 8000cf6:	0035      	movs	r5, r6
 8000cf8:	e7ed      	b.n	8000cd6 <__aeabi_ddiv+0x3e2>
 8000cfa:	2501      	movs	r5, #1
 8000cfc:	426d      	negs	r5, r5
 8000cfe:	2101      	movs	r1, #1
 8000d00:	1a89      	subs	r1, r1, r2
 8000d02:	2938      	cmp	r1, #56	; 0x38
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_ddiv+0x414>
 8000d06:	e64c      	b.n	80009a2 <__aeabi_ddiv+0xae>
 8000d08:	291f      	cmp	r1, #31
 8000d0a:	dc00      	bgt.n	8000d0e <__aeabi_ddiv+0x41a>
 8000d0c:	e07f      	b.n	8000e0e <__aeabi_ddiv+0x51a>
 8000d0e:	231f      	movs	r3, #31
 8000d10:	425b      	negs	r3, r3
 8000d12:	1a9a      	subs	r2, r3, r2
 8000d14:	4643      	mov	r3, r8
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2920      	cmp	r1, #32
 8000d1a:	d004      	beq.n	8000d26 <__aeabi_ddiv+0x432>
 8000d1c:	4644      	mov	r4, r8
 8000d1e:	4a65      	ldr	r2, [pc, #404]	; (8000eb4 <__aeabi_ddiv+0x5c0>)
 8000d20:	445a      	add	r2, fp
 8000d22:	4094      	lsls	r4, r2
 8000d24:	4325      	orrs	r5, r4
 8000d26:	1e6a      	subs	r2, r5, #1
 8000d28:	4195      	sbcs	r5, r2
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	432b      	orrs	r3, r5
 8000d2e:	0015      	movs	r5, r2
 8000d30:	2400      	movs	r4, #0
 8000d32:	401d      	ands	r5, r3
 8000d34:	421a      	tst	r2, r3
 8000d36:	d100      	bne.n	8000d3a <__aeabi_ddiv+0x446>
 8000d38:	e0a1      	b.n	8000e7e <__aeabi_ddiv+0x58a>
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	401a      	ands	r2, r3
 8000d40:	2a04      	cmp	r2, #4
 8000d42:	d100      	bne.n	8000d46 <__aeabi_ddiv+0x452>
 8000d44:	e098      	b.n	8000e78 <__aeabi_ddiv+0x584>
 8000d46:	1d1a      	adds	r2, r3, #4
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	419b      	sbcs	r3, r3
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	18e4      	adds	r4, r4, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	0222      	lsls	r2, r4, #8
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_ddiv+0x464>
 8000d56:	e08f      	b.n	8000e78 <__aeabi_ddiv+0x584>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	e623      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000d60:	42b5      	cmp	r5, r6
 8000d62:	d300      	bcc.n	8000d66 <__aeabi_ddiv+0x472>
 8000d64:	e764      	b.n	8000c30 <__aeabi_ddiv+0x33c>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	9b00      	ldr	r3, [sp, #0]
 8000d6c:	469c      	mov	ip, r3
 8000d6e:	4465      	add	r5, ip
 8000d70:	001f      	movs	r7, r3
 8000d72:	429d      	cmp	r5, r3
 8000d74:	419b      	sbcs	r3, r3
 8000d76:	425b      	negs	r3, r3
 8000d78:	191b      	adds	r3, r3, r4
 8000d7a:	18c9      	adds	r1, r1, r3
 8000d7c:	428c      	cmp	r4, r1
 8000d7e:	d23a      	bcs.n	8000df6 <__aeabi_ddiv+0x502>
 8000d80:	4288      	cmp	r0, r1
 8000d82:	d863      	bhi.n	8000e4c <__aeabi_ddiv+0x558>
 8000d84:	d060      	beq.n	8000e48 <__aeabi_ddiv+0x554>
 8000d86:	4690      	mov	r8, r2
 8000d88:	e752      	b.n	8000c30 <__aeabi_ddiv+0x33c>
 8000d8a:	42aa      	cmp	r2, r5
 8000d8c:	d900      	bls.n	8000d90 <__aeabi_ddiv+0x49c>
 8000d8e:	e6ea      	b.n	8000b66 <__aeabi_ddiv+0x272>
 8000d90:	4643      	mov	r3, r8
 8000d92:	07de      	lsls	r6, r3, #31
 8000d94:	0858      	lsrs	r0, r3, #1
 8000d96:	086b      	lsrs	r3, r5, #1
 8000d98:	431e      	orrs	r6, r3
 8000d9a:	07ed      	lsls	r5, r5, #31
 8000d9c:	e6ea      	b.n	8000b74 <__aeabi_ddiv+0x280>
 8000d9e:	4648      	mov	r0, r9
 8000da0:	f000 fbaa 	bl	80014f8 <__clzsi2>
 8000da4:	0001      	movs	r1, r0
 8000da6:	0002      	movs	r2, r0
 8000da8:	3115      	adds	r1, #21
 8000daa:	3220      	adds	r2, #32
 8000dac:	291c      	cmp	r1, #28
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_ddiv+0x4be>
 8000db0:	e61a      	b.n	80009e8 <__aeabi_ddiv+0xf4>
 8000db2:	464b      	mov	r3, r9
 8000db4:	3808      	subs	r0, #8
 8000db6:	4083      	lsls	r3, r0
 8000db8:	2500      	movs	r5, #0
 8000dba:	4698      	mov	r8, r3
 8000dbc:	e620      	b.n	8000a00 <__aeabi_ddiv+0x10c>
 8000dbe:	f000 fb9b 	bl	80014f8 <__clzsi2>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	3215      	adds	r2, #21
 8000dc8:	3020      	adds	r0, #32
 8000dca:	2a1c      	cmp	r2, #28
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_ddiv+0x4dc>
 8000dce:	e630      	b.n	8000a32 <__aeabi_ddiv+0x13e>
 8000dd0:	4654      	mov	r4, sl
 8000dd2:	3b08      	subs	r3, #8
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	409c      	lsls	r4, r3
 8000dd8:	e635      	b.n	8000a46 <__aeabi_ddiv+0x152>
 8000dda:	230f      	movs	r3, #15
 8000ddc:	402b      	ands	r3, r5
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x4f0>
 8000de2:	e652      	b.n	8000a8a <__aeabi_ddiv+0x196>
 8000de4:	2305      	movs	r3, #5
 8000de6:	425b      	negs	r3, r3
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	419b      	sbcs	r3, r3
 8000dec:	3504      	adds	r5, #4
 8000dee:	425b      	negs	r3, r3
 8000df0:	08ed      	lsrs	r5, r5, #3
 8000df2:	4498      	add	r8, r3
 8000df4:	e64a      	b.n	8000a8c <__aeabi_ddiv+0x198>
 8000df6:	428c      	cmp	r4, r1
 8000df8:	d1c5      	bne.n	8000d86 <__aeabi_ddiv+0x492>
 8000dfa:	42af      	cmp	r7, r5
 8000dfc:	d9c0      	bls.n	8000d80 <__aeabi_ddiv+0x48c>
 8000dfe:	4690      	mov	r8, r2
 8000e00:	e716      	b.n	8000c30 <__aeabi_ddiv+0x33c>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	d800      	bhi.n	8000e08 <__aeabi_ddiv+0x514>
 8000e06:	e6ea      	b.n	8000bde <__aeabi_ddiv+0x2ea>
 8000e08:	1e83      	subs	r3, r0, #2
 8000e0a:	1909      	adds	r1, r1, r4
 8000e0c:	e6e7      	b.n	8000bde <__aeabi_ddiv+0x2ea>
 8000e0e:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <__aeabi_ddiv+0x5c4>)
 8000e10:	0028      	movs	r0, r5
 8000e12:	445a      	add	r2, fp
 8000e14:	4643      	mov	r3, r8
 8000e16:	4095      	lsls	r5, r2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	40c8      	lsrs	r0, r1
 8000e1c:	1e6a      	subs	r2, r5, #1
 8000e1e:	4195      	sbcs	r5, r2
 8000e20:	4644      	mov	r4, r8
 8000e22:	4303      	orrs	r3, r0
 8000e24:	432b      	orrs	r3, r5
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	d092      	beq.n	8000d52 <__aeabi_ddiv+0x45e>
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2a04      	cmp	r2, #4
 8000e32:	d188      	bne.n	8000d46 <__aeabi_ddiv+0x452>
 8000e34:	e78d      	b.n	8000d52 <__aeabi_ddiv+0x45e>
 8000e36:	0035      	movs	r5, r6
 8000e38:	4281      	cmp	r1, r0
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_ddiv+0x54a>
 8000e3c:	e74b      	b.n	8000cd6 <__aeabi_ddiv+0x3e2>
 8000e3e:	9a00      	ldr	r2, [sp, #0]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d000      	beq.n	8000e46 <__aeabi_ddiv+0x552>
 8000e44:	e747      	b.n	8000cd6 <__aeabi_ddiv+0x3e2>
 8000e46:	e618      	b.n	8000a7a <__aeabi_ddiv+0x186>
 8000e48:	42ae      	cmp	r6, r5
 8000e4a:	d99c      	bls.n	8000d86 <__aeabi_ddiv+0x492>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	425b      	negs	r3, r3
 8000e50:	469c      	mov	ip, r3
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	44e0      	add	r8, ip
 8000e56:	469c      	mov	ip, r3
 8000e58:	4465      	add	r5, ip
 8000e5a:	429d      	cmp	r5, r3
 8000e5c:	419b      	sbcs	r3, r3
 8000e5e:	425b      	negs	r3, r3
 8000e60:	191b      	adds	r3, r3, r4
 8000e62:	18c9      	adds	r1, r1, r3
 8000e64:	e6e4      	b.n	8000c30 <__aeabi_ddiv+0x33c>
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <__aeabi_ddiv+0x5c8>)
 8000e68:	445a      	add	r2, fp
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_ddiv+0x57c>
 8000e6e:	e744      	b.n	8000cfa <__aeabi_ddiv+0x406>
 8000e70:	2301      	movs	r3, #1
 8000e72:	2500      	movs	r5, #0
 8000e74:	4498      	add	r8, r3
 8000e76:	e609      	b.n	8000a8c <__aeabi_ddiv+0x198>
 8000e78:	0765      	lsls	r5, r4, #29
 8000e7a:	0264      	lsls	r4, r4, #9
 8000e7c:	0b24      	lsrs	r4, r4, #12
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	431d      	orrs	r5, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	e590      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000e86:	9e00      	ldr	r6, [sp, #0]
 8000e88:	3d02      	subs	r5, #2
 8000e8a:	0072      	lsls	r2, r6, #1
 8000e8c:	42b2      	cmp	r2, r6
 8000e8e:	41bf      	sbcs	r7, r7
 8000e90:	427f      	negs	r7, r7
 8000e92:	193c      	adds	r4, r7, r4
 8000e94:	1909      	adds	r1, r1, r4
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	e7ce      	b.n	8000e38 <__aeabi_ddiv+0x544>
 8000e9a:	2480      	movs	r4, #128	; 0x80
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	0324      	lsls	r4, r4, #12
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	0324      	lsls	r4, r4, #12
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <__aeabi_ddiv+0x5cc>)
 8000ea6:	0b24      	lsrs	r4, r4, #12
 8000ea8:	e57e      	b.n	80009a8 <__aeabi_ddiv+0xb4>
 8000eaa:	9a00      	ldr	r2, [sp, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3ea      	bcc.n	8000e86 <__aeabi_ddiv+0x592>
 8000eb0:	0035      	movs	r5, r6
 8000eb2:	e7c4      	b.n	8000e3e <__aeabi_ddiv+0x54a>
 8000eb4:	0000043e 	.word	0x0000043e
 8000eb8:	0000041e 	.word	0x0000041e
 8000ebc:	000003ff 	.word	0x000003ff
 8000ec0:	000007ff 	.word	0x000007ff

08000ec4 <__aeabi_dmul>:
 8000ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec6:	4657      	mov	r7, sl
 8000ec8:	464e      	mov	r6, r9
 8000eca:	4645      	mov	r5, r8
 8000ecc:	46de      	mov	lr, fp
 8000ece:	b5e0      	push	{r5, r6, r7, lr}
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	030c      	lsls	r4, r1, #12
 8000ed4:	004b      	lsls	r3, r1, #1
 8000ed6:	0006      	movs	r6, r0
 8000ed8:	4692      	mov	sl, r2
 8000eda:	b087      	sub	sp, #28
 8000edc:	0b24      	lsrs	r4, r4, #12
 8000ede:	0d5b      	lsrs	r3, r3, #21
 8000ee0:	0fcf      	lsrs	r7, r1, #31
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d06c      	beq.n	8000fc0 <__aeabi_dmul+0xfc>
 8000ee6:	4add      	ldr	r2, [pc, #884]	; (800125c <__aeabi_dmul+0x398>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d100      	bne.n	8000eee <__aeabi_dmul+0x2a>
 8000eec:	e086      	b.n	8000ffc <__aeabi_dmul+0x138>
 8000eee:	0f42      	lsrs	r2, r0, #29
 8000ef0:	00e4      	lsls	r4, r4, #3
 8000ef2:	4314      	orrs	r4, r2
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	0412      	lsls	r2, r2, #16
 8000ef8:	4314      	orrs	r4, r2
 8000efa:	4ad9      	ldr	r2, [pc, #868]	; (8001260 <__aeabi_dmul+0x39c>)
 8000efc:	00c5      	lsls	r5, r0, #3
 8000efe:	4694      	mov	ip, r2
 8000f00:	4463      	add	r3, ip
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	4699      	mov	r9, r3
 8000f08:	469b      	mov	fp, r3
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	4642      	mov	r2, r8
 8000f0e:	031e      	lsls	r6, r3, #12
 8000f10:	0fd2      	lsrs	r2, r2, #31
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4650      	mov	r0, sl
 8000f16:	4690      	mov	r8, r2
 8000f18:	0b36      	lsrs	r6, r6, #12
 8000f1a:	0d5b      	lsrs	r3, r3, #21
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dmul+0x5c>
 8000f1e:	e078      	b.n	8001012 <__aeabi_dmul+0x14e>
 8000f20:	4ace      	ldr	r2, [pc, #824]	; (800125c <__aeabi_dmul+0x398>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01d      	beq.n	8000f62 <__aeabi_dmul+0x9e>
 8000f26:	49ce      	ldr	r1, [pc, #824]	; (8001260 <__aeabi_dmul+0x39c>)
 8000f28:	0f42      	lsrs	r2, r0, #29
 8000f2a:	468c      	mov	ip, r1
 8000f2c:	9900      	ldr	r1, [sp, #0]
 8000f2e:	4463      	add	r3, ip
 8000f30:	00f6      	lsls	r6, r6, #3
 8000f32:	468c      	mov	ip, r1
 8000f34:	4316      	orrs	r6, r2
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	449c      	add	ip, r3
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	4316      	orrs	r6, r2
 8000f40:	00c2      	lsls	r2, r0, #3
 8000f42:	2000      	movs	r0, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	4643      	mov	r3, r8
 8000f4a:	3101      	adds	r1, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	4649      	mov	r1, r9
 8000f50:	407b      	eors	r3, r7
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	290f      	cmp	r1, #15
 8000f56:	d900      	bls.n	8000f5a <__aeabi_dmul+0x96>
 8000f58:	e07e      	b.n	8001058 <__aeabi_dmul+0x194>
 8000f5a:	4bc2      	ldr	r3, [pc, #776]	; (8001264 <__aeabi_dmul+0x3a0>)
 8000f5c:	0089      	lsls	r1, r1, #2
 8000f5e:	5859      	ldr	r1, [r3, r1]
 8000f60:	468f      	mov	pc, r1
 8000f62:	4652      	mov	r2, sl
 8000f64:	9b00      	ldr	r3, [sp, #0]
 8000f66:	4332      	orrs	r2, r6
 8000f68:	d000      	beq.n	8000f6c <__aeabi_dmul+0xa8>
 8000f6a:	e156      	b.n	800121a <__aeabi_dmul+0x356>
 8000f6c:	49bb      	ldr	r1, [pc, #748]	; (800125c <__aeabi_dmul+0x398>)
 8000f6e:	2600      	movs	r6, #0
 8000f70:	468c      	mov	ip, r1
 8000f72:	4463      	add	r3, ip
 8000f74:	4649      	mov	r1, r9
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	4689      	mov	r9, r1
 8000f7e:	2002      	movs	r0, #2
 8000f80:	e7e1      	b.n	8000f46 <__aeabi_dmul+0x82>
 8000f82:	4643      	mov	r3, r8
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	0034      	movs	r4, r6
 8000f88:	0015      	movs	r5, r2
 8000f8a:	4683      	mov	fp, r0
 8000f8c:	465b      	mov	r3, fp
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d05e      	beq.n	8001050 <__aeabi_dmul+0x18c>
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dmul+0xd4>
 8000f96:	e1f3      	b.n	8001380 <__aeabi_dmul+0x4bc>
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dmul+0xda>
 8000f9c:	e118      	b.n	80011d0 <__aeabi_dmul+0x30c>
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	9b01      	ldr	r3, [sp, #4]
 8000fa6:	0512      	lsls	r2, r2, #20
 8000fa8:	4322      	orrs	r2, r4
 8000faa:	07db      	lsls	r3, r3, #31
 8000fac:	431a      	orrs	r2, r3
 8000fae:	0028      	movs	r0, r5
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	b007      	add	sp, #28
 8000fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8000fb6:	46bb      	mov	fp, r7
 8000fb8:	46b2      	mov	sl, r6
 8000fba:	46a9      	mov	r9, r5
 8000fbc:	46a0      	mov	r8, r4
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc0:	0025      	movs	r5, r4
 8000fc2:	4305      	orrs	r5, r0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dmul+0x104>
 8000fc6:	e141      	b.n	800124c <__aeabi_dmul+0x388>
 8000fc8:	2c00      	cmp	r4, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_dmul+0x10a>
 8000fcc:	e1ad      	b.n	800132a <__aeabi_dmul+0x466>
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f000 fa92 	bl	80014f8 <__clzsi2>
 8000fd4:	0001      	movs	r1, r0
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	390b      	subs	r1, #11
 8000fda:	231d      	movs	r3, #29
 8000fdc:	0010      	movs	r0, r2
 8000fde:	1a5b      	subs	r3, r3, r1
 8000fe0:	0031      	movs	r1, r6
 8000fe2:	0035      	movs	r5, r6
 8000fe4:	3808      	subs	r0, #8
 8000fe6:	4084      	lsls	r4, r0
 8000fe8:	40d9      	lsrs	r1, r3
 8000fea:	4085      	lsls	r5, r0
 8000fec:	430c      	orrs	r4, r1
 8000fee:	489e      	ldr	r0, [pc, #632]	; (8001268 <__aeabi_dmul+0x3a4>)
 8000ff0:	1a83      	subs	r3, r0, r2
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4699      	mov	r9, r3
 8000ff8:	469b      	mov	fp, r3
 8000ffa:	e786      	b.n	8000f0a <__aeabi_dmul+0x46>
 8000ffc:	0005      	movs	r5, r0
 8000ffe:	4325      	orrs	r5, r4
 8001000:	d000      	beq.n	8001004 <__aeabi_dmul+0x140>
 8001002:	e11c      	b.n	800123e <__aeabi_dmul+0x37a>
 8001004:	2208      	movs	r2, #8
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	2400      	movs	r4, #0
 800100c:	4691      	mov	r9, r2
 800100e:	469b      	mov	fp, r3
 8001010:	e77b      	b.n	8000f0a <__aeabi_dmul+0x46>
 8001012:	4652      	mov	r2, sl
 8001014:	4332      	orrs	r2, r6
 8001016:	d100      	bne.n	800101a <__aeabi_dmul+0x156>
 8001018:	e10a      	b.n	8001230 <__aeabi_dmul+0x36c>
 800101a:	2e00      	cmp	r6, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_dmul+0x15c>
 800101e:	e176      	b.n	800130e <__aeabi_dmul+0x44a>
 8001020:	0030      	movs	r0, r6
 8001022:	f000 fa69 	bl	80014f8 <__clzsi2>
 8001026:	0002      	movs	r2, r0
 8001028:	3a0b      	subs	r2, #11
 800102a:	231d      	movs	r3, #29
 800102c:	0001      	movs	r1, r0
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	4652      	mov	r2, sl
 8001032:	3908      	subs	r1, #8
 8001034:	40da      	lsrs	r2, r3
 8001036:	408e      	lsls	r6, r1
 8001038:	4316      	orrs	r6, r2
 800103a:	4652      	mov	r2, sl
 800103c:	408a      	lsls	r2, r1
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	4989      	ldr	r1, [pc, #548]	; (8001268 <__aeabi_dmul+0x3a4>)
 8001042:	1a18      	subs	r0, r3, r0
 8001044:	0003      	movs	r3, r0
 8001046:	468c      	mov	ip, r1
 8001048:	4463      	add	r3, ip
 800104a:	2000      	movs	r0, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	e77a      	b.n	8000f46 <__aeabi_dmul+0x82>
 8001050:	2400      	movs	r4, #0
 8001052:	2500      	movs	r5, #0
 8001054:	4a81      	ldr	r2, [pc, #516]	; (800125c <__aeabi_dmul+0x398>)
 8001056:	e7a5      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 8001058:	0c2f      	lsrs	r7, r5, #16
 800105a:	042d      	lsls	r5, r5, #16
 800105c:	0c2d      	lsrs	r5, r5, #16
 800105e:	002b      	movs	r3, r5
 8001060:	0c11      	lsrs	r1, r2, #16
 8001062:	0412      	lsls	r2, r2, #16
 8001064:	0c12      	lsrs	r2, r2, #16
 8001066:	4353      	muls	r3, r2
 8001068:	4698      	mov	r8, r3
 800106a:	0013      	movs	r3, r2
 800106c:	0028      	movs	r0, r5
 800106e:	437b      	muls	r3, r7
 8001070:	4699      	mov	r9, r3
 8001072:	4348      	muls	r0, r1
 8001074:	4448      	add	r0, r9
 8001076:	4683      	mov	fp, r0
 8001078:	4640      	mov	r0, r8
 800107a:	000b      	movs	r3, r1
 800107c:	0c00      	lsrs	r0, r0, #16
 800107e:	4682      	mov	sl, r0
 8001080:	4658      	mov	r0, fp
 8001082:	437b      	muls	r3, r7
 8001084:	4450      	add	r0, sl
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	4581      	cmp	r9, r0
 800108a:	d906      	bls.n	800109a <__aeabi_dmul+0x1d6>
 800108c:	469a      	mov	sl, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	025b      	lsls	r3, r3, #9
 8001092:	4699      	mov	r9, r3
 8001094:	44ca      	add	sl, r9
 8001096:	4653      	mov	r3, sl
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	0c03      	lsrs	r3, r0, #16
 800109c:	469b      	mov	fp, r3
 800109e:	4643      	mov	r3, r8
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	0400      	lsls	r0, r0, #16
 80010a4:	0c1b      	lsrs	r3, r3, #16
 80010a6:	4698      	mov	r8, r3
 80010a8:	0003      	movs	r3, r0
 80010aa:	4443      	add	r3, r8
 80010ac:	9304      	str	r3, [sp, #16]
 80010ae:	0c33      	lsrs	r3, r6, #16
 80010b0:	4699      	mov	r9, r3
 80010b2:	002b      	movs	r3, r5
 80010b4:	0436      	lsls	r6, r6, #16
 80010b6:	0c36      	lsrs	r6, r6, #16
 80010b8:	4373      	muls	r3, r6
 80010ba:	4698      	mov	r8, r3
 80010bc:	0033      	movs	r3, r6
 80010be:	437b      	muls	r3, r7
 80010c0:	469a      	mov	sl, r3
 80010c2:	464b      	mov	r3, r9
 80010c4:	435d      	muls	r5, r3
 80010c6:	435f      	muls	r7, r3
 80010c8:	4643      	mov	r3, r8
 80010ca:	4455      	add	r5, sl
 80010cc:	0c18      	lsrs	r0, r3, #16
 80010ce:	1940      	adds	r0, r0, r5
 80010d0:	4582      	cmp	sl, r0
 80010d2:	d903      	bls.n	80010dc <__aeabi_dmul+0x218>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	025b      	lsls	r3, r3, #9
 80010d8:	469a      	mov	sl, r3
 80010da:	4457      	add	r7, sl
 80010dc:	0c05      	lsrs	r5, r0, #16
 80010de:	19eb      	adds	r3, r5, r7
 80010e0:	9305      	str	r3, [sp, #20]
 80010e2:	4643      	mov	r3, r8
 80010e4:	041d      	lsls	r5, r3, #16
 80010e6:	0c2d      	lsrs	r5, r5, #16
 80010e8:	0400      	lsls	r0, r0, #16
 80010ea:	1940      	adds	r0, r0, r5
 80010ec:	0c25      	lsrs	r5, r4, #16
 80010ee:	0424      	lsls	r4, r4, #16
 80010f0:	0c24      	lsrs	r4, r4, #16
 80010f2:	0027      	movs	r7, r4
 80010f4:	4357      	muls	r7, r2
 80010f6:	436a      	muls	r2, r5
 80010f8:	4690      	mov	r8, r2
 80010fa:	002a      	movs	r2, r5
 80010fc:	0c3b      	lsrs	r3, r7, #16
 80010fe:	469a      	mov	sl, r3
 8001100:	434a      	muls	r2, r1
 8001102:	4361      	muls	r1, r4
 8001104:	4441      	add	r1, r8
 8001106:	4451      	add	r1, sl
 8001108:	4483      	add	fp, r0
 800110a:	4588      	cmp	r8, r1
 800110c:	d903      	bls.n	8001116 <__aeabi_dmul+0x252>
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	4698      	mov	r8, r3
 8001114:	4442      	add	r2, r8
 8001116:	043f      	lsls	r7, r7, #16
 8001118:	0c0b      	lsrs	r3, r1, #16
 800111a:	0c3f      	lsrs	r7, r7, #16
 800111c:	0409      	lsls	r1, r1, #16
 800111e:	19c9      	adds	r1, r1, r7
 8001120:	0027      	movs	r7, r4
 8001122:	4698      	mov	r8, r3
 8001124:	464b      	mov	r3, r9
 8001126:	4377      	muls	r7, r6
 8001128:	435c      	muls	r4, r3
 800112a:	436e      	muls	r6, r5
 800112c:	435d      	muls	r5, r3
 800112e:	0c3b      	lsrs	r3, r7, #16
 8001130:	4699      	mov	r9, r3
 8001132:	19a4      	adds	r4, r4, r6
 8001134:	444c      	add	r4, r9
 8001136:	4442      	add	r2, r8
 8001138:	9503      	str	r5, [sp, #12]
 800113a:	42a6      	cmp	r6, r4
 800113c:	d904      	bls.n	8001148 <__aeabi_dmul+0x284>
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	4698      	mov	r8, r3
 8001144:	4445      	add	r5, r8
 8001146:	9503      	str	r5, [sp, #12]
 8001148:	9b02      	ldr	r3, [sp, #8]
 800114a:	043f      	lsls	r7, r7, #16
 800114c:	445b      	add	r3, fp
 800114e:	001e      	movs	r6, r3
 8001150:	4283      	cmp	r3, r0
 8001152:	4180      	sbcs	r0, r0
 8001154:	0423      	lsls	r3, r4, #16
 8001156:	4698      	mov	r8, r3
 8001158:	9b05      	ldr	r3, [sp, #20]
 800115a:	0c3f      	lsrs	r7, r7, #16
 800115c:	4447      	add	r7, r8
 800115e:	4698      	mov	r8, r3
 8001160:	1876      	adds	r6, r6, r1
 8001162:	428e      	cmp	r6, r1
 8001164:	4189      	sbcs	r1, r1
 8001166:	4447      	add	r7, r8
 8001168:	4240      	negs	r0, r0
 800116a:	183d      	adds	r5, r7, r0
 800116c:	46a8      	mov	r8, r5
 800116e:	4693      	mov	fp, r2
 8001170:	4249      	negs	r1, r1
 8001172:	468a      	mov	sl, r1
 8001174:	44c3      	add	fp, r8
 8001176:	429f      	cmp	r7, r3
 8001178:	41bf      	sbcs	r7, r7
 800117a:	4580      	cmp	r8, r0
 800117c:	4180      	sbcs	r0, r0
 800117e:	9b03      	ldr	r3, [sp, #12]
 8001180:	44da      	add	sl, fp
 8001182:	4698      	mov	r8, r3
 8001184:	4653      	mov	r3, sl
 8001186:	4240      	negs	r0, r0
 8001188:	427f      	negs	r7, r7
 800118a:	4307      	orrs	r7, r0
 800118c:	0c24      	lsrs	r4, r4, #16
 800118e:	4593      	cmp	fp, r2
 8001190:	4192      	sbcs	r2, r2
 8001192:	458a      	cmp	sl, r1
 8001194:	4189      	sbcs	r1, r1
 8001196:	193f      	adds	r7, r7, r4
 8001198:	0ddc      	lsrs	r4, r3, #23
 800119a:	9b04      	ldr	r3, [sp, #16]
 800119c:	0275      	lsls	r5, r6, #9
 800119e:	431d      	orrs	r5, r3
 80011a0:	1e68      	subs	r0, r5, #1
 80011a2:	4185      	sbcs	r5, r0
 80011a4:	4653      	mov	r3, sl
 80011a6:	4252      	negs	r2, r2
 80011a8:	4249      	negs	r1, r1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	18bf      	adds	r7, r7, r2
 80011ae:	4447      	add	r7, r8
 80011b0:	0df6      	lsrs	r6, r6, #23
 80011b2:	027f      	lsls	r7, r7, #9
 80011b4:	4335      	orrs	r5, r6
 80011b6:	025a      	lsls	r2, r3, #9
 80011b8:	433c      	orrs	r4, r7
 80011ba:	4315      	orrs	r5, r2
 80011bc:	01fb      	lsls	r3, r7, #7
 80011be:	d400      	bmi.n	80011c2 <__aeabi_dmul+0x2fe>
 80011c0:	e0c1      	b.n	8001346 <__aeabi_dmul+0x482>
 80011c2:	2101      	movs	r1, #1
 80011c4:	086a      	lsrs	r2, r5, #1
 80011c6:	400d      	ands	r5, r1
 80011c8:	4315      	orrs	r5, r2
 80011ca:	07e2      	lsls	r2, r4, #31
 80011cc:	4315      	orrs	r5, r2
 80011ce:	0864      	lsrs	r4, r4, #1
 80011d0:	4926      	ldr	r1, [pc, #152]	; (800126c <__aeabi_dmul+0x3a8>)
 80011d2:	4461      	add	r1, ip
 80011d4:	2900      	cmp	r1, #0
 80011d6:	dd56      	ble.n	8001286 <__aeabi_dmul+0x3c2>
 80011d8:	076b      	lsls	r3, r5, #29
 80011da:	d009      	beq.n	80011f0 <__aeabi_dmul+0x32c>
 80011dc:	220f      	movs	r2, #15
 80011de:	402a      	ands	r2, r5
 80011e0:	2a04      	cmp	r2, #4
 80011e2:	d005      	beq.n	80011f0 <__aeabi_dmul+0x32c>
 80011e4:	1d2a      	adds	r2, r5, #4
 80011e6:	42aa      	cmp	r2, r5
 80011e8:	41ad      	sbcs	r5, r5
 80011ea:	426d      	negs	r5, r5
 80011ec:	1964      	adds	r4, r4, r5
 80011ee:	0015      	movs	r5, r2
 80011f0:	01e3      	lsls	r3, r4, #7
 80011f2:	d504      	bpl.n	80011fe <__aeabi_dmul+0x33a>
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <__aeabi_dmul+0x3ac>)
 80011f8:	00c9      	lsls	r1, r1, #3
 80011fa:	4014      	ands	r4, r2
 80011fc:	4461      	add	r1, ip
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <__aeabi_dmul+0x3b0>)
 8001200:	4291      	cmp	r1, r2
 8001202:	dd00      	ble.n	8001206 <__aeabi_dmul+0x342>
 8001204:	e724      	b.n	8001050 <__aeabi_dmul+0x18c>
 8001206:	0762      	lsls	r2, r4, #29
 8001208:	08ed      	lsrs	r5, r5, #3
 800120a:	0264      	lsls	r4, r4, #9
 800120c:	0549      	lsls	r1, r1, #21
 800120e:	4315      	orrs	r5, r2
 8001210:	0b24      	lsrs	r4, r4, #12
 8001212:	0d4a      	lsrs	r2, r1, #21
 8001214:	e6c6      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 8001216:	9701      	str	r7, [sp, #4]
 8001218:	e6b8      	b.n	8000f8c <__aeabi_dmul+0xc8>
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <__aeabi_dmul+0x398>)
 800121c:	2003      	movs	r0, #3
 800121e:	4694      	mov	ip, r2
 8001220:	4463      	add	r3, ip
 8001222:	464a      	mov	r2, r9
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2303      	movs	r3, #3
 8001228:	431a      	orrs	r2, r3
 800122a:	4691      	mov	r9, r2
 800122c:	4652      	mov	r2, sl
 800122e:	e68a      	b.n	8000f46 <__aeabi_dmul+0x82>
 8001230:	4649      	mov	r1, r9
 8001232:	2301      	movs	r3, #1
 8001234:	4319      	orrs	r1, r3
 8001236:	4689      	mov	r9, r1
 8001238:	2600      	movs	r6, #0
 800123a:	2001      	movs	r0, #1
 800123c:	e683      	b.n	8000f46 <__aeabi_dmul+0x82>
 800123e:	220c      	movs	r2, #12
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2303      	movs	r3, #3
 8001244:	0005      	movs	r5, r0
 8001246:	4691      	mov	r9, r2
 8001248:	469b      	mov	fp, r3
 800124a:	e65e      	b.n	8000f0a <__aeabi_dmul+0x46>
 800124c:	2304      	movs	r3, #4
 800124e:	4699      	mov	r9, r3
 8001250:	2300      	movs	r3, #0
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	2400      	movs	r4, #0
 8001258:	469b      	mov	fp, r3
 800125a:	e656      	b.n	8000f0a <__aeabi_dmul+0x46>
 800125c:	000007ff 	.word	0x000007ff
 8001260:	fffffc01 	.word	0xfffffc01
 8001264:	08006aa4 	.word	0x08006aa4
 8001268:	fffffc0d 	.word	0xfffffc0d
 800126c:	000003ff 	.word	0x000003ff
 8001270:	feffffff 	.word	0xfeffffff
 8001274:	000007fe 	.word	0x000007fe
 8001278:	2300      	movs	r3, #0
 800127a:	2480      	movs	r4, #128	; 0x80
 800127c:	2500      	movs	r5, #0
 800127e:	4a44      	ldr	r2, [pc, #272]	; (8001390 <__aeabi_dmul+0x4cc>)
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	0324      	lsls	r4, r4, #12
 8001284:	e68e      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 8001286:	2001      	movs	r0, #1
 8001288:	1a40      	subs	r0, r0, r1
 800128a:	2838      	cmp	r0, #56	; 0x38
 800128c:	dd00      	ble.n	8001290 <__aeabi_dmul+0x3cc>
 800128e:	e686      	b.n	8000f9e <__aeabi_dmul+0xda>
 8001290:	281f      	cmp	r0, #31
 8001292:	dd5b      	ble.n	800134c <__aeabi_dmul+0x488>
 8001294:	221f      	movs	r2, #31
 8001296:	0023      	movs	r3, r4
 8001298:	4252      	negs	r2, r2
 800129a:	1a51      	subs	r1, r2, r1
 800129c:	40cb      	lsrs	r3, r1
 800129e:	0019      	movs	r1, r3
 80012a0:	2820      	cmp	r0, #32
 80012a2:	d003      	beq.n	80012ac <__aeabi_dmul+0x3e8>
 80012a4:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <__aeabi_dmul+0x4d0>)
 80012a6:	4462      	add	r2, ip
 80012a8:	4094      	lsls	r4, r2
 80012aa:	4325      	orrs	r5, r4
 80012ac:	1e6a      	subs	r2, r5, #1
 80012ae:	4195      	sbcs	r5, r2
 80012b0:	002a      	movs	r2, r5
 80012b2:	430a      	orrs	r2, r1
 80012b4:	2107      	movs	r1, #7
 80012b6:	000d      	movs	r5, r1
 80012b8:	2400      	movs	r4, #0
 80012ba:	4015      	ands	r5, r2
 80012bc:	4211      	tst	r1, r2
 80012be:	d05b      	beq.n	8001378 <__aeabi_dmul+0x4b4>
 80012c0:	210f      	movs	r1, #15
 80012c2:	2400      	movs	r4, #0
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d053      	beq.n	8001372 <__aeabi_dmul+0x4ae>
 80012ca:	1d11      	adds	r1, r2, #4
 80012cc:	4291      	cmp	r1, r2
 80012ce:	4192      	sbcs	r2, r2
 80012d0:	4252      	negs	r2, r2
 80012d2:	18a4      	adds	r4, r4, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	0223      	lsls	r3, r4, #8
 80012d8:	d54b      	bpl.n	8001372 <__aeabi_dmul+0x4ae>
 80012da:	2201      	movs	r2, #1
 80012dc:	2400      	movs	r4, #0
 80012de:	2500      	movs	r5, #0
 80012e0:	e660      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	031b      	lsls	r3, r3, #12
 80012e6:	421c      	tst	r4, r3
 80012e8:	d009      	beq.n	80012fe <__aeabi_dmul+0x43a>
 80012ea:	421e      	tst	r6, r3
 80012ec:	d107      	bne.n	80012fe <__aeabi_dmul+0x43a>
 80012ee:	4333      	orrs	r3, r6
 80012f0:	031c      	lsls	r4, r3, #12
 80012f2:	4643      	mov	r3, r8
 80012f4:	0015      	movs	r5, r2
 80012f6:	0b24      	lsrs	r4, r4, #12
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <__aeabi_dmul+0x4cc>)
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	e652      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	0312      	lsls	r2, r2, #12
 8001302:	4314      	orrs	r4, r2
 8001304:	0324      	lsls	r4, r4, #12
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <__aeabi_dmul+0x4cc>)
 8001308:	0b24      	lsrs	r4, r4, #12
 800130a:	9701      	str	r7, [sp, #4]
 800130c:	e64a      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 800130e:	f000 f8f3 	bl	80014f8 <__clzsi2>
 8001312:	0003      	movs	r3, r0
 8001314:	001a      	movs	r2, r3
 8001316:	3215      	adds	r2, #21
 8001318:	3020      	adds	r0, #32
 800131a:	2a1c      	cmp	r2, #28
 800131c:	dc00      	bgt.n	8001320 <__aeabi_dmul+0x45c>
 800131e:	e684      	b.n	800102a <__aeabi_dmul+0x166>
 8001320:	4656      	mov	r6, sl
 8001322:	3b08      	subs	r3, #8
 8001324:	2200      	movs	r2, #0
 8001326:	409e      	lsls	r6, r3
 8001328:	e689      	b.n	800103e <__aeabi_dmul+0x17a>
 800132a:	f000 f8e5 	bl	80014f8 <__clzsi2>
 800132e:	0001      	movs	r1, r0
 8001330:	0002      	movs	r2, r0
 8001332:	3115      	adds	r1, #21
 8001334:	3220      	adds	r2, #32
 8001336:	291c      	cmp	r1, #28
 8001338:	dc00      	bgt.n	800133c <__aeabi_dmul+0x478>
 800133a:	e64e      	b.n	8000fda <__aeabi_dmul+0x116>
 800133c:	0034      	movs	r4, r6
 800133e:	3808      	subs	r0, #8
 8001340:	2500      	movs	r5, #0
 8001342:	4084      	lsls	r4, r0
 8001344:	e653      	b.n	8000fee <__aeabi_dmul+0x12a>
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	469c      	mov	ip, r3
 800134a:	e741      	b.n	80011d0 <__aeabi_dmul+0x30c>
 800134c:	4912      	ldr	r1, [pc, #72]	; (8001398 <__aeabi_dmul+0x4d4>)
 800134e:	0022      	movs	r2, r4
 8001350:	4461      	add	r1, ip
 8001352:	002e      	movs	r6, r5
 8001354:	408d      	lsls	r5, r1
 8001356:	408a      	lsls	r2, r1
 8001358:	40c6      	lsrs	r6, r0
 800135a:	1e69      	subs	r1, r5, #1
 800135c:	418d      	sbcs	r5, r1
 800135e:	4332      	orrs	r2, r6
 8001360:	432a      	orrs	r2, r5
 8001362:	40c4      	lsrs	r4, r0
 8001364:	0753      	lsls	r3, r2, #29
 8001366:	d0b6      	beq.n	80012d6 <__aeabi_dmul+0x412>
 8001368:	210f      	movs	r1, #15
 800136a:	4011      	ands	r1, r2
 800136c:	2904      	cmp	r1, #4
 800136e:	d1ac      	bne.n	80012ca <__aeabi_dmul+0x406>
 8001370:	e7b1      	b.n	80012d6 <__aeabi_dmul+0x412>
 8001372:	0765      	lsls	r5, r4, #29
 8001374:	0264      	lsls	r4, r4, #9
 8001376:	0b24      	lsrs	r4, r4, #12
 8001378:	08d2      	lsrs	r2, r2, #3
 800137a:	4315      	orrs	r5, r2
 800137c:	2200      	movs	r2, #0
 800137e:	e611      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0312      	lsls	r2, r2, #12
 8001384:	4314      	orrs	r4, r2
 8001386:	0324      	lsls	r4, r4, #12
 8001388:	4a01      	ldr	r2, [pc, #4]	; (8001390 <__aeabi_dmul+0x4cc>)
 800138a:	0b24      	lsrs	r4, r4, #12
 800138c:	e60a      	b.n	8000fa4 <__aeabi_dmul+0xe0>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	000007ff 	.word	0x000007ff
 8001394:	0000043e 	.word	0x0000043e
 8001398:	0000041e 	.word	0x0000041e

0800139c <__aeabi_ui2d>:
 800139c:	b510      	push	{r4, lr}
 800139e:	1e04      	subs	r4, r0, #0
 80013a0:	d010      	beq.n	80013c4 <__aeabi_ui2d+0x28>
 80013a2:	f000 f8a9 	bl	80014f8 <__clzsi2>
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <__aeabi_ui2d+0x48>)
 80013a8:	1a1b      	subs	r3, r3, r0
 80013aa:	280a      	cmp	r0, #10
 80013ac:	dc11      	bgt.n	80013d2 <__aeabi_ui2d+0x36>
 80013ae:	220b      	movs	r2, #11
 80013b0:	0021      	movs	r1, r4
 80013b2:	1a12      	subs	r2, r2, r0
 80013b4:	40d1      	lsrs	r1, r2
 80013b6:	3015      	adds	r0, #21
 80013b8:	030a      	lsls	r2, r1, #12
 80013ba:	055b      	lsls	r3, r3, #21
 80013bc:	4084      	lsls	r4, r0
 80013be:	0b12      	lsrs	r2, r2, #12
 80013c0:	0d5b      	lsrs	r3, r3, #21
 80013c2:	e001      	b.n	80013c8 <__aeabi_ui2d+0x2c>
 80013c4:	2300      	movs	r3, #0
 80013c6:	2200      	movs	r2, #0
 80013c8:	051b      	lsls	r3, r3, #20
 80013ca:	4313      	orrs	r3, r2
 80013cc:	0020      	movs	r0, r4
 80013ce:	0019      	movs	r1, r3
 80013d0:	bd10      	pop	{r4, pc}
 80013d2:	0022      	movs	r2, r4
 80013d4:	380b      	subs	r0, #11
 80013d6:	4082      	lsls	r2, r0
 80013d8:	055b      	lsls	r3, r3, #21
 80013da:	0312      	lsls	r2, r2, #12
 80013dc:	2400      	movs	r4, #0
 80013de:	0b12      	lsrs	r2, r2, #12
 80013e0:	0d5b      	lsrs	r3, r3, #21
 80013e2:	e7f1      	b.n	80013c8 <__aeabi_ui2d+0x2c>
 80013e4:	0000041e 	.word	0x0000041e

080013e8 <__aeabi_d2f>:
 80013e8:	0002      	movs	r2, r0
 80013ea:	004b      	lsls	r3, r1, #1
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	0308      	lsls	r0, r1, #12
 80013f0:	0d5b      	lsrs	r3, r3, #21
 80013f2:	4e3d      	ldr	r6, [pc, #244]	; (80014e8 <__aeabi_d2f+0x100>)
 80013f4:	0fcc      	lsrs	r4, r1, #31
 80013f6:	0a40      	lsrs	r0, r0, #9
 80013f8:	0f51      	lsrs	r1, r2, #29
 80013fa:	1c5f      	adds	r7, r3, #1
 80013fc:	4308      	orrs	r0, r1
 80013fe:	00d5      	lsls	r5, r2, #3
 8001400:	4237      	tst	r7, r6
 8001402:	d00a      	beq.n	800141a <__aeabi_d2f+0x32>
 8001404:	4939      	ldr	r1, [pc, #228]	; (80014ec <__aeabi_d2f+0x104>)
 8001406:	185e      	adds	r6, r3, r1
 8001408:	2efe      	cmp	r6, #254	; 0xfe
 800140a:	dd16      	ble.n	800143a <__aeabi_d2f+0x52>
 800140c:	23ff      	movs	r3, #255	; 0xff
 800140e:	2100      	movs	r1, #0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	430b      	orrs	r3, r1
 8001414:	07e0      	lsls	r0, r4, #31
 8001416:	4318      	orrs	r0, r3
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <__aeabi_d2f+0x44>
 800141e:	4328      	orrs	r0, r5
 8001420:	d027      	beq.n	8001472 <__aeabi_d2f+0x8a>
 8001422:	2105      	movs	r1, #5
 8001424:	0189      	lsls	r1, r1, #6
 8001426:	0a49      	lsrs	r1, r1, #9
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e7f1      	b.n	8001410 <__aeabi_d2f+0x28>
 800142c:	4305      	orrs	r5, r0
 800142e:	d0ed      	beq.n	800140c <__aeabi_d2f+0x24>
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	03c9      	lsls	r1, r1, #15
 8001434:	23ff      	movs	r3, #255	; 0xff
 8001436:	4301      	orrs	r1, r0
 8001438:	e7ea      	b.n	8001410 <__aeabi_d2f+0x28>
 800143a:	2e00      	cmp	r6, #0
 800143c:	dd1c      	ble.n	8001478 <__aeabi_d2f+0x90>
 800143e:	0192      	lsls	r2, r2, #6
 8001440:	0011      	movs	r1, r2
 8001442:	1e4a      	subs	r2, r1, #1
 8001444:	4191      	sbcs	r1, r2
 8001446:	00c0      	lsls	r0, r0, #3
 8001448:	0f6d      	lsrs	r5, r5, #29
 800144a:	4301      	orrs	r1, r0
 800144c:	4329      	orrs	r1, r5
 800144e:	074b      	lsls	r3, r1, #29
 8001450:	d048      	beq.n	80014e4 <__aeabi_d2f+0xfc>
 8001452:	230f      	movs	r3, #15
 8001454:	400b      	ands	r3, r1
 8001456:	2b04      	cmp	r3, #4
 8001458:	d000      	beq.n	800145c <__aeabi_d2f+0x74>
 800145a:	3104      	adds	r1, #4
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	04db      	lsls	r3, r3, #19
 8001460:	400b      	ands	r3, r1
 8001462:	d03f      	beq.n	80014e4 <__aeabi_d2f+0xfc>
 8001464:	1c72      	adds	r2, r6, #1
 8001466:	2efe      	cmp	r6, #254	; 0xfe
 8001468:	d0d0      	beq.n	800140c <__aeabi_d2f+0x24>
 800146a:	0189      	lsls	r1, r1, #6
 800146c:	0a49      	lsrs	r1, r1, #9
 800146e:	b2d3      	uxtb	r3, r2
 8001470:	e7ce      	b.n	8001410 <__aeabi_d2f+0x28>
 8001472:	2300      	movs	r3, #0
 8001474:	2100      	movs	r1, #0
 8001476:	e7cb      	b.n	8001410 <__aeabi_d2f+0x28>
 8001478:	0032      	movs	r2, r6
 800147a:	3217      	adds	r2, #23
 800147c:	db22      	blt.n	80014c4 <__aeabi_d2f+0xdc>
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	221e      	movs	r2, #30
 8001482:	0409      	lsls	r1, r1, #16
 8001484:	4308      	orrs	r0, r1
 8001486:	1b92      	subs	r2, r2, r6
 8001488:	2a1f      	cmp	r2, #31
 800148a:	dd1d      	ble.n	80014c8 <__aeabi_d2f+0xe0>
 800148c:	2102      	movs	r1, #2
 800148e:	4249      	negs	r1, r1
 8001490:	1b8e      	subs	r6, r1, r6
 8001492:	0001      	movs	r1, r0
 8001494:	40f1      	lsrs	r1, r6
 8001496:	000e      	movs	r6, r1
 8001498:	2a20      	cmp	r2, #32
 800149a:	d004      	beq.n	80014a6 <__aeabi_d2f+0xbe>
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <__aeabi_d2f+0x108>)
 800149e:	4694      	mov	ip, r2
 80014a0:	4463      	add	r3, ip
 80014a2:	4098      	lsls	r0, r3
 80014a4:	4305      	orrs	r5, r0
 80014a6:	0029      	movs	r1, r5
 80014a8:	1e4d      	subs	r5, r1, #1
 80014aa:	41a9      	sbcs	r1, r5
 80014ac:	4331      	orrs	r1, r6
 80014ae:	2600      	movs	r6, #0
 80014b0:	074b      	lsls	r3, r1, #29
 80014b2:	d1ce      	bne.n	8001452 <__aeabi_d2f+0x6a>
 80014b4:	2080      	movs	r0, #128	; 0x80
 80014b6:	000b      	movs	r3, r1
 80014b8:	04c0      	lsls	r0, r0, #19
 80014ba:	2201      	movs	r2, #1
 80014bc:	4003      	ands	r3, r0
 80014be:	4201      	tst	r1, r0
 80014c0:	d1d3      	bne.n	800146a <__aeabi_d2f+0x82>
 80014c2:	e7af      	b.n	8001424 <__aeabi_d2f+0x3c>
 80014c4:	2300      	movs	r3, #0
 80014c6:	e7ac      	b.n	8001422 <__aeabi_d2f+0x3a>
 80014c8:	490a      	ldr	r1, [pc, #40]	; (80014f4 <__aeabi_d2f+0x10c>)
 80014ca:	468c      	mov	ip, r1
 80014cc:	0029      	movs	r1, r5
 80014ce:	4463      	add	r3, ip
 80014d0:	40d1      	lsrs	r1, r2
 80014d2:	409d      	lsls	r5, r3
 80014d4:	000a      	movs	r2, r1
 80014d6:	0029      	movs	r1, r5
 80014d8:	4098      	lsls	r0, r3
 80014da:	1e4d      	subs	r5, r1, #1
 80014dc:	41a9      	sbcs	r1, r5
 80014de:	4301      	orrs	r1, r0
 80014e0:	4311      	orrs	r1, r2
 80014e2:	e7e4      	b.n	80014ae <__aeabi_d2f+0xc6>
 80014e4:	0033      	movs	r3, r6
 80014e6:	e79d      	b.n	8001424 <__aeabi_d2f+0x3c>
 80014e8:	000007fe 	.word	0x000007fe
 80014ec:	fffffc80 	.word	0xfffffc80
 80014f0:	fffffca2 	.word	0xfffffca2
 80014f4:	fffffc82 	.word	0xfffffc82

080014f8 <__clzsi2>:
 80014f8:	211c      	movs	r1, #28
 80014fa:	2301      	movs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	4298      	cmp	r0, r3
 8001500:	d301      	bcc.n	8001506 <__clzsi2+0xe>
 8001502:	0c00      	lsrs	r0, r0, #16
 8001504:	3910      	subs	r1, #16
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	4298      	cmp	r0, r3
 800150a:	d301      	bcc.n	8001510 <__clzsi2+0x18>
 800150c:	0a00      	lsrs	r0, r0, #8
 800150e:	3908      	subs	r1, #8
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	4298      	cmp	r0, r3
 8001514:	d301      	bcc.n	800151a <__clzsi2+0x22>
 8001516:	0900      	lsrs	r0, r0, #4
 8001518:	3904      	subs	r1, #4
 800151a:	a202      	add	r2, pc, #8	; (adr r2, 8001524 <__clzsi2+0x2c>)
 800151c:	5c10      	ldrb	r0, [r2, r0]
 800151e:	1840      	adds	r0, r0, r1
 8001520:	4770      	bx	lr
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	02020304 	.word	0x02020304
 8001528:	01010101 	.word	0x01010101
	...

08001534 <Crc16>:
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040};

unsigned int Crc16(unsigned char *pcBlock, unsigned int len){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    unsigned int crc = 0xFFFF;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <Crc16+0x44>)
 8001540:	60fb      	str	r3, [r7, #12]
    while (len--) crc = (crc >> 8) ^ Crc16Table[(crc & 0xFF) ^ *pcBlock++];
 8001542:	e00e      	b.n	8001562 <Crc16+0x2e>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	0a1a      	lsrs	r2, r3, #8
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	21ff      	movs	r1, #255	; 0xff
 800154c:	4019      	ands	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1c58      	adds	r0, r3, #1
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4059      	eors	r1, r3
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <Crc16+0x48>)
 800155a:	0089      	lsls	r1, r1, #2
 800155c:	58cb      	ldr	r3, [r1, r3]
 800155e:	4053      	eors	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	603a      	str	r2, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1eb      	bne.n	8001544 <Crc16+0x10>
    return crc;
 800156c:	68fb      	ldr	r3, [r7, #12]
    }
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	0000ffff 	.word	0x0000ffff
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){		// каждые 3,4635мс(T35 для 9600)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	429a      	cmp	r2, r3
 8001592:	d102      	bne.n	800159a <HAL_TIM_PeriodElapsedCallback+0x1a>
		t35end=1;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
	} //end  1,75мс(T35)
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	2000062e 	.word	0x2000062e

080015a8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){;}
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_UART_RxCpltCallback+0x50>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d11b      	bne.n	8001600 <HAL_UART_RxCpltCallback+0x48>
		TIM2->CNT = 0; // сброс Т�?М1, начало отсчёта Т35
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
		t35end=0;      // сбрасываем Т35
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_RxCpltCallback+0x54>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)MB_preBUFF, rxPac); //запуск следующего приёма
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_UART_RxCpltCallback+0x58>)
 80015d8:	881a      	ldrh	r2, [r3, #0]
 80015da:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_UART_RxCpltCallback+0x5c>)
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_UART_RxCpltCallback+0x50>)
 80015de:	0018      	movs	r0, r3
 80015e0:	f004 f842 	bl	8005668 <HAL_UART_Receive_IT>
		MB_BUFF[MB_buffCount++]=MB_preBUFF[0];   //сохраняем полученый байт в буфер
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_UART_RxCpltCallback+0x60>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_UART_RxCpltCallback+0x60>)
 80015ee:	7011      	strb	r1, [r2, #0]
 80015f0:	001a      	movs	r2, r3
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_UART_RxCpltCallback+0x5c>)
 80015f4:	7819      	ldrb	r1, [r3, #0]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_UART_RxCpltCallback+0x64>)
 80015f8:	5499      	strb	r1, [r3, r2]
		MB_MyPac_OK=0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_UART_RxCpltCallback+0x68>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
	}
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000634 	.word	0x20000634
 800160c:	2000062e 	.word	0x2000062e
 8001610:	20000000 	.word	0x20000000
 8001614:	20000620 	.word	0x20000620
 8001618:	20000621 	.word	0x20000621
 800161c:	20000558 	.word	0x20000558
 8001620:	20000623 	.word	0x20000623

08001624 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d107      	bne.n	8001646 <HAL_ADC_ConvCpltCallback+0x22>
    {
        adc1 = HAL_ADC_GetValue(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	0018      	movs	r0, r3
 800163a:	f001 fad9 	bl	8002bf0 <HAL_ADC_GetValue>
 800163e:	0003      	movs	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_ADC_ConvCpltCallback+0x30>)
 8001644:	801a      	strh	r2, [r3, #0]
    }
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40012400 	.word	0x40012400
 8001654:	2000062a 	.word	0x2000062a

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165e:	f001 f8b1 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001662:	f000 fc39 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001666:	f000 fe31 	bl	80022cc <MX_GPIO_Init>
  MX_ADC_Init();
 800166a:	f000 fc9d 	bl	8001fa8 <MX_ADC_Init>
  MX_TIM1_Init();
 800166e:	f000 fcf5 	bl	800205c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001672:	f000 fdfb 	bl	800226c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001676:	f000 fda5 	bl	80021c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc);
 800167a:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <main+0x254>)
 800167c:	0018      	movs	r0, r3
 800167e:	f001 fd1d 	bl	80030bc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc);
 8001682:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <main+0x254>)
 8001684:	0018      	movs	r0, r3
 8001686:	f001 fa41 	bl	8002b0c <HAL_ADC_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1); // генерирует прерывание
 800168a:	4b89      	ldr	r3, [pc, #548]	; (80018b0 <main+0x258>)
 800168c:	2100      	movs	r1, #0
 800168e:	0018      	movs	r0, r3
 8001690:	f002 feea 	bl	8004468 <HAL_TIM_OC_Start_IT>
  //HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 8001694:	4b87      	ldr	r3, [pc, #540]	; (80018b4 <main+0x25c>)
 8001696:	0018      	movs	r0, r3
 8001698:	f002 fe3c 	bl	8004314 <HAL_TIM_Base_Start_IT>
  //////////////////////////////////// Запускаем ожидание приёма по УАРТ
  HAL_UART_Receive_IT(&huart1, (uint8_t*)MB_preBUFF, rxPac);
 800169c:	4b86      	ldr	r3, [pc, #536]	; (80018b8 <main+0x260>)
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	4986      	ldr	r1, [pc, #536]	; (80018bc <main+0x264>)
 80016a2:	4b87      	ldr	r3, [pc, #540]	; (80018c0 <main+0x268>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f003 ffdf 	bl	8005668 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mb_data[MY_ID] = 1;
 80016aa:	4b86      	ldr	r3, [pc, #536]	; (80018c4 <main+0x26c>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	801a      	strh	r2, [r3, #0]
  //TIM1->ARR = 3000; //начальное значение оборотов (1 об/мин)
  mb_data[2] = TIM1->ARR;
 80016b0:	4b85      	ldr	r3, [pc, #532]	; (80018c8 <main+0x270>)
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <main+0x26c>)
 80016b8:	809a      	strh	r2, [r3, #4]

  while (1){
	  uint16_t arr1=0;
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	2200      	movs	r2, #0
 80016be:	801a      	strh	r2, [r3, #0]
	  uint16_t arrADC=0;
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	801a      	strh	r2, [r3, #0]
	  /*Configure GPIO pin Output Level */
	  //HAL_GPIO_WritePin(GPIOA, DIR_Mot_Pin|ENA_Mot_Pin, GPIO_PIN_RESET);
	//out6_GPIO_Port->ODR&=~out6_Pin;
	  //DIR_Mot_GPIO_Port->ODR |= DIR_Mot_Pin;
	  //ENA_Mot_GPIO_Port->ODR |= ENA_Mot_Pin;
	  Uobor.oborMin = (float)((48000000/(((TIM1->PSC)+1)*((TIM1->ARR)+1)*2.0*3200.0))*60); //подсчёт реальных оборотов/мин
 80016c6:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <main+0x270>)
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	4b7e      	ldr	r3, [pc, #504]	; (80018c8 <main+0x270>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	3301      	adds	r3, #1
 80016d2:	4353      	muls	r3, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fe61 	bl	800139c <__aeabi_ui2d>
 80016da:	0002      	movs	r2, r0
 80016dc:	000b      	movs	r3, r1
 80016de:	f7fe fd9f 	bl	8000220 <__aeabi_dadd>
 80016e2:	0002      	movs	r2, r0
 80016e4:	000b      	movs	r3, r1
 80016e6:	0010      	movs	r0, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	4b77      	ldr	r3, [pc, #476]	; (80018cc <main+0x274>)
 80016ee:	f7ff fbe9 	bl	8000ec4 <__aeabi_dmul>
 80016f2:	0002      	movs	r2, r0
 80016f4:	000b      	movs	r3, r1
 80016f6:	2000      	movs	r0, #0
 80016f8:	4975      	ldr	r1, [pc, #468]	; (80018d0 <main+0x278>)
 80016fa:	f7ff f8fb 	bl	80008f4 <__aeabi_ddiv>
 80016fe:	0002      	movs	r2, r0
 8001700:	000b      	movs	r3, r1
 8001702:	0010      	movs	r0, r2
 8001704:	0019      	movs	r1, r3
 8001706:	2200      	movs	r2, #0
 8001708:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <main+0x27c>)
 800170a:	f7ff fbdb 	bl	8000ec4 <__aeabi_dmul>
 800170e:	0002      	movs	r2, r0
 8001710:	000b      	movs	r3, r1
 8001712:	0010      	movs	r0, r2
 8001714:	0019      	movs	r1, r3
 8001716:	f7ff fe67 	bl	80013e8 <__aeabi_d2f>
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <main+0x280>)
 800171e:	601a      	str	r2, [r3, #0]
	  //Uobor.oborMin = 123.456;
	  mb_data[3] = Uobor.oborMin1;
 8001720:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <main+0x280>)
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <main+0x26c>)
 8001726:	80da      	strh	r2, [r3, #6]
	  mb_data[4] = Uobor.oborMin2;
 8001728:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <main+0x280>)
 800172a:	885a      	ldrh	r2, [r3, #2]
 800172c:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <main+0x26c>)
 800172e:	811a      	strh	r2, [r3, #8]
	  mb_data[7]=adc1;
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <main+0x284>)
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <main+0x26c>)
 8001736:	81da      	strh	r2, [r3, #14]



	    //********************** >Т35 **********************//
	    	if ( !MB_MyPac_OK && t35end ) {
 8001738:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <main+0x288>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d156      	bne.n	80017ee <main+0x196>
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <main+0x28c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d051      	beq.n	80017ee <main+0x196>
	    			TIM2->CNT = 0; t35end=0; // сброс счётчика и флага
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
 8001752:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <main+0x28c>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
	    			MB_buffCount=0;
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <main+0x290>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
	    			//if (CtrlBT_GPIO_Port->IDR & CtrlBT_Pin) {
	    			if (InBT_GPIO_Port->IDR & InBT_Pin) {					//Блютус ОТКЛ
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <main+0x294>)
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d03b      	beq.n	80017e2 <main+0x18a>
	    				DIR_Mot_GPIO_Port->ODR |= DIR_Mot_Pin;				//Это напрявление вращения
 800176a:	2390      	movs	r3, #144	; 0x90
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	2390      	movs	r3, #144	; 0x90
 8001772:	05db      	lsls	r3, r3, #23
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0089      	lsls	r1, r1, #2
 8001778:	430a      	orrs	r2, r1
 800177a:	615a      	str	r2, [r3, #20]
	    				ENA_Mot_GPIO_Port->ODR &=~ ENA_Mot_Pin;				//Это отпустить/схватить ЭД
 800177c:	2390      	movs	r3, #144	; 0x90
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	2390      	movs	r3, #144	; 0x90
 8001784:	05db      	lsls	r3, r3, #23
 8001786:	495a      	ldr	r1, [pc, #360]	; (80018f0 <main+0x298>)
 8001788:	400a      	ands	r2, r1
 800178a:	615a      	str	r2, [r3, #20]
	    				arrADC = (48000000/(2*((TIM1->PSC) + 1)*(mb_data[7]/67)*3200/60))-1;
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <main+0x270>)
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	1c5c      	adds	r4, r3, #1
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <main+0x26c>)
 8001794:	89db      	ldrh	r3, [r3, #14]
 8001796:	2143      	movs	r1, #67	; 0x43
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe fcb5 	bl	8000108 <__udivsi3>
 800179e:	0003      	movs	r3, r0
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4363      	muls	r3, r4
 80017a4:	001a      	movs	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	189b      	adds	r3, r3, r2
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	213c      	movs	r1, #60	; 0x3c
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7fe fca7 	bl	8000108 <__udivsi3>
 80017ba:	0003      	movs	r3, r0
 80017bc:	0019      	movs	r1, r3
 80017be:	484d      	ldr	r0, [pc, #308]	; (80018f4 <main+0x29c>)
 80017c0:	f7fe fca2 	bl	8000108 <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	3a01      	subs	r2, #1
 80017cc:	801a      	strh	r2, [r3, #0]
	    				TIM1->ARR = arrADC + mb_data[5] - mb_data[6];
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	4a3c      	ldr	r2, [pc, #240]	; (80018c4 <main+0x26c>)
 80017d4:	8952      	ldrh	r2, [r2, #10]
 80017d6:	189b      	adds	r3, r3, r2
 80017d8:	4a3a      	ldr	r2, [pc, #232]	; (80018c4 <main+0x26c>)
 80017da:	8992      	ldrh	r2, [r2, #12]
 80017dc:	1a9a      	subs	r2, r3, r2
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <main+0x270>)
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
	    			}
	    			MB_BUFF[0]=0xff; MB_BUFF[1]=0xff;   //это стираем ID и COM навсякий, но это ОПАСНО!
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <main+0x2a0>)
 80017e4:	22ff      	movs	r2, #255	; 0xff
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <main+0x2a0>)
 80017ea:	22ff      	movs	r2, #255	; 0xff
 80017ec:	705a      	strb	r2, [r3, #1]
	    		}

	    //********************** (Tx) ОТВЕЧАЕМ КОГДА ПАКЕТ МОЙ и Т35 **********************//
	    		if ( MB_MyPac_OK && t35end ) {
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <main+0x288>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <main+0x1a0>
 80017f6:	e10c      	b.n	8001a12 <main+0x3ba>
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <main+0x28c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d100      	bne.n	8001804 <main+0x1ac>
 8001802:	e106      	b.n	8001a12 <main+0x3ba>
	    			TIM2->CNT = 0; t35end=0; // сброс счётчика и флага
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	05db      	lsls	r3, r3, #23
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <main+0x28c>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
	    			MB_buffCount=0;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <main+0x290>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	    			MB_MyPac_OK=0;
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <main+0x288>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	    			//кнопки
	    			if ( !(InBT_GPIO_Port->IDR & InBT_Pin) && (InR_GPIO_Port->IDR & InR_Pin) ) {	//Работа от Блютус
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <main+0x294>)
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4013      	ands	r3, r2
 8001828:	d000      	beq.n	800182c <main+0x1d4>
 800182a:	e077      	b.n	800191c <main+0x2c4>
 800182c:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <main+0x294>)
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	015b      	lsls	r3, r3, #5
 8001834:	4013      	ands	r3, r2
 8001836:	d100      	bne.n	800183a <main+0x1e2>
 8001838:	e070      	b.n	800191c <main+0x2c4>
	    				if (mb_data[9]) {DIR_Mot_GPIO_Port->ODR |= DIR_Mot_Pin;} //реверс
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <main+0x26c>)
 800183c:	8a5b      	ldrh	r3, [r3, #18]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <main+0x1fe>
 8001842:	2390      	movs	r3, #144	; 0x90
 8001844:	05db      	lsls	r3, r3, #23
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	2390      	movs	r3, #144	; 0x90
 800184a:	05db      	lsls	r3, r3, #23
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0089      	lsls	r1, r1, #2
 8001850:	430a      	orrs	r2, r1
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	e007      	b.n	8001866 <main+0x20e>
	    				else            {DIR_Mot_GPIO_Port->ODR &=~ DIR_Mot_Pin;}
 8001856:	2390      	movs	r3, #144	; 0x90
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	2390      	movs	r3, #144	; 0x90
 800185e:	05db      	lsls	r3, r3, #23
 8001860:	4926      	ldr	r1, [pc, #152]	; (80018fc <main+0x2a4>)
 8001862:	400a      	ands	r2, r1
 8001864:	615a      	str	r2, [r3, #20]

	    				if (mb_data[8]) {ENA_Mot_GPIO_Port->ODR |= ENA_Mot_Pin;} //отпустить ЭД
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <main+0x26c>)
 8001868:	8a1b      	ldrh	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <main+0x22a>
 800186e:	2390      	movs	r3, #144	; 0x90
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	2390      	movs	r3, #144	; 0x90
 8001876:	05db      	lsls	r3, r3, #23
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	00c9      	lsls	r1, r1, #3
 800187c:	430a      	orrs	r2, r1
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	e007      	b.n	8001892 <main+0x23a>
	    				else            {ENA_Mot_GPIO_Port->ODR &=~ ENA_Mot_Pin;}
 8001882:	2390      	movs	r3, #144	; 0x90
 8001884:	05db      	lsls	r3, r3, #23
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	2390      	movs	r3, #144	; 0x90
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	4918      	ldr	r1, [pc, #96]	; (80018f0 <main+0x298>)
 800188e:	400a      	ands	r2, r1
 8001890:	615a      	str	r2, [r3, #20]

	    				if    (mb_data[10]) {HAL_TIM_OC_Stop_IT (&htim1, TIM_CHANNEL_1);  zashelka1=0;} //стоп генерации
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <main+0x26c>)
 8001894:	8a9b      	ldrh	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d034      	beq.n	8001904 <main+0x2ac>
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <main+0x258>)
 800189c:	2100      	movs	r1, #0
 800189e:	0018      	movs	r0, r3
 80018a0:	f002 fee2 	bl	8004668 <HAL_TIM_OC_Stop_IT>
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <main+0x2a8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
 80018aa:	e037      	b.n	800191c <main+0x2c4>
 80018ac:	20000748 	.word	0x20000748
 80018b0:	200006b8 	.word	0x200006b8
 80018b4:	20000700 	.word	0x20000700
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000620 	.word	0x20000620
 80018c0:	20000634 	.word	0x20000634
 80018c4:	2000042c 	.word	0x2000042c
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	40a90000 	.word	0x40a90000
 80018d0:	4186e360 	.word	0x4186e360
 80018d4:	404e0000 	.word	0x404e0000
 80018d8:	20000630 	.word	0x20000630
 80018dc:	2000062a 	.word	0x2000062a
 80018e0:	20000623 	.word	0x20000623
 80018e4:	2000062e 	.word	0x2000062e
 80018e8:	20000621 	.word	0x20000621
 80018ec:	48000400 	.word	0x48000400
 80018f0:	fffffbff 	.word	0xfffffbff
 80018f4:	02dc6c00 	.word	0x02dc6c00
 80018f8:	20000558 	.word	0x20000558
 80018fc:	fffffdff 	.word	0xfffffdff
 8001900:	2000062c 	.word	0x2000062c
	    				else if (!(zashelka1)) {HAL_TIM_OC_Start_IT (&htim1, TIM_CHANNEL_1); zashelka1=1;} //zashelka1
 8001904:	4bce      	ldr	r3, [pc, #824]	; (8001c40 <main+0x5e8>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <main+0x2c4>
 800190c:	4bcd      	ldr	r3, [pc, #820]	; (8001c44 <main+0x5ec>)
 800190e:	2100      	movs	r1, #0
 8001910:	0018      	movs	r0, r3
 8001912:	f002 fda9 	bl	8004468 <HAL_TIM_OC_Start_IT>
 8001916:	4bca      	ldr	r3, [pc, #808]	; (8001c40 <main+0x5e8>)
 8001918:	2201      	movs	r2, #1
 800191a:	801a      	strh	r2, [r3, #0]
	    			}
	    			//рачёт ARR, если мы задаём в об/мин
	    			//if ( !(CtrlBT_GPIO_Port->IDR & CtrlBT_Pin) && (CtrlR_GPIO_Port->IDR & CtrlR_Pin) &&
	    			if ( !(InBT_GPIO_Port->IDR & InBT_Pin) && (InR_GPIO_Port->IDR & InR_Pin) &&		//Работа от Блютус
 800191c:	4bca      	ldr	r3, [pc, #808]	; (8001c48 <main+0x5f0>)
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4013      	ands	r3, r2
 8001926:	d12d      	bne.n	8001984 <main+0x32c>
 8001928:	4bc7      	ldr	r3, [pc, #796]	; (8001c48 <main+0x5f0>)
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	015b      	lsls	r3, r3, #5
 8001930:	4013      	ands	r3, r2
 8001932:	d027      	beq.n	8001984 <main+0x32c>
	    					(mb_data[2] >= 0)&& (mb_data[2] <= 60)  ) {
 8001934:	4bc5      	ldr	r3, [pc, #788]	; (8001c4c <main+0x5f4>)
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	2b3c      	cmp	r3, #60	; 0x3c
 800193a:	d823      	bhi.n	8001984 <main+0x32c>
	    				arr1 = (48000000/(2*((TIM1->PSC) + 1)*mb_data[2]*3200/60))-1;
 800193c:	4bc4      	ldr	r3, [pc, #784]	; (8001c50 <main+0x5f8>)
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	3301      	adds	r3, #1
 8001942:	4ac2      	ldr	r2, [pc, #776]	; (8001c4c <main+0x5f4>)
 8001944:	8892      	ldrh	r2, [r2, #4]
 8001946:	435a      	muls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	189b      	adds	r3, r3, r2
 800194e:	009a      	lsls	r2, r3, #2
 8001950:	189b      	adds	r3, r3, r2
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	213c      	movs	r1, #60	; 0x3c
 8001956:	0018      	movs	r0, r3
 8001958:	f7fe fbd6 	bl	8000108 <__udivsi3>
 800195c:	0003      	movs	r3, r0
 800195e:	0019      	movs	r1, r3
 8001960:	48bc      	ldr	r0, [pc, #752]	; (8001c54 <main+0x5fc>)
 8001962:	f7fe fbd1 	bl	8000108 <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	b29a      	uxth	r2, r3
 800196a:	1dbb      	adds	r3, r7, #6
 800196c:	3a01      	subs	r2, #1
 800196e:	801a      	strh	r2, [r3, #0]
	    				TIM1->ARR = arr1 + mb_data[5] - mb_data[6];
 8001970:	1dbb      	adds	r3, r7, #6
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	4ab5      	ldr	r2, [pc, #724]	; (8001c4c <main+0x5f4>)
 8001976:	8952      	ldrh	r2, [r2, #10]
 8001978:	189b      	adds	r3, r3, r2
 800197a:	4ab4      	ldr	r2, [pc, #720]	; (8001c4c <main+0x5f4>)
 800197c:	8992      	ldrh	r2, [r2, #12]
 800197e:	1a9a      	subs	r2, r3, r2
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <main+0x5f8>)
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
	    			}
	    			//if ( (CtrlBT_GPIO_Port->IDR & CtrlBT_Pin) && !(CtrlR_GPIO_Port->IDR & CtrlR_Pin) ) {
	    			if ( (InBT_GPIO_Port->IDR & InBT_Pin) && !(InR_GPIO_Port->IDR & InR_Pin) ) {		//Работа от Резистора
 8001984:	4bb0      	ldr	r3, [pc, #704]	; (8001c48 <main+0x5f0>)
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d030      	beq.n	80019f2 <main+0x39a>
 8001990:	4bad      	ldr	r3, [pc, #692]	; (8001c48 <main+0x5f0>)
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	015b      	lsls	r3, r3, #5
 8001998:	4013      	ands	r3, r2
 800199a:	d12a      	bne.n	80019f2 <main+0x39a>
	    				arrADC = (48000000/(2*((TIM1->PSC) + 1)*(mb_data[7]/67)*3200/60))-1;
 800199c:	4bac      	ldr	r3, [pc, #688]	; (8001c50 <main+0x5f8>)
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	1c5c      	adds	r4, r3, #1
 80019a2:	4baa      	ldr	r3, [pc, #680]	; (8001c4c <main+0x5f4>)
 80019a4:	89db      	ldrh	r3, [r3, #14]
 80019a6:	2143      	movs	r1, #67	; 0x43
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7fe fbad 	bl	8000108 <__udivsi3>
 80019ae:	0003      	movs	r3, r0
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4363      	muls	r3, r4
 80019b4:	001a      	movs	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	189b      	adds	r3, r3, r2
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	213c      	movs	r1, #60	; 0x3c
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe fb9f 	bl	8000108 <__udivsi3>
 80019ca:	0003      	movs	r3, r0
 80019cc:	0019      	movs	r1, r3
 80019ce:	48a1      	ldr	r0, [pc, #644]	; (8001c54 <main+0x5fc>)
 80019d0:	f7fe fb9a 	bl	8000108 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	3a01      	subs	r2, #1
 80019dc:	801a      	strh	r2, [r3, #0]
	    				TIM1->ARR = arrADC + mb_data[5] - mb_data[6];
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	4a9a      	ldr	r2, [pc, #616]	; (8001c4c <main+0x5f4>)
 80019e4:	8952      	ldrh	r2, [r2, #10]
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	4a98      	ldr	r2, [pc, #608]	; (8001c4c <main+0x5f4>)
 80019ea:	8992      	ldrh	r2, [r2, #12]
 80019ec:	1a9a      	subs	r2, r3, r2
 80019ee:	4b98      	ldr	r3, [pc, #608]	; (8001c50 <main+0x5f8>)
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
	    			}
	    			mb_data[5]=0; mb_data[6]=0;
 80019f2:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <main+0x5f4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	815a      	strh	r2, [r3, #10]
 80019f8:	4b94      	ldr	r3, [pc, #592]	; (8001c4c <main+0x5f4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	819a      	strh	r2, [r3, #12]
	    			HAL_UART_Transmit_IT(&huart1,(uint8_t*)MB_BUFF, txPac);
 80019fe:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <main+0x600>)
 8001a00:	881a      	ldrh	r2, [r3, #0]
 8001a02:	4996      	ldr	r1, [pc, #600]	; (8001c5c <main+0x604>)
 8001a04:	4b96      	ldr	r3, [pc, #600]	; (8001c60 <main+0x608>)
 8001a06:	0018      	movs	r0, r3
 8001a08:	f003 fdae 	bl	8005568 <HAL_UART_Transmit_IT>
	    			MB_BUFF[0]=0xff; // чё зачем??????
 8001a0c:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <main+0x604>)
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	701a      	strb	r2, [r3, #0]
	    		}

	    //***********************************************************************************
	    //************************ ОБРАБОТКА и СОХРАНЕН�?Е ДАННЫХ ПАКЕТА ********************
	    //***********************************************************************************
	    		if (!MB_MyPac_OK) {
 8001a12:	4b94      	ldr	r3, [pc, #592]	; (8001c64 <main+0x60c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d000      	beq.n	8001a1c <main+0x3c4>
 8001a1a:	e64e      	b.n	80016ba <main+0x62>
	    			if ( (MB_BUFF[0]==0) || (MB_BUFF[0]==mb_data[MY_ID]) ) {
 8001a1c:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <main+0x604>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <main+0x3dc>
 8001a24:	4b8d      	ldr	r3, [pc, #564]	; (8001c5c <main+0x604>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <main+0x5f4>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d000      	beq.n	8001a34 <main+0x3dc>
 8001a32:	e642      	b.n	80016ba <main+0x62>
	    				//LedDbg_GPIO_Port->ODR ^= LedDbg_Pin;
	    //********************** Команда 16(0x10) ЗАП�?СЬ нескольких регистров ******************
	    				if ( (MB_BUFF[1]==0x10) && (MB_buffCount==7) ){  //проверка команды и вычисление длины пакета
 8001a34:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <main+0x604>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d11f      	bne.n	8001a7c <main+0x424>
 8001a3c:	4b8a      	ldr	r3, [pc, #552]	; (8001c68 <main+0x610>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d11b      	bne.n	8001a7c <main+0x424>
	    				   MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3]; //адресс первого регистра
 8001a44:	4b85      	ldr	r3, [pc, #532]	; (8001c5c <main+0x604>)
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <main+0x604>)
 8001a4e:	78db      	ldrb	r3, [r3, #3]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <main+0x614>)
 8001a5a:	801a      	strh	r2, [r3, #0]
	    				   MB_Prot_kolreg =  (MB_BUFF[4]<<8)|MB_BUFF[5]; //кол регистров
 8001a5c:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <main+0x604>)
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b7d      	ldr	r3, [pc, #500]	; (8001c5c <main+0x604>)
 8001a66:	795b      	ldrb	r3, [r3, #5]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <main+0x618>)
 8001a72:	801a      	strh	r2, [r3, #0]
	    				   MB_Prot_kolbyt = MB_BUFF[6];				     //кол байт далее
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <main+0x604>)
 8001a76:	799a      	ldrb	r2, [r3, #6]
 8001a78:	4b7e      	ldr	r3, [pc, #504]	; (8001c74 <main+0x61c>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	    				}
	    				if (MB_buffCount==MB_Prot_kolbyt+7+2) {
 8001a7c:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <main+0x610>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	001a      	movs	r2, r3
 8001a82:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <main+0x61c>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	3309      	adds	r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d161      	bne.n	8001b50 <main+0x4f8>
	    					if (!Crc16(MB_BUFF, MB_Prot_kolbyt+7+2)) {
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <main+0x61c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	3309      	adds	r3, #9
 8001a92:	001a      	movs	r2, r3
 8001a94:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <main+0x604>)
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fd4b 	bl	8001534 <Crc16>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d14e      	bne.n	8001b40 <main+0x4e8>
	    						while(MB_Prot_kolreg)   //сохраняем положение регистров (реле)
 8001aa2:	e026      	b.n	8001af2 <main+0x49a>
	    						{
	    							mb_data[--MB_Prot_kolreg + MB_Prot_adr1reg] = (MB_BUFF[6 + MB_Prot_kolbyt--]) |
 8001aa4:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <main+0x61c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	b2d1      	uxtb	r1, r2
 8001aac:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <main+0x61c>)
 8001aae:	7011      	strb	r1, [r2, #0]
 8001ab0:	3306      	adds	r3, #6
 8001ab2:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <main+0x604>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	b21a      	sxth	r2, r3
	    							(MB_BUFF[6 + MB_Prot_kolbyt--]<<8);
 8001ab8:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <main+0x61c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	1e59      	subs	r1, r3, #1
 8001abe:	b2c8      	uxtb	r0, r1
 8001ac0:	496c      	ldr	r1, [pc, #432]	; (8001c74 <main+0x61c>)
 8001ac2:	7008      	strb	r0, [r1, #0]
 8001ac4:	3306      	adds	r3, #6
 8001ac6:	4965      	ldr	r1, [pc, #404]	; (8001c5c <main+0x604>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	021b      	lsls	r3, r3, #8
	    							mb_data[--MB_Prot_kolreg + MB_Prot_adr1reg] = (MB_BUFF[6 + MB_Prot_kolbyt--]) |
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b219      	sxth	r1, r3
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <main+0x618>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <main+0x618>)
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <main+0x618>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <main+0x614>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	18d2      	adds	r2, r2, r3
 8001aea:	b289      	uxth	r1, r1
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <main+0x5f4>)
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	52d1      	strh	r1, [r2, r3]
	    						while(MB_Prot_kolreg)   //сохраняем положение регистров (реле)
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <main+0x618>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1d4      	bne.n	8001aa4 <main+0x44c>
	    						}
	    					crc16rez = Crc16(MB_BUFF, 6);                  //расчёт crc16 для ответа
 8001afa:	4b58      	ldr	r3, [pc, #352]	; (8001c5c <main+0x604>)
 8001afc:	2106      	movs	r1, #6
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff fd18 	bl	8001534 <Crc16>
 8001b04:	0003      	movs	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <main+0x620>)
 8001b0a:	801a      	strh	r2, [r3, #0]
	    					MB_BUFF[6] = crc16rez;                         //в ответ: Lo crc16
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <main+0x620>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <main+0x604>)
 8001b14:	719a      	strb	r2, [r3, #6]
	    					MB_BUFF[7] = crc16rez>>8;                      //в ответ: Hi crc16
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <main+0x620>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <main+0x604>)
 8001b22:	71da      	strb	r2, [r3, #7]
	    					txPac = 8; //должен быть кол-во отправляемых байт -1
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <main+0x600>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	801a      	strh	r2, [r3, #0]
	    					MB_MyPac_OK=1;
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <main+0x60c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
	    					mb_data[AVARII]&=~(1<<13);
 8001b30:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <main+0x5f4>)
 8001b32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <main+0x624>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <main+0x5f4>)
 8001b3c:	849a      	strh	r2, [r3, #36]	; 0x24
 8001b3e:	e007      	b.n	8001b50 <main+0x4f8>

	    					//SetRelayZash(); SetLED();
	    					}
	    					else {mb_data[AVARII]|=(1<<13);} // Ошибка crc-16
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <main+0x5f4>)
 8001b42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	0192      	lsls	r2, r2, #6
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <main+0x5f4>)
 8001b4e:	849a      	strh	r2, [r3, #36]	; 0x24
	    				}//end Команда 0x10


	    //********************** Команда 06(0x06) ЗАП�?СЬ 1 регистра ******************
	    				if ( (MB_BUFF[1]==0x06) && (MB_buffCount==8) ) {
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <main+0x604>)
 8001b52:	785b      	ldrb	r3, [r3, #1]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d13c      	bne.n	8001bd2 <main+0x57a>
 8001b58:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <main+0x610>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d138      	bne.n	8001bd2 <main+0x57a>
	    					if (!Crc16(MB_BUFF, 8)) {
 8001b60:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <main+0x604>)
 8001b62:	2108      	movs	r1, #8
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff fce5 	bl	8001534 <Crc16>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d129      	bne.n	8001bc2 <main+0x56a>
	    						MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3];          //адресс первого регистра
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <main+0x604>)
 8001b70:	789b      	ldrb	r3, [r3, #2]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <main+0x604>)
 8001b78:	78db      	ldrb	r3, [r3, #3]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <main+0x614>)
 8001b84:	801a      	strh	r2, [r3, #0]
	    						mb_data[MB_Prot_adr1reg] = (MB_BUFF[4]<<8)|MB_BUFF[5]; //сохраняем положение регистров (реле)
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <main+0x604>)
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <main+0x604>)
 8001b90:	795b      	ldrb	r3, [r3, #5]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b219      	sxth	r1, r3
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <main+0x614>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	b289      	uxth	r1, r1
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <main+0x5f4>)
 8001ba2:	0052      	lsls	r2, r2, #1
 8001ba4:	52d1      	strh	r1, [r2, r3]
	    						txPac = 8; //должен быть кол-во отправляемых байт -1
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <main+0x600>)
 8001ba8:	2208      	movs	r2, #8
 8001baa:	801a      	strh	r2, [r3, #0]
	    						MB_MyPac_OK=1;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <main+0x60c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
	    						mb_data[AVARII]&=~(1<<13);
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <main+0x5f4>)
 8001bb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <main+0x624>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <main+0x5f4>)
 8001bbe:	849a      	strh	r2, [r3, #36]	; 0x24
 8001bc0:	e007      	b.n	8001bd2 <main+0x57a>
	    						//SetRelayZash(); SetLED();
	    					}
	    					else {mb_data[AVARII]|=(1<<13);} // Ошибка crc-16
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <main+0x5f4>)
 8001bc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	0192      	lsls	r2, r2, #6
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <main+0x5f4>)
 8001bd0:	849a      	strh	r2, [r3, #36]	; 0x24
	    				}//end Команда 0x06

	    //********************** Команда 03 (0x03) ЧТЕН�?Е нескольких регистров ******************
	    				if ( (MB_BUFF[1]==0x03) && (MB_buffCount==8) ) {
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <main+0x604>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d000      	beq.n	8001bdc <main+0x584>
 8001bda:	e0c0      	b.n	8001d5e <main+0x706>
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <main+0x610>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d000      	beq.n	8001be6 <main+0x58e>
 8001be4:	e0bb      	b.n	8001d5e <main+0x706>
	    					if (!Crc16(MB_BUFF, 8)) {   //проверка команды и вычисление длины пакета
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <main+0x604>)
 8001be8:	2108      	movs	r1, #8
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff fca2 	bl	8001534 <Crc16>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d000      	beq.n	8001bf6 <main+0x59e>
 8001bf4:	e0ab      	b.n	8001d4e <main+0x6f6>
	    						MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3]; //адресс первого регистра
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <main+0x604>)
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <main+0x604>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <main+0x614>)
 8001c0c:	801a      	strh	r2, [r3, #0]
	    						MB_Prot_kolreg =  ( (MB_BUFF[4]<<8)|MB_BUFF[5] ); //кол регистров
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <main+0x604>)
 8001c10:	791b      	ldrb	r3, [r3, #4]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <main+0x604>)
 8001c18:	795b      	ldrb	r3, [r3, #5]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <main+0x618>)
 8001c24:	801a      	strh	r2, [r3, #0]
	    						//далее формирование отвера (запрошеных регистров)
	    						MB_Prot_kolbyt = MB_Prot_kolreg*2;  //количество байт далее
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <main+0x618>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	18db      	adds	r3, r3, r3
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <main+0x61c>)
 8001c32:	701a      	strb	r2, [r3, #0]
	    						MB_BUFF[2] = MB_Prot_kolbyt;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <main+0x61c>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <main+0x604>)
 8001c3a:	709a      	strb	r2, [r3, #2]
	    						while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8001c3c:	e052      	b.n	8001ce4 <main+0x68c>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	2000062c 	.word	0x2000062c
 8001c44:	200006b8 	.word	0x200006b8
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	2000042c 	.word	0x2000042c
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	02dc6c00 	.word	0x02dc6c00
 8001c58:	20000002 	.word	0x20000002
 8001c5c:	20000558 	.word	0x20000558
 8001c60:	20000634 	.word	0x20000634
 8001c64:	20000623 	.word	0x20000623
 8001c68:	20000621 	.word	0x20000621
 8001c6c:	20000624 	.word	0x20000624
 8001c70:	20000626 	.word	0x20000626
 8001c74:	20000622 	.word	0x20000622
 8001c78:	20000628 	.word	0x20000628
 8001c7c:	ffffdfff 	.word	0xffffdfff
	    							{
	    							MB_BUFF[--MB_Prot_kolbyt+3] = mb_data[MB_Prot_kolreg + MB_Prot_adr1reg-1];
 8001c80:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <main+0x858>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	001a      	movs	r2, r3
 8001c86:	4b8b      	ldr	r3, [pc, #556]	; (8001eb4 <main+0x85c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	4b8a      	ldr	r3, [pc, #552]	; (8001eb8 <main+0x860>)
 8001c90:	0052      	lsls	r2, r2, #1
 8001c92:	5ad2      	ldrh	r2, [r2, r3]
 8001c94:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <main+0x864>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	4b87      	ldr	r3, [pc, #540]	; (8001ebc <main+0x864>)
 8001c9e:	7019      	strb	r1, [r3, #0]
 8001ca0:	4b86      	ldr	r3, [pc, #536]	; (8001ebc <main+0x864>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	b2d1      	uxtb	r1, r2
 8001ca8:	4a85      	ldr	r2, [pc, #532]	; (8001ec0 <main+0x868>)
 8001caa:	54d1      	strb	r1, [r2, r3]
	    							MB_BUFF[--MB_Prot_kolbyt+3] = (mb_data[MB_Prot_kolreg-- + MB_Prot_adr1reg-1])>>8;
 8001cac:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <main+0x858>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	b291      	uxth	r1, r2
 8001cb4:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <main+0x858>)
 8001cb6:	8011      	strh	r1, [r2, #0]
 8001cb8:	001a      	movs	r2, r3
 8001cba:	4b7e      	ldr	r3, [pc, #504]	; (8001eb4 <main+0x85c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	18d3      	adds	r3, r2, r3
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <main+0x860>)
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	5ad3      	ldrh	r3, [r2, r3]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <main+0x864>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b2d9      	uxtb	r1, r3
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <main+0x864>)
 8001cd6:	7019      	strb	r1, [r3, #0]
 8001cd8:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <main+0x864>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	b2d1      	uxtb	r1, r2
 8001ce0:	4a77      	ldr	r2, [pc, #476]	; (8001ec0 <main+0x868>)
 8001ce2:	54d1      	strb	r1, [r2, r3]
	    						while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <main+0x864>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1c9      	bne.n	8001c80 <main+0x628>
	    							}
	    						crc16rez = Crc16(MB_BUFF, 3+MB_BUFF[2]);                  //расчёт crc16 для ответа
 8001cec:	4b74      	ldr	r3, [pc, #464]	; (8001ec0 <main+0x868>)
 8001cee:	789b      	ldrb	r3, [r3, #2]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	4b72      	ldr	r3, [pc, #456]	; (8001ec0 <main+0x868>)
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff fc1b 	bl	8001534 <Crc16>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <main+0x86c>)
 8001d04:	801a      	strh	r2, [r3, #0]
	    						MB_BUFF[3+MB_BUFF[2]] = crc16rez;                         //в ответ: Lo crc16
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <main+0x86c>)
 8001d08:	881a      	ldrh	r2, [r3, #0]
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <main+0x868>)
 8001d0c:	789b      	ldrb	r3, [r3, #2]
 8001d0e:	3303      	adds	r3, #3
 8001d10:	b2d1      	uxtb	r1, r2
 8001d12:	4a6b      	ldr	r2, [pc, #428]	; (8001ec0 <main+0x868>)
 8001d14:	54d1      	strb	r1, [r2, r3]
	    						MB_BUFF[4+MB_BUFF[2]] = crc16rez>>8;                      //в ответ: Hi crc16
 8001d16:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <main+0x86c>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <main+0x868>)
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	3304      	adds	r3, #4
 8001d24:	b2d1      	uxtb	r1, r2
 8001d26:	4a66      	ldr	r2, [pc, #408]	; (8001ec0 <main+0x868>)
 8001d28:	54d1      	strb	r1, [r2, r3]
	    						txPac = 5+MB_BUFF[2]; //должен быть кол-во отправляемых байт -1
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <main+0x868>)
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3305      	adds	r3, #5
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <main+0x870>)
 8001d36:	801a      	strh	r2, [r3, #0]
	    						MB_MyPac_OK=1;
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <main+0x874>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
	    						mb_data[AVARII]&=~(1<<13);
 8001d3e:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <main+0x860>)
 8001d40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d42:	4a63      	ldr	r2, [pc, #396]	; (8001ed0 <main+0x878>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <main+0x860>)
 8001d4a:	849a      	strh	r2, [r3, #36]	; 0x24
 8001d4c:	e007      	b.n	8001d5e <main+0x706>
	    					}
	    					else {mb_data[AVARII]|=(1<<13);} // Ошибка crc-16
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <main+0x860>)
 8001d50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	0192      	lsls	r2, r2, #6
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <main+0x860>)
 8001d5c:	849a      	strh	r2, [r3, #36]	; 0x24
	    				}//end Команда 0x03

	    //********************** Команда 04 (0x04) ЧТЕН�?Е нескольких регистров ******************
	    				if ( (MB_BUFF[1]==0x04) && (MB_buffCount==8) ) {
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <main+0x868>)
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d000      	beq.n	8001d68 <main+0x710>
 8001d66:	e4a8      	b.n	80016ba <main+0x62>
 8001d68:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <main+0x87c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d000      	beq.n	8001d72 <main+0x71a>
 8001d70:	e4a3      	b.n	80016ba <main+0x62>
	    					if (!Crc16(MB_BUFF, 8)) {   //проверка команды и вычисление длины пакета
 8001d72:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <main+0x868>)
 8001d74:	2108      	movs	r1, #8
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff fbdc 	bl	8001534 <Crc16>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d000      	beq.n	8001d82 <main+0x72a>
 8001d80:	e08b      	b.n	8001e9a <main+0x842>
	    						MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3]; //адресс первого регистра
 8001d82:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <main+0x868>)
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <main+0x868>)
 8001d8c:	78db      	ldrb	r3, [r3, #3]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <main+0x85c>)
 8001d98:	801a      	strh	r2, [r3, #0]
	    						MB_Prot_kolreg =  ( (MB_BUFF[4]<<8)|MB_BUFF[5] ); //кол регистров
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <main+0x868>)
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <main+0x868>)
 8001da4:	795b      	ldrb	r3, [r3, #5]
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <main+0x858>)
 8001db0:	801a      	strh	r2, [r3, #0]
	    						//далее формирование отвера (запрошеных регистров)
	    						MB_Prot_kolbyt = MB_Prot_kolreg*2;  //количество байт далее
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <main+0x858>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	18db      	adds	r3, r3, r3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <main+0x864>)
 8001dbe:	701a      	strb	r2, [r3, #0]
	    						MB_BUFF[2] = MB_Prot_kolbyt;
 8001dc0:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <main+0x864>)
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <main+0x868>)
 8001dc6:	709a      	strb	r2, [r3, #2]
	    						while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8001dc8:	e031      	b.n	8001e2e <main+0x7d6>
	    							{
	    							MB_BUFF[--MB_Prot_kolbyt+3] = mb_data[MB_Prot_kolreg + MB_Prot_adr1reg-1];
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <main+0x858>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <main+0x85c>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	18d3      	adds	r3, r2, r3
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <main+0x860>)
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	5ad2      	ldrh	r2, [r2, r3]
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <main+0x864>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b2d9      	uxtb	r1, r3
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <main+0x864>)
 8001de8:	7019      	strb	r1, [r3, #0]
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <main+0x864>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3303      	adds	r3, #3
 8001df0:	b2d1      	uxtb	r1, r2
 8001df2:	4a33      	ldr	r2, [pc, #204]	; (8001ec0 <main+0x868>)
 8001df4:	54d1      	strb	r1, [r2, r3]
	    							MB_BUFF[--MB_Prot_kolbyt+3] = (mb_data[MB_Prot_kolreg-- + MB_Prot_adr1reg-1])>>8;
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <main+0x858>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	b291      	uxth	r1, r2
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <main+0x858>)
 8001e00:	8011      	strh	r1, [r2, #0]
 8001e02:	001a      	movs	r2, r3
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <main+0x85c>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	18d3      	adds	r3, r2, r3
 8001e0a:	1e5a      	subs	r2, r3, #1
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <main+0x860>)
 8001e0e:	0052      	lsls	r2, r2, #1
 8001e10:	5ad3      	ldrh	r3, [r2, r3]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <main+0x864>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b2d9      	uxtb	r1, r3
 8001e1e:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <main+0x864>)
 8001e20:	7019      	strb	r1, [r3, #0]
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <main+0x864>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3303      	adds	r3, #3
 8001e28:	b2d1      	uxtb	r1, r2
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <main+0x868>)
 8001e2c:	54d1      	strb	r1, [r2, r3]
	    						while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <main+0x864>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1c9      	bne.n	8001dca <main+0x772>
	    							}
	    						crc16rez = Crc16(MB_BUFF, 3+MB_BUFF[2]);                  //расчёт crc16 для ответа
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <main+0x868>)
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <main+0x868>)
 8001e40:	0011      	movs	r1, r2
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff fb76 	bl	8001534 <Crc16>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <main+0x86c>)
 8001e4e:	801a      	strh	r2, [r3, #0]
	    						MB_BUFF[3+MB_BUFF[2]] = crc16rez;                         //в ответ: Lo crc16
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <main+0x86c>)
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <main+0x868>)
 8001e56:	789b      	ldrb	r3, [r3, #2]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	b2d1      	uxtb	r1, r2
 8001e5c:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <main+0x868>)
 8001e5e:	54d1      	strb	r1, [r2, r3]
	    						MB_BUFF[4+MB_BUFF[2]] = crc16rez>>8;                      //в ответ: Hi crc16
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <main+0x86c>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <main+0x868>)
 8001e6a:	789b      	ldrb	r3, [r3, #2]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	b2d1      	uxtb	r1, r2
 8001e70:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <main+0x868>)
 8001e72:	54d1      	strb	r1, [r2, r3]
	    						txPac = 5+MB_BUFF[2]; //должен быть кол-во отправляемых байт -1
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <main+0x868>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3305      	adds	r3, #5
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <main+0x870>)
 8001e80:	801a      	strh	r2, [r3, #0]
	    						mb_data[AVARII]&=~(1<<13);
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <main+0x860>)
 8001e84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <main+0x878>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <main+0x860>)
 8001e8e:	849a      	strh	r2, [r3, #36]	; 0x24
	    						MB_MyPac_OK=1;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <main+0x874>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	f7ff fc10 	bl	80016ba <main+0x62>
	    					}
	    					else {mb_data[AVARII]|=(1<<13);} // Ошибка crc-16
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <main+0x860>)
 8001e9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0192      	lsls	r2, r2, #6
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <main+0x860>)
 8001ea8:	849a      	strh	r2, [r3, #36]	; 0x24
  while (1){
 8001eaa:	f7ff fc06 	bl	80016ba <main+0x62>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	20000626 	.word	0x20000626
 8001eb4:	20000624 	.word	0x20000624
 8001eb8:	2000042c 	.word	0x2000042c
 8001ebc:	20000622 	.word	0x20000622
 8001ec0:	20000558 	.word	0x20000558
 8001ec4:	20000628 	.word	0x20000628
 8001ec8:	20000002 	.word	0x20000002
 8001ecc:	20000623 	.word	0x20000623
 8001ed0:	ffffdfff 	.word	0xffffdfff
 8001ed4:	20000621 	.word	0x20000621

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b097      	sub	sp, #92	; 0x5c
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	2428      	movs	r4, #40	; 0x28
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	2330      	movs	r3, #48	; 0x30
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f004 fd97 	bl	8006a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eee:	2318      	movs	r3, #24
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	2100      	movs	r1, #0
 8001efa:	f004 fd8f 	bl	8006a1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	0018      	movs	r0, r3
 8001f02:	2314      	movs	r3, #20
 8001f04:	001a      	movs	r2, r3
 8001f06:	2100      	movs	r1, #0
 8001f08:	f004 fd88 	bl	8006a1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001f0c:	0021      	movs	r1, r4
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	2212      	movs	r2, #18
 8001f12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	2201      	movs	r2, #1
 8001f18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	2210      	movs	r2, #16
 8001f24:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001f26:	187b      	adds	r3, r7, r1
 8001f28:	2210      	movs	r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	2202      	movs	r2, #2
 8001f30:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	22a0      	movs	r2, #160	; 0xa0
 8001f3c:	0392      	lsls	r2, r2, #14
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f001 fc49 	bl	80037e0 <HAL_RCC_OscConfig>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001f52:	f000 fa6f 	bl	8002434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f56:	2118      	movs	r1, #24
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2202      	movs	r2, #2
 8001f62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2101      	movs	r1, #1
 8001f74:	0018      	movs	r0, r3
 8001f76:	f001 ff4d 	bl	8003e14 <HAL_RCC_ClockConfig>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f7e:	f000 fa59 	bl	8002434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	0018      	movs	r0, r3
 8001f92:	f002 f891 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f9a:	f000 fa4b 	bl	8002434 <Error_Handler>
  }
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b017      	add	sp, #92	; 0x5c
 8001fa4:	bd90      	pop	{r4, r7, pc}
	...

08001fa8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	f004 fd30 	bl	8006a1c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_ADC_Init+0xac>)
 8001fbe:	4a26      	ldr	r2, [pc, #152]	; (8002058 <MX_ADC_Init+0xb0>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <MX_ADC_Init+0xac>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_ADC_Init+0xac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <MX_ADC_Init+0xac>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_ADC_Init+0xac>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_ADC_Init+0xac>)
 8001fdc:	2204      	movs	r2, #4
 8001fde:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_ADC_Init+0xac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <MX_ADC_Init+0xac>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <MX_ADC_Init+0xac>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_ADC_Init+0xac>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_ADC_Init+0xac>)
 8001ffa:	22c2      	movs	r2, #194	; 0xc2
 8001ffc:	32ff      	adds	r2, #255	; 0xff
 8001ffe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_ADC_Init+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <MX_ADC_Init+0xac>)
 8002008:	2224      	movs	r2, #36	; 0x24
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_ADC_Init+0xac>)
 8002010:	2201      	movs	r2, #1
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_ADC_Init+0xac>)
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fc38 	bl	800288c <HAL_ADC_Init>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002020:	f000 fa08 	bl	8002434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2202      	movs	r2, #2
 8002028:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	0152      	lsls	r2, r2, #5
 8002030:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2207      	movs	r2, #7
 8002036:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002038:	1d3a      	adds	r2, r7, #4
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_ADC_Init+0xac>)
 800203c:	0011      	movs	r1, r2
 800203e:	0018      	movs	r0, r3
 8002040:	f000 feaa 	bl	8002d98 <HAL_ADC_ConfigChannel>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002048:	f000 f9f4 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000748 	.word	0x20000748
 8002058:	40012400 	.word	0x40012400

0800205c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b096      	sub	sp, #88	; 0x58
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	2348      	movs	r3, #72	; 0x48
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	0018      	movs	r0, r3
 8002068:	2310      	movs	r3, #16
 800206a:	001a      	movs	r2, r3
 800206c:	2100      	movs	r1, #0
 800206e:	f004 fcd5 	bl	8006a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	0018      	movs	r0, r3
 8002078:	2308      	movs	r3, #8
 800207a:	001a      	movs	r2, r3
 800207c:	2100      	movs	r1, #0
 800207e:	f004 fccd 	bl	8006a1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	2324      	movs	r3, #36	; 0x24
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	0018      	movs	r0, r3
 8002088:	231c      	movs	r3, #28
 800208a:	001a      	movs	r2, r3
 800208c:	2100      	movs	r1, #0
 800208e:	f004 fcc5 	bl	8006a1c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	0018      	movs	r0, r3
 8002096:	2320      	movs	r3, #32
 8002098:	001a      	movs	r2, r3
 800209a:	2100      	movs	r1, #0
 800209c:	f004 fcbe 	bl	8006a1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <MX_TIM1_Init+0x160>)
 80020a2:	4a47      	ldr	r2, [pc, #284]	; (80021c0 <MX_TIM1_Init+0x164>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 149;
 80020a6:	4b45      	ldr	r3, [pc, #276]	; (80021bc <MX_TIM1_Init+0x160>)
 80020a8:	2295      	movs	r2, #149	; 0x95
 80020aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <MX_TIM1_Init+0x160>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <MX_TIM1_Init+0x160>)
 80020b4:	2231      	movs	r2, #49	; 0x31
 80020b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <MX_TIM1_Init+0x160>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <MX_TIM1_Init+0x160>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <MX_TIM1_Init+0x160>)
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <MX_TIM1_Init+0x160>)
 80020cc:	0018      	movs	r0, r3
 80020ce:	f002 f8d1 	bl	8004274 <HAL_TIM_Base_Init>
 80020d2:	1e03      	subs	r3, r0, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80020d6:	f000 f9ad 	bl	8002434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020da:	2148      	movs	r1, #72	; 0x48
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	0152      	lsls	r2, r2, #5
 80020e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020e4:	187a      	adds	r2, r7, r1
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <MX_TIM1_Init+0x160>)
 80020e8:	0011      	movs	r1, r2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f002 fcee 	bl	8004acc <HAL_TIM_ConfigClockSource>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80020f4:	f000 f99e 	bl	8002434 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80020f8:	4b30      	ldr	r3, [pc, #192]	; (80021bc <MX_TIM1_Init+0x160>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f002 f95c 	bl	80043b8 <HAL_TIM_OC_Init>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002104:	f000 f996 	bl	8002434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002116:	187a      	adds	r2, r7, r1
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <MX_TIM1_Init+0x160>)
 800211a:	0011      	movs	r1, r2
 800211c:	0018      	movs	r0, r3
 800211e:	f003 f903 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	1e03      	subs	r3, r0, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002126:	f000 f985 	bl	8002434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800212a:	2124      	movs	r1, #36	; 0x24
 800212c:	187b      	adds	r3, r7, r1
 800212e:	2230      	movs	r2, #48	; 0x30
 8002130:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 8002132:	187b      	adds	r3, r7, r1
 8002134:	2201      	movs	r2, #1
 8002136:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002138:	187b      	adds	r3, r7, r1
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2200      	movs	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002150:	187b      	adds	r3, r7, r1
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002156:	1879      	adds	r1, r7, r1
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_TIM1_Init+0x160>)
 800215a:	2200      	movs	r2, #0
 800215c:	0018      	movs	r0, r3
 800215e:	f002 fc5d 	bl	8004a1c <HAL_TIM_OC_ConfigChannel>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002166:	f000 f965 	bl	8002434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0192      	lsls	r2, r2, #6
 800218e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002196:	1d3a      	adds	r2, r7, #4
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_TIM1_Init+0x160>)
 800219a:	0011      	movs	r1, r2
 800219c:	0018      	movs	r0, r3
 800219e:	f003 f921 	bl	80053e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80021a2:	1e03      	subs	r3, r0, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80021a6:	f000 f945 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <MX_TIM1_Init+0x160>)
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 f9fb 	bl	80025a8 <HAL_TIM_MspPostInit>

}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b016      	add	sp, #88	; 0x58
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	200006b8 	.word	0x200006b8
 80021c0:	40012c00 	.word	0x40012c00

080021c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	2308      	movs	r3, #8
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	0018      	movs	r0, r3
 80021d0:	2310      	movs	r3, #16
 80021d2:	001a      	movs	r2, r3
 80021d4:	2100      	movs	r1, #0
 80021d6:	f004 fc21 	bl	8006a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	003b      	movs	r3, r7
 80021dc:	0018      	movs	r0, r3
 80021de:	2308      	movs	r3, #8
 80021e0:	001a      	movs	r2, r3
 80021e2:	2100      	movs	r1, #0
 80021e4:	f004 fc1a 	bl	8006a1c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <MX_TIM2_Init+0xa0>)
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	05d2      	lsls	r2, r2, #23
 80021ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <MX_TIM2_Init+0xa0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <MX_TIM2_Init+0xa0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 166249;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <MX_TIM2_Init+0xa0>)
 80021fe:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <MX_TIM2_Init+0xa4>)
 8002200:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_TIM2_Init+0xa0>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <MX_TIM2_Init+0xa0>)
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_TIM2_Init+0xa0>)
 8002210:	0018      	movs	r0, r3
 8002212:	f002 f82f 	bl	8004274 <HAL_TIM_Base_Init>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800221a:	f000 f90b 	bl	8002434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221e:	2108      	movs	r1, #8
 8002220:	187b      	adds	r3, r7, r1
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	0152      	lsls	r2, r2, #5
 8002226:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002228:	187a      	adds	r2, r7, r1
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_TIM2_Init+0xa0>)
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f002 fc4c 	bl	8004acc <HAL_TIM_ConfigClockSource>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002238:	f000 f8fc 	bl	8002434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223c:	003b      	movs	r3, r7
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002242:	003b      	movs	r3, r7
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002248:	003a      	movs	r2, r7
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_TIM2_Init+0xa0>)
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f003 f86a 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002258:	f000 f8ec 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000700 	.word	0x20000700
 8002268:	00028969 	.word	0x00028969

0800226c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <MX_USART1_UART_Init+0x5c>)
 8002274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002278:	2296      	movs	r2, #150	; 0x96
 800227a:	0192      	lsls	r2, r2, #6
 800227c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <MX_USART1_UART_Init+0x58>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f003 f905 	bl	80054c0 <HAL_UART_Init>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022ba:	f000 f8bb 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000634 	.word	0x20000634
 80022c8:	40013800 	.word	0x40013800

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d2:	240c      	movs	r4, #12
 80022d4:	193b      	adds	r3, r7, r4
 80022d6:	0018      	movs	r0, r3
 80022d8:	2314      	movs	r3, #20
 80022da:	001a      	movs	r2, r3
 80022dc:	2100      	movs	r1, #0
 80022de:	f004 fb9d 	bl	8006a1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <MX_GPIO_Init+0x158>)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <MX_GPIO_Init+0x158>)
 80022e8:	2180      	movs	r1, #128	; 0x80
 80022ea:	0289      	lsls	r1, r1, #10
 80022ec:	430a      	orrs	r2, r1
 80022ee:	615a      	str	r2, [r3, #20]
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <MX_GPIO_Init+0x158>)
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <MX_GPIO_Init+0x158>)
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	4b48      	ldr	r3, [pc, #288]	; (8002424 <MX_GPIO_Init+0x158>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	02c9      	lsls	r1, r1, #11
 8002308:	430a      	orrs	r2, r1
 800230a:	615a      	str	r2, [r3, #20]
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <MX_GPIO_Init+0x158>)
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	02db      	lsls	r3, r3, #11
 8002314:	4013      	ands	r3, r2
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <MX_GPIO_Init+0x158>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <MX_GPIO_Init+0x158>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0309      	lsls	r1, r1, #12
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <MX_GPIO_Init+0x158>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	031b      	lsls	r3, r3, #12
 8002330:	4013      	ands	r3, r2
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Plus_GPIO_Port, ADC_Plus_Pin, GPIO_PIN_SET);
 8002336:	2390      	movs	r3, #144	; 0x90
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	2201      	movs	r2, #1
 800233c:	2102      	movs	r1, #2
 800233e:	0018      	movs	r0, r3
 8002340:	f001 fa30 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_Minus_Pin|DIR_Mot_Pin|ENA_Mot_Pin, GPIO_PIN_RESET);
 8002344:	23c1      	movs	r3, #193	; 0xc1
 8002346:	00d9      	lsls	r1, r3, #3
 8002348:	2390      	movs	r3, #144	; 0x90
 800234a:	05db      	lsls	r3, r3, #23
 800234c:	2200      	movs	r2, #0
 800234e:	0018      	movs	r0, r3
 8002350:	f001 fa28 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4833      	ldr	r0, [pc, #204]	; (8002428 <MX_GPIO_Init+0x15c>)
 800235a:	2200      	movs	r2, #0
 800235c:	0019      	movs	r1, r3
 800235e:	f001 fa21 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002368:	193b      	adds	r3, r7, r4
 800236a:	2290      	movs	r2, #144	; 0x90
 800236c:	0352      	lsls	r2, r2, #13
 800236e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	193b      	adds	r3, r7, r4
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002376:	193a      	adds	r2, r7, r4
 8002378:	2390      	movs	r3, #144	; 0x90
 800237a:	05db      	lsls	r3, r3, #23
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f001 f8a0 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_Plus_Pin DIR_Mot_Pin ENA_Mot_Pin */
  GPIO_InitStruct.Pin = ADC_Plus_Pin|DIR_Mot_Pin|ENA_Mot_Pin;
 8002384:	193b      	adds	r3, r7, r4
 8002386:	4a29      	ldr	r2, [pc, #164]	; (800242c <MX_GPIO_Init+0x160>)
 8002388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	193b      	adds	r3, r7, r4
 800238c:	2201      	movs	r2, #1
 800238e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	193b      	adds	r3, r7, r4
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	193b      	adds	r3, r7, r4
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	193a      	adds	r2, r7, r4
 800239e:	2390      	movs	r3, #144	; 0x90
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	0011      	movs	r1, r2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f001 f88d 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_Minus_Pin */
  GPIO_InitStruct.Pin = ADC_Minus_Pin;
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	2208      	movs	r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	2211      	movs	r2, #17
 80023b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_Minus_GPIO_Port, &GPIO_InitStruct);
 80023c2:	193a      	adds	r2, r7, r4
 80023c4:	2390      	movs	r3, #144	; 0x90
 80023c6:	05db      	lsls	r3, r3, #23
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f001 f87a 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : InBT_Pin InR_Pin CtrlR_Pin CtrlBT_Pin */
  GPIO_InitStruct.Pin = InBT_Pin|InR_Pin|CtrlR_Pin|CtrlBT_Pin;
 80023d0:	0021      	movs	r1, r4
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	22d8      	movs	r2, #216	; 0xd8
 80023d6:	0152      	lsls	r2, r2, #5
 80023d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023da:	000c      	movs	r4, r1
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2201      	movs	r2, #1
 80023e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <MX_GPIO_Init+0x164>)
 80023ec:	0019      	movs	r1, r3
 80023ee:	0010      	movs	r0, r2
 80023f0:	f001 f868 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80023f4:	0021      	movs	r1, r4
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	22c0      	movs	r2, #192	; 0xc0
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2201      	movs	r2, #1
 8002402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002410:	187b      	adds	r3, r7, r1
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <MX_GPIO_Init+0x15c>)
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f001 f854 	bl	80034c4 <HAL_GPIO_Init>

}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b009      	add	sp, #36	; 0x24
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	48000800 	.word	0x48000800
 800242c:	00000602 	.word	0x00000602
 8002430:	48000400 	.word	0x48000400

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002438:	b672      	cpsid	i
}
 800243a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800243c:	e7fe      	b.n	800243c <Error_Handler+0x8>
	...

08002440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_MspInit+0x44>)
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_MspInit+0x44>)
 800244c:	2101      	movs	r1, #1
 800244e:	430a      	orrs	r2, r1
 8002450:	619a      	str	r2, [r3, #24]
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_MspInit+0x44>)
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_MspInit+0x44>)
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_MspInit+0x44>)
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0549      	lsls	r1, r1, #21
 8002468:	430a      	orrs	r2, r1
 800246a:	61da      	str	r2, [r3, #28]
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_MspInit+0x44>)
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	055b      	lsls	r3, r3, #21
 8002474:	4013      	ands	r3, r2
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b08b      	sub	sp, #44	; 0x2c
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	2414      	movs	r4, #20
 8002492:	193b      	adds	r3, r7, r4
 8002494:	0018      	movs	r0, r3
 8002496:	2314      	movs	r3, #20
 8002498:	001a      	movs	r2, r3
 800249a:	2100      	movs	r1, #0
 800249c:	f004 fabe 	bl	8006a1c <memset>
  if(hadc->Instance==ADC1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_ADC_MspInit+0x94>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d133      	bne.n	8002512 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_ADC_MspInit+0x98>)
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_ADC_MspInit+0x98>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0089      	lsls	r1, r1, #2
 80024b4:	430a      	orrs	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_ADC_MspInit+0x98>)
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_ADC_MspInit+0x98>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_ADC_MspInit+0x98>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0289      	lsls	r1, r1, #10
 80024d0:	430a      	orrs	r2, r1
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_ADC_MspInit+0x98>)
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	2204      	movs	r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e8:	193b      	adds	r3, r7, r4
 80024ea:	2203      	movs	r2, #3
 80024ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	193b      	adds	r3, r7, r4
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	193a      	adds	r2, r7, r4
 80024f6:	2390      	movs	r3, #144	; 0x90
 80024f8:	05db      	lsls	r3, r3, #23
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 ffe1 	bl	80034c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	200c      	movs	r0, #12
 8002508:	f000 ff2c 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800250c:	200c      	movs	r0, #12
 800250e:	f000 ff3e 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b00b      	add	sp, #44	; 0x2c
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40012400 	.word	0x40012400
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_TIM_Base_MspInit+0x7c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d116      	bne.n	8002564 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_TIM_Base_MspInit+0x80>)
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_TIM_Base_MspInit+0x80>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0109      	lsls	r1, r1, #4
 8002540:	430a      	orrs	r2, r1
 8002542:	619a      	str	r2, [r3, #24]
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_TIM_Base_MspInit+0x80>)
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4013      	ands	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	200e      	movs	r0, #14
 8002558:	f000 ff04 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800255c:	200e      	movs	r0, #14
 800255e:	f000 ff16 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002562:	e019      	b.n	8002598 <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	05db      	lsls	r3, r3, #23
 800256c:	429a      	cmp	r2, r3
 800256e:	d113      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_TIM_Base_MspInit+0x80>)
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_TIM_Base_MspInit+0x80>)
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	61da      	str	r2, [r3, #28]
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_TIM_Base_MspInit+0x80>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	200f      	movs	r0, #15
 800258e:	f000 fee9 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002592:	200f      	movs	r0, #15
 8002594:	f000 fefb 	bl	800338e <HAL_NVIC_EnableIRQ>
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	240c      	movs	r4, #12
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	0018      	movs	r0, r3
 80025b6:	2314      	movs	r3, #20
 80025b8:	001a      	movs	r2, r3
 80025ba:	2100      	movs	r1, #0
 80025bc:	f004 fa2e 	bl	8006a1c <memset>
  if(htim->Instance==TIM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_TIM_MspPostInit+0x78>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d125      	bne.n	8002616 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_TIM_MspPostInit+0x7c>)
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_TIM_MspPostInit+0x7c>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0289      	lsls	r1, r1, #10
 80025d4:	430a      	orrs	r2, r1
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_TIM_MspPostInit+0x7c>)
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025e6:	193b      	adds	r3, r7, r4
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	0052      	lsls	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	0021      	movs	r1, r4
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	2202      	movs	r2, #2
 80025f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2202      	movs	r2, #2
 8002606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	187a      	adds	r2, r7, r1
 800260a:	2390      	movs	r3, #144	; 0x90
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	0011      	movs	r1, r2
 8002610:	0018      	movs	r0, r3
 8002612:	f000 ff57 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b009      	add	sp, #36	; 0x24
 800261c:	bd90      	pop	{r4, r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b08b      	sub	sp, #44	; 0x2c
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	2414      	movs	r4, #20
 8002632:	193b      	adds	r3, r7, r4
 8002634:	0018      	movs	r0, r3
 8002636:	2314      	movs	r3, #20
 8002638:	001a      	movs	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	f004 f9ee 	bl	8006a1c <memset>
  if(huart->Instance==USART1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_UART_MspInit+0xa0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d139      	bne.n	80026be <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_UART_MspInit+0xa4>)
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_UART_MspInit+0xa4>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	01c9      	lsls	r1, r1, #7
 8002654:	430a      	orrs	r2, r1
 8002656:	619a      	str	r2, [r3, #24]
 8002658:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_UART_MspInit+0xa4>)
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	01db      	lsls	r3, r3, #7
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_UART_MspInit+0xa4>)
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_UART_MspInit+0xa4>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	02c9      	lsls	r1, r1, #11
 8002670:	430a      	orrs	r2, r1
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_UART_MspInit+0xa4>)
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	02db      	lsls	r3, r3, #11
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002682:	0021      	movs	r1, r4
 8002684:	187b      	adds	r3, r7, r1
 8002686:	22c0      	movs	r2, #192	; 0xc0
 8002688:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	187b      	adds	r3, r7, r1
 800268c:	2202      	movs	r2, #2
 800268e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	187b      	adds	r3, r7, r1
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2203      	movs	r2, #3
 800269a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_UART_MspInit+0xa8>)
 80026a6:	0019      	movs	r1, r3
 80026a8:	0010      	movs	r0, r2
 80026aa:	f000 ff0b 	bl	80034c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	201b      	movs	r0, #27
 80026b4:	f000 fe56 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b8:	201b      	movs	r0, #27
 80026ba:	f000 fe68 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b00b      	add	sp, #44	; 0x2c
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40021000 	.word	0x40021000
 80026d0:	48000400 	.word	0x48000400

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f8:	f000 f8ac 	bl	8002854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <ADC1_COMP_IRQHandler+0x14>)
 800270a:	0018      	movs	r0, r3
 800270c:	f000 fa7c 	bl	8002c08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	20000748 	.word	0x20000748

0800271c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <TIM1_CC_IRQHandler+0x14>)
 8002722:	0018      	movs	r0, r3
 8002724:	f002 f864 	bl	80047f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	200006b8 	.word	0x200006b8

08002734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <TIM2_IRQHandler+0x14>)
 800273a:	0018      	movs	r0, r3
 800273c:	f002 f858 	bl	80047f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000700 	.word	0x20000700

0800274c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <USART1_IRQHandler+0x14>)
 8002752:	0018      	movs	r0, r3
 8002754:	f002 ffea 	bl	800572c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	20000634 	.word	0x20000634

08002764 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002772:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <LoopForever+0x6>)
  ldr r1, =_edata
 8002776:	490e      	ldr	r1, [pc, #56]	; (80027b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <LoopForever+0xe>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800278c:	4c0b      	ldr	r4, [pc, #44]	; (80027bc <LoopForever+0x16>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800279a:	f7ff ffe3 	bl	8002764 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800279e:	f004 f919 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a2:	f7fe ff59 	bl	8001658 <main>

080027a6 <LoopForever>:

LoopForever:
    b LoopForever
 80027a6:	e7fe      	b.n	80027a6 <LoopForever>
  ldr   r0, =_estack
 80027a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 80027b4:	08006b04 	.word	0x08006b04
  ldr r2, =_sbss
 80027b8:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 80027bc:	2000078c 	.word	0x2000078c

080027c0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <CEC_CAN_IRQHandler>
	...

080027c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_Init+0x24>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_Init+0x24>)
 80027ce:	2110      	movs	r1, #16
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f000 f809 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027da:	f7ff fe31 	bl	8002440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_InitTick+0x5c>)
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_InitTick+0x60>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	0019      	movs	r1, r3
 80027fe:	23fa      	movs	r3, #250	; 0xfa
 8002800:	0098      	lsls	r0, r3, #2
 8002802:	f7fd fc81 	bl	8000108 <__udivsi3>
 8002806:	0003      	movs	r3, r0
 8002808:	0019      	movs	r1, r3
 800280a:	0020      	movs	r0, r4
 800280c:	f7fd fc7c 	bl	8000108 <__udivsi3>
 8002810:	0003      	movs	r3, r0
 8002812:	0018      	movs	r0, r3
 8002814:	f000 fdcb 	bl	80033ae <HAL_SYSTICK_Config>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e00f      	b.n	8002840 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d80b      	bhi.n	800283e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	2301      	movs	r3, #1
 800282a:	425b      	negs	r3, r3
 800282c:	2200      	movs	r2, #0
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fd98 	bl	8003364 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_InitTick+0x64>)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b003      	add	sp, #12
 8002846:	bd90      	pop	{r4, r7, pc}
 8002848:	20000404 	.word	0x20000404
 800284c:	2000040c 	.word	0x2000040c
 8002850:	20000408 	.word	0x20000408

08002854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x1c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	001a      	movs	r2, r3
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x20>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	18d2      	adds	r2, r2, r3
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_IncTick+0x20>)
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	2000040c 	.word	0x2000040c
 8002874:	20000788 	.word	0x20000788

08002878 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_GetTick+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	20000788 	.word	0x20000788

0800288c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002894:	230f      	movs	r3, #15
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e125      	b.n	8002af6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2234      	movs	r2, #52	; 0x34
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff fde0 	bl	8002488 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	2210      	movs	r2, #16
 80028ce:	4013      	ands	r3, r2
 80028d0:	d000      	beq.n	80028d4 <HAL_ADC_Init+0x48>
 80028d2:	e103      	b.n	8002adc <HAL_ADC_Init+0x250>
 80028d4:	230f      	movs	r3, #15
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d000      	beq.n	80028e0 <HAL_ADC_Init+0x54>
 80028de:	e0fd      	b.n	8002adc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2204      	movs	r2, #4
 80028e8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80028ea:	d000      	beq.n	80028ee <HAL_ADC_Init+0x62>
 80028ec:	e0f6      	b.n	8002adc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <HAL_ADC_Init+0x274>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	2202      	movs	r2, #2
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2203      	movs	r2, #3
 8002906:	4013      	ands	r3, r2
 8002908:	2b01      	cmp	r3, #1
 800290a:	d112      	bne.n	8002932 <HAL_ADC_Init+0xa6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4013      	ands	r3, r2
 8002916:	2b01      	cmp	r3, #1
 8002918:	d009      	beq.n	800292e <HAL_ADC_Init+0xa2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	401a      	ands	r2, r3
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	429a      	cmp	r2, r3
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0xa6>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_ADC_Init+0xa8>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2218      	movs	r2, #24
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	0899      	lsrs	r1, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4964      	ldr	r1, [pc, #400]	; (8002b04 <HAL_ADC_Init+0x278>)
 8002972:	400a      	ands	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7e1b      	ldrb	r3, [r3, #24]
 800297a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7e5b      	ldrb	r3, [r3, #25]
 8002980:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002982:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7e9b      	ldrb	r3, [r3, #26]
 8002988:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800298a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	2b01      	cmp	r3, #1
 8002992:	d002      	beq.n	800299a <HAL_ADC_Init+0x10e>
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	e000      	b.n	800299c <HAL_ADC_Init+0x110>
 800299a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800299c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_Init+0x124>
 80029ac:	2304      	movs	r3, #4
 80029ae:	e000      	b.n	80029b2 <HAL_ADC_Init+0x126>
 80029b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80029b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2124      	movs	r1, #36	; 0x24
 80029b8:	5c5b      	ldrb	r3, [r3, r1]
 80029ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80029bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7edb      	ldrb	r3, [r3, #27]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d115      	bne.n	80029f8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e9b      	ldrb	r3, [r3, #26]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0252      	lsls	r2, r2, #9
 80029da:	4313      	orrs	r3, r2
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	e00b      	b.n	80029f8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	2220      	movs	r2, #32
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	2201      	movs	r2, #1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	23c2      	movs	r3, #194	; 0xc2
 80029fe:	33ff      	adds	r3, #255	; 0xff
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d007      	beq.n	8002a14 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d01b      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d017      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d013      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d00f      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00b      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d007      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d003      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b07      	cmp	r3, #7
 8002a66:	d112      	bne.n	8002a8e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2107      	movs	r1, #7
 8002a74:	438a      	bics	r2, r1
 8002a76:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6959      	ldr	r1, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	2207      	movs	r2, #7
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_ADC_Init+0x27c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4393      	bics	r3, r2
 8002aac:	2201      	movs	r2, #1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ab4:	e01c      	b.n	8002af0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	2212      	movs	r2, #18
 8002abc:	4393      	bics	r3, r2
 8002abe:	2210      	movs	r2, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2201      	movs	r2, #1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ada:	e009      	b.n	8002af0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002af0:	230f      	movs	r3, #15
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	fffffefd 	.word	0xfffffefd
 8002b04:	fffe0219 	.word	0xfffe0219
 8002b08:	833fffe7 	.word	0x833fffe7

08002b0c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b14:	230f      	movs	r3, #15
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	d156      	bne.n	8002bd6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2234      	movs	r2, #52	; 0x34
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Start_IT+0x2a>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e056      	b.n	8002be4 <HAL_ADC_Start_IT+0xd8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2234      	movs	r2, #52	; 0x34
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7e5b      	ldrb	r3, [r3, #25]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d007      	beq.n	8002b56 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002b46:	230f      	movs	r3, #15
 8002b48:	18fc      	adds	r4, r7, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fa31 	bl	8002fb4 <ADC_Enable>
 8002b52:	0003      	movs	r3, r0
 8002b54:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b56:	230f      	movs	r3, #15
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13e      	bne.n	8002bde <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_ADC_Start_IT+0xe0>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	0052      	lsls	r2, r2, #1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2234      	movs	r2, #52	; 0x34
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	221c      	movs	r2, #28
 8002b86:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d110      	bne.n	8002bb2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2118      	movs	r1, #24
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
          break;
 8002bb0:	e008      	b.n	8002bc4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	211c      	movs	r1, #28
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
          break;
 8002bc2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2104      	movs	r1, #4
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2202      	movs	r2, #2
 8002bdc:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002bde:	230f      	movs	r3, #15
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781b      	ldrb	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b005      	add	sp, #20
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	fffff0fe 	.word	0xfffff0fe

08002bf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b002      	add	sp, #8
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x24>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d00d      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2208      	movs	r2, #8
 8002c34:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d14f      	bne.n	8002cda <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2208      	movs	r2, #8
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d148      	bne.n	8002cda <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d106      	bne.n	8002c60 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d12d      	bne.n	8002cca <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d129      	bne.n	8002cca <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d122      	bne.n	8002cca <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d110      	bne.n	8002cb2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	210c      	movs	r1, #12
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	4a33      	ldr	r2, [pc, #204]	; (8002d74 <HAL_ADC_IRQHandler+0x16c>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2201      	movs	r2, #1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
 8002cb0:	e00b      	b.n	8002cca <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fe fca9 	bl	8001624 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d115      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x10c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d10e      	bne.n	8002d14 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	0252      	lsls	r2, r2, #9
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 f836 	bl	8002d78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d123      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x162>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d11c      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d006      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10d      	bne.n	8002d62 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2210      	movs	r2, #16
 8002d58:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f813 	bl	8002d88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2210      	movs	r2, #16
 8002d68:	601a      	str	r2, [r3, #0]
  }

}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	fffffefe 	.word	0xfffffefe

08002d78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b002      	add	sp, #8
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da2:	230f      	movs	r3, #15
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	055b      	lsls	r3, r3, #21
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d011      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x46>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d00d      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x46>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d009      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x46>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d005      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x46>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d001      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x46>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2234      	movs	r2, #52	; 0x34
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x54>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0d0      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1f6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2234      	movs	r2, #52	; 0x34
 8002df0:	2101      	movs	r1, #1
 8002df2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d000      	beq.n	8002e02 <HAL_ADC_ConfigChannel+0x6a>
 8002e00:	e0b4      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a64      	ldr	r2, [pc, #400]	; (8002f98 <HAL_ADC_ConfigChannel+0x200>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x76>
 8002e0c:	e082      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	055b      	lsls	r3, r3, #21
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d037      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d033      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d02f      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d02b      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d027      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d023      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	2b07      	cmp	r3, #7
 8002e66:	d01b      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2107      	movs	r1, #7
 8002e74:	400b      	ands	r3, r1
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d012      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2107      	movs	r1, #7
 8002e86:	438a      	bics	r2, r1
 8002e88:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6959      	ldr	r1, [r3, #20]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2207      	movs	r2, #7
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d007      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x120>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d003      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x120>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b12      	cmp	r3, #18
 8002eb6:	d163      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_ADC_ConfigChannel+0x204>)
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d009      	beq.n	8002ed8 <HAL_ADC_ConfigChannel+0x140>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d102      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x13a>
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	03db      	lsls	r3, r3, #15
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x144>
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	045b      	lsls	r3, r3, #17
 8002ed6:	e001      	b.n	8002edc <HAL_ADC_ConfigChannel+0x144>
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_ADC_ConfigChannel+0x204>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d14a      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_ADC_ConfigChannel+0x208>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	492d      	ldr	r1, [pc, #180]	; (8002fa4 <HAL_ADC_ConfigChannel+0x20c>)
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd f909 	bl	8000108 <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	001a      	movs	r2, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f04:	e002      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f9      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x16e>
 8002f12:	e035      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4099      	lsls	r1, r3
 8002f22:	000b      	movs	r3, r1
 8002f24:	43d9      	mvns	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d007      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x1ae>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	d003      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x1ae>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b12      	cmp	r3, #18
 8002f44:	d11c      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_ADC_ConfigChannel+0x204>)
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d007      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x1ca>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b11      	cmp	r3, #17
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x1c6>
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_ADC_ConfigChannel+0x210>)
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1cc>
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_ADC_ConfigChannel+0x214>)
 8002f60:	e000      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1cc>
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_ADC_ConfigChannel+0x218>)
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <HAL_ADC_ConfigChannel+0x204>)
 8002f66:	400b      	ands	r3, r1
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e009      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	2220      	movs	r2, #32
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002f78:	230f      	movs	r3, #15
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2234      	movs	r2, #52	; 0x34
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	00001001 	.word	0x00001001
 8002f9c:	40012708 	.word	0x40012708
 8002fa0:	20000404 	.word	0x20000404
 8002fa4:	000f4240 	.word	0x000f4240
 8002fa8:	ffbfffff 	.word	0xffbfffff
 8002fac:	feffffff 	.word	0xfeffffff
 8002fb0:	ff7fffff 	.word	0xff7fffff

08002fb4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d112      	bne.n	8002ff8 <ADC_Enable+0x44>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d009      	beq.n	8002ff4 <ADC_Enable+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	401a      	ands	r2, r3
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d101      	bne.n	8002ff8 <ADC_Enable+0x44>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <ADC_Enable+0x46>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d152      	bne.n	80030a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a2a      	ldr	r2, [pc, #168]	; (80030b0 <ADC_Enable+0xfc>)
 8003006:	4013      	ands	r3, r2
 8003008:	d00d      	beq.n	8003026 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	2210      	movs	r2, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	2201      	movs	r2, #1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e03f      	b.n	80030a6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003036:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <ADC_Enable+0x100>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	491f      	ldr	r1, [pc, #124]	; (80030b8 <ADC_Enable+0x104>)
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd f863 	bl	8000108 <__udivsi3>
 8003042:	0003      	movs	r3, r0
 8003044:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003046:	e002      	b.n	800304e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	3b01      	subs	r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f9      	bne.n	8003048 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003054:	f7ff fc10 	bl	8002878 <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800305c:	e01b      	b.n	8003096 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800305e:	f7ff fc0b 	bl	8002878 <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d914      	bls.n	8003096 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2201      	movs	r2, #1
 8003074:	4013      	ands	r3, r2
 8003076:	2b01      	cmp	r3, #1
 8003078:	d00d      	beq.n	8003096 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	2210      	movs	r2, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2201      	movs	r2, #1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1dc      	bne.n	800305e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	80000017 	.word	0x80000017
 80030b4:	20000404 	.word	0x20000404
 80030b8:	000f4240 	.word	0x000f4240

080030bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2317      	movs	r3, #23
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2234      	movs	r2, #52	; 0x34
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_ADCEx_Calibration_Start+0x26>
 80030de:	2302      	movs	r3, #2
 80030e0:	e08d      	b.n	80031fe <HAL_ADCEx_Calibration_Start+0x142>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2234      	movs	r2, #52	; 0x34
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2203      	movs	r2, #3
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d112      	bne.n	800311e <HAL_ADCEx_Calibration_Start+0x62>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	2b01      	cmp	r3, #1
 8003104:	d009      	beq.n	800311a <HAL_ADCEx_Calibration_Start+0x5e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	401a      	ands	r2, r3
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	429a      	cmp	r2, r3
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_Calibration_Start+0x62>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_ADCEx_Calibration_Start+0x64>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d15b      	bne.n	80031dc <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	4a37      	ldr	r2, [pc, #220]	; (8003208 <HAL_ADCEx_Calibration_Start+0x14c>)
 800312a:	4013      	ands	r3, r2
 800312c:	2202      	movs	r2, #2
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2203      	movs	r2, #3
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2103      	movs	r1, #3
 800314c:	438a      	bics	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	0609      	lsls	r1, r1, #24
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003162:	f7ff fb89 	bl	8002878 <HAL_GetTick>
 8003166:	0003      	movs	r3, r0
 8003168:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800316a:	e01d      	b.n	80031a8 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800316c:	f7ff fb84 	bl	8002878 <HAL_GetTick>
 8003170:	0002      	movs	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d916      	bls.n	80031a8 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	0fdb      	lsrs	r3, r3, #31
 8003182:	07da      	lsls	r2, r3, #31
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	429a      	cmp	r2, r3
 800318a:	d10d      	bne.n	80031a8 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	2212      	movs	r2, #18
 8003192:	4393      	bics	r3, r2
 8003194:	2210      	movs	r2, #16
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2234      	movs	r2, #52	; 0x34
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e02a      	b.n	80031fe <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0fdb      	lsrs	r3, r3, #31
 80031b0:	07da      	lsls	r2, r3, #31
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d0d8      	beq.n	800316c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68d9      	ldr	r1, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	2203      	movs	r2, #3
 80031d0:	4393      	bics	r3, r2
 80031d2:	2201      	movs	r2, #1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
 80031da:	e009      	b.n	80031f0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2220      	movs	r2, #32
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80031e8:	2317      	movs	r3, #23
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2234      	movs	r2, #52	; 0x34
 80031f4:	2100      	movs	r1, #0
 80031f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80031f8:	2317      	movs	r3, #23
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	fffffefd 	.word	0xfffffefd

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	0002      	movs	r2, r0
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b7f      	cmp	r3, #127	; 0x7f
 800321e:	d809      	bhi.n	8003234 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003220:	1dfb      	adds	r3, r7, #7
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	001a      	movs	r2, r3
 8003226:	231f      	movs	r3, #31
 8003228:	401a      	ands	r2, r3
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_EnableIRQ+0x30>)
 800322c:	2101      	movs	r1, #1
 800322e:	4091      	lsls	r1, r2
 8003230:	000a      	movs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
  }
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	0002      	movs	r2, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b7f      	cmp	r3, #127	; 0x7f
 8003254:	d828      	bhi.n	80032a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003256:	4a2f      	ldr	r2, [pc, #188]	; (8003314 <__NVIC_SetPriority+0xd4>)
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	b25b      	sxtb	r3, r3
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	33c0      	adds	r3, #192	; 0xc0
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	589b      	ldr	r3, [r3, r2]
 8003266:	1dfa      	adds	r2, r7, #7
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	0011      	movs	r1, r2
 800326c:	2203      	movs	r2, #3
 800326e:	400a      	ands	r2, r1
 8003270:	00d2      	lsls	r2, r2, #3
 8003272:	21ff      	movs	r1, #255	; 0xff
 8003274:	4091      	lsls	r1, r2
 8003276:	000a      	movs	r2, r1
 8003278:	43d2      	mvns	r2, r2
 800327a:	401a      	ands	r2, r3
 800327c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	22ff      	movs	r2, #255	; 0xff
 8003284:	401a      	ands	r2, r3
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	0018      	movs	r0, r3
 800328c:	2303      	movs	r3, #3
 800328e:	4003      	ands	r3, r0
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003294:	481f      	ldr	r0, [pc, #124]	; (8003314 <__NVIC_SetPriority+0xd4>)
 8003296:	1dfb      	adds	r3, r7, #7
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b25b      	sxtb	r3, r3
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	430a      	orrs	r2, r1
 80032a0:	33c0      	adds	r3, #192	; 0xc0
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032a6:	e031      	b.n	800330c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <__NVIC_SetPriority+0xd8>)
 80032aa:	1dfb      	adds	r3, r7, #7
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	0019      	movs	r1, r3
 80032b0:	230f      	movs	r3, #15
 80032b2:	400b      	ands	r3, r1
 80032b4:	3b08      	subs	r3, #8
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3306      	adds	r3, #6
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	18d3      	adds	r3, r2, r3
 80032be:	3304      	adds	r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	1dfa      	adds	r2, r7, #7
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	0011      	movs	r1, r2
 80032c8:	2203      	movs	r2, #3
 80032ca:	400a      	ands	r2, r1
 80032cc:	00d2      	lsls	r2, r2, #3
 80032ce:	21ff      	movs	r1, #255	; 0xff
 80032d0:	4091      	lsls	r1, r2
 80032d2:	000a      	movs	r2, r1
 80032d4:	43d2      	mvns	r2, r2
 80032d6:	401a      	ands	r2, r3
 80032d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	401a      	ands	r2, r3
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	0018      	movs	r0, r3
 80032e8:	2303      	movs	r3, #3
 80032ea:	4003      	ands	r3, r0
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f0:	4809      	ldr	r0, [pc, #36]	; (8003318 <__NVIC_SetPriority+0xd8>)
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	001c      	movs	r4, r3
 80032f8:	230f      	movs	r3, #15
 80032fa:	4023      	ands	r3, r4
 80032fc:	3b08      	subs	r3, #8
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	430a      	orrs	r2, r1
 8003302:	3306      	adds	r3, #6
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	18c3      	adds	r3, r0, r3
 8003308:	3304      	adds	r3, #4
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b003      	add	sp, #12
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	045b      	lsls	r3, r3, #17
 800332c:	429a      	cmp	r2, r3
 800332e:	d301      	bcc.n	8003334 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003330:	2301      	movs	r3, #1
 8003332:	e010      	b.n	8003356 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <SysTick_Config+0x44>)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	3a01      	subs	r2, #1
 800333a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333c:	2301      	movs	r3, #1
 800333e:	425b      	negs	r3, r3
 8003340:	2103      	movs	r1, #3
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff ff7c 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x44>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x44>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	210f      	movs	r1, #15
 8003370:	187b      	adds	r3, r7, r1
 8003372:	1c02      	adds	r2, r0, #0
 8003374:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	187b      	adds	r3, r7, r1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b25b      	sxtb	r3, r3
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff ff5d 	bl	8003240 <__NVIC_SetPriority>
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	0002      	movs	r2, r0
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7ff ff33 	bl	800320c <__NVIC_EnableIRQ>
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff ffaf 	bl	800331c <SysTick_Config>
 80033be:	0003      	movs	r3, r0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2221      	movs	r2, #33	; 0x21
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	2100      	movs	r1, #0
 80033e8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	210e      	movs	r1, #14
 80033fa:	438a      	bics	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	438a      	bics	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2101      	movs	r1, #1
 8003418:	4091      	lsls	r1, r2
 800341a:	000a      	movs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	210f      	movs	r1, #15
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2221      	movs	r2, #33	; 0x21
 800344c:	5c9b      	ldrb	r3, [r3, r2]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d006      	beq.n	8003462 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2204      	movs	r2, #4
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e028      	b.n	80034b4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	210e      	movs	r1, #14
 800346e:	438a      	bics	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	438a      	bics	r2, r1
 8003480:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2101      	movs	r1, #1
 800348c:	4091      	lsls	r1, r2
 800348e:	000a      	movs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	0010      	movs	r0, r2
 80034b2:	4798      	blx	r3
    } 
  }
  return status;
 80034b4:	230f      	movs	r3, #15
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d2:	e14f      	b.n	8003774 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4091      	lsls	r1, r2
 80034de:	000a      	movs	r2, r1
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d100      	bne.n	80034ec <HAL_GPIO_Init+0x28>
 80034ea:	e140      	b.n	800376e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2203      	movs	r2, #3
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d005      	beq.n	8003504 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2203      	movs	r2, #3
 80034fe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003500:	2b02      	cmp	r3, #2
 8003502:	d130      	bne.n	8003566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	409a      	lsls	r2, r3
 8003512:	0013      	movs	r3, r2
 8003514:	43da      	mvns	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	409a      	lsls	r2, r3
 8003526:	0013      	movs	r3, r2
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800353a:	2201      	movs	r2, #1
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
 8003540:	0013      	movs	r3, r2
 8003542:	43da      	mvns	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	2201      	movs	r2, #1
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
 8003558:	0013      	movs	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	4013      	ands	r3, r2
 800356e:	2b03      	cmp	r3, #3
 8003570:	d017      	beq.n	80035a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	43da      	mvns	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2203      	movs	r2, #3
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d123      	bne.n	80035f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	08da      	lsrs	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	58d3      	ldr	r3, [r2, r3]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2207      	movs	r2, #7
 80035c0:	4013      	ands	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	409a      	lsls	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	43da      	mvns	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2107      	movs	r1, #7
 80035da:	400b      	ands	r3, r1
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	409a      	lsls	r2, r3
 80035e0:	0013      	movs	r3, r2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	0092      	lsls	r2, r2, #2
 80035f2:	6939      	ldr	r1, [r7, #16]
 80035f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	409a      	lsls	r2, r3
 8003604:	0013      	movs	r3, r2
 8003606:	43da      	mvns	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2203      	movs	r2, #3
 8003614:	401a      	ands	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	0013      	movs	r3, r2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	029b      	lsls	r3, r3, #10
 8003632:	4013      	ands	r3, r2
 8003634:	d100      	bne.n	8003638 <HAL_GPIO_Init+0x174>
 8003636:	e09a      	b.n	800376e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003638:	4b54      	ldr	r3, [pc, #336]	; (800378c <HAL_GPIO_Init+0x2c8>)
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_GPIO_Init+0x2c8>)
 800363e:	2101      	movs	r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]
 8003644:	4b51      	ldr	r3, [pc, #324]	; (800378c <HAL_GPIO_Init+0x2c8>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2201      	movs	r2, #1
 800364a:	4013      	ands	r3, r2
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003650:	4a4f      	ldr	r2, [pc, #316]	; (8003790 <HAL_GPIO_Init+0x2cc>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	589b      	ldr	r3, [r3, r2]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2203      	movs	r2, #3
 8003662:	4013      	ands	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	220f      	movs	r2, #15
 8003668:	409a      	lsls	r2, r3
 800366a:	0013      	movs	r3, r2
 800366c:	43da      	mvns	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	2390      	movs	r3, #144	; 0x90
 8003678:	05db      	lsls	r3, r3, #23
 800367a:	429a      	cmp	r2, r3
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0x1e2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_GPIO_Init+0x2d0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00d      	beq.n	80036a2 <HAL_GPIO_Init+0x1de>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a43      	ldr	r2, [pc, #268]	; (8003798 <HAL_GPIO_Init+0x2d4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_GPIO_Init+0x1da>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a42      	ldr	r2, [pc, #264]	; (800379c <HAL_GPIO_Init+0x2d8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_GPIO_Init+0x1d6>
 8003696:	2303      	movs	r3, #3
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_Init+0x1e4>
 800369a:	2305      	movs	r3, #5
 800369c:	e004      	b.n	80036a8 <HAL_GPIO_Init+0x1e4>
 800369e:	2302      	movs	r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_Init+0x1e4>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_GPIO_Init+0x1e4>
 80036a6:	2300      	movs	r3, #0
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	2103      	movs	r1, #3
 80036ac:	400a      	ands	r2, r1
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4093      	lsls	r3, r2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036b8:	4935      	ldr	r1, [pc, #212]	; (8003790 <HAL_GPIO_Init+0x2cc>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	4013      	ands	r3, r2
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	4013      	ands	r3, r2
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	43da      	mvns	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	035b      	lsls	r3, r3, #13
 8003732:	4013      	ands	r3, r2
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	43da      	mvns	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	039b      	lsls	r3, r3, #14
 800375c:	4013      	ands	r3, r2
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_GPIO_Init+0x2dc>)
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	40da      	lsrs	r2, r3
 800377c:	1e13      	subs	r3, r2, #0
 800377e:	d000      	beq.n	8003782 <HAL_GPIO_Init+0x2be>
 8003780:	e6a8      	b.n	80034d4 <HAL_GPIO_Init+0x10>
  } 
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b006      	add	sp, #24
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	40010000 	.word	0x40010000
 8003794:	48000400 	.word	0x48000400
 8003798:	48000800 	.word	0x48000800
 800379c:	48000c00 	.word	0x48000c00
 80037a0:	40010400 	.word	0x40010400

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	0008      	movs	r0, r1
 80037ae:	0011      	movs	r1, r2
 80037b0:	1cbb      	adds	r3, r7, #2
 80037b2:	1c02      	adds	r2, r0, #0
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	1c7b      	adds	r3, r7, #1
 80037b8:	1c0a      	adds	r2, r1, #0
 80037ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037bc:	1c7b      	adds	r3, r7, #1
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037c4:	1cbb      	adds	r3, r7, #2
 80037c6:	881a      	ldrh	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ce:	1cbb      	adds	r3, r7, #2
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e301      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d100      	bne.n	80037fe <HAL_RCC_OscConfig+0x1e>
 80037fc:	e08d      	b.n	800391a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037fe:	4bc3      	ldr	r3, [pc, #780]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	220c      	movs	r2, #12
 8003804:	4013      	ands	r3, r2
 8003806:	2b04      	cmp	r3, #4
 8003808:	d00e      	beq.n	8003828 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800380a:	4bc0      	ldr	r3, [pc, #768]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	220c      	movs	r2, #12
 8003810:	4013      	ands	r3, r2
 8003812:	2b08      	cmp	r3, #8
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x64>
 8003816:	4bbd      	ldr	r3, [pc, #756]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	025b      	lsls	r3, r3, #9
 800381e:	401a      	ands	r2, r3
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	025b      	lsls	r3, r3, #9
 8003824:	429a      	cmp	r2, r3
 8003826:	d10d      	bne.n	8003844 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	4bb8      	ldr	r3, [pc, #736]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	029b      	lsls	r3, r3, #10
 8003830:	4013      	ands	r3, r2
 8003832:	d100      	bne.n	8003836 <HAL_RCC_OscConfig+0x56>
 8003834:	e070      	b.n	8003918 <HAL_RCC_OscConfig+0x138>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d000      	beq.n	8003840 <HAL_RCC_OscConfig+0x60>
 800383e:	e06b      	b.n	8003918 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e2d8      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x7c>
 800384c:	4baf      	ldr	r3, [pc, #700]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4bae      	ldr	r3, [pc, #696]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	0249      	lsls	r1, r1, #9
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e02f      	b.n	80038bc <HAL_RCC_OscConfig+0xdc>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x9e>
 8003864:	4ba9      	ldr	r3, [pc, #676]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4ba8      	ldr	r3, [pc, #672]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800386a:	49a9      	ldr	r1, [pc, #676]	; (8003b10 <HAL_RCC_OscConfig+0x330>)
 800386c:	400a      	ands	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	4ba6      	ldr	r3, [pc, #664]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4ba5      	ldr	r3, [pc, #660]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003876:	49a7      	ldr	r1, [pc, #668]	; (8003b14 <HAL_RCC_OscConfig+0x334>)
 8003878:	400a      	ands	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e01e      	b.n	80038bc <HAL_RCC_OscConfig+0xdc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b05      	cmp	r3, #5
 8003884:	d10e      	bne.n	80038a4 <HAL_RCC_OscConfig+0xc4>
 8003886:	4ba1      	ldr	r3, [pc, #644]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4ba0      	ldr	r3, [pc, #640]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	02c9      	lsls	r1, r1, #11
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	4b9d      	ldr	r3, [pc, #628]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b9c      	ldr	r3, [pc, #624]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	0249      	lsls	r1, r1, #9
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xdc>
 80038a4:	4b99      	ldr	r3, [pc, #612]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b98      	ldr	r3, [pc, #608]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80038aa:	4999      	ldr	r1, [pc, #612]	; (8003b10 <HAL_RCC_OscConfig+0x330>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	4b96      	ldr	r3, [pc, #600]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b95      	ldr	r3, [pc, #596]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80038b6:	4997      	ldr	r1, [pc, #604]	; (8003b14 <HAL_RCC_OscConfig+0x334>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d014      	beq.n	80038ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe ffd8 	bl	8002878 <HAL_GetTick>
 80038c8:	0003      	movs	r3, r0
 80038ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ce:	f7fe ffd3 	bl	8002878 <HAL_GetTick>
 80038d2:	0002      	movs	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	; 0x64
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e28a      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e0:	4b8a      	ldr	r3, [pc, #552]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4013      	ands	r3, r2
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0xee>
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe ffc3 	bl	8002878 <HAL_GetTick>
 80038f2:	0003      	movs	r3, r0
 80038f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe ffbe 	bl	8002878 <HAL_GetTick>
 80038fc:	0002      	movs	r2, r0
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e275      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	029b      	lsls	r3, r3, #10
 8003912:	4013      	ands	r3, r2
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x118>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2202      	movs	r2, #2
 8003920:	4013      	ands	r3, r2
 8003922:	d100      	bne.n	8003926 <HAL_RCC_OscConfig+0x146>
 8003924:	e069      	b.n	80039fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003926:	4b79      	ldr	r3, [pc, #484]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	220c      	movs	r2, #12
 800392c:	4013      	ands	r3, r2
 800392e:	d00b      	beq.n	8003948 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003930:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	220c      	movs	r2, #12
 8003936:	4013      	ands	r3, r2
 8003938:	2b08      	cmp	r3, #8
 800393a:	d11c      	bne.n	8003976 <HAL_RCC_OscConfig+0x196>
 800393c:	4b73      	ldr	r3, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	4013      	ands	r3, r2
 8003946:	d116      	bne.n	8003976 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003948:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x17e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e24b      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	22f8      	movs	r2, #248	; 0xf8
 8003964:	4393      	bics	r3, r2
 8003966:	0019      	movs	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	00da      	lsls	r2, r3, #3
 800396e:	4b67      	ldr	r3, [pc, #412]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003974:	e041      	b.n	80039fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d024      	beq.n	80039c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397e:	4b63      	ldr	r3, [pc, #396]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b62      	ldr	r3, [pc, #392]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003984:	2101      	movs	r1, #1
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe ff75 	bl	8002878 <HAL_GetTick>
 800398e:	0003      	movs	r3, r0
 8003990:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe ff70 	bl	8002878 <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e227      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b59      	ldr	r3, [pc, #356]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2202      	movs	r2, #2
 80039ac:	4013      	ands	r3, r2
 80039ae:	d0f1      	beq.n	8003994 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	22f8      	movs	r2, #248	; 0xf8
 80039b6:	4393      	bics	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	4b52      	ldr	r3, [pc, #328]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e018      	b.n	80039fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c8:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80039ce:	2101      	movs	r1, #1
 80039d0:	438a      	bics	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe ff50 	bl	8002878 <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039de:	f7fe ff4b 	bl	8002878 <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e202      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f0:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2202      	movs	r2, #2
 80039f6:	4013      	ands	r3, r2
 80039f8:	d1f1      	bne.n	80039de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2208      	movs	r2, #8
 8003a00:	4013      	ands	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d019      	beq.n	8003a40 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a10:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	430a      	orrs	r2, r1
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a18:	f7fe ff2e 	bl	8002878 <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a22:	f7fe ff29 	bl	8002878 <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1e0      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a34:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d0f1      	beq.n	8003a22 <HAL_RCC_OscConfig+0x242>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe ff14 	bl	8002878 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fe ff0f 	bl	8002878 <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e1c6      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d1f1      	bne.n	8003a56 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <HAL_RCC_OscConfig+0x29e>
 8003a7c:	e0b4      	b.n	8003be8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7e:	201f      	movs	r0, #31
 8003a80:	183b      	adds	r3, r7, r0
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	055b      	lsls	r3, r3, #21
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d110      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	0549      	lsls	r1, r1, #21
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	055b      	lsls	r3, r3, #21
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b18      	ldr	r3, [pc, #96]	; (8003b18 <HAL_RCC_OscConfig+0x338>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	d11a      	bne.n	8003af6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac0:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCC_OscConfig+0x338>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_RCC_OscConfig+0x338>)
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	0049      	lsls	r1, r1, #1
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fe fed3 	bl	8002878 <HAL_GetTick>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad8:	f7fe fece 	bl	8002878 <HAL_GetTick>
 8003adc:	0002      	movs	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e185      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_OscConfig+0x338>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4013      	ands	r3, r2
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10e      	bne.n	8003b1c <HAL_RCC_OscConfig+0x33c>
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <HAL_RCC_OscConfig+0x32c>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	621a      	str	r2, [r3, #32]
 8003b0a:	e035      	b.n	8003b78 <HAL_RCC_OscConfig+0x398>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	fffeffff 	.word	0xfffeffff
 8003b14:	fffbffff 	.word	0xfffbffff
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10c      	bne.n	8003b3e <HAL_RCC_OscConfig+0x35e>
 8003b24:	4bb6      	ldr	r3, [pc, #728]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	4bb5      	ldr	r3, [pc, #724]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	621a      	str	r2, [r3, #32]
 8003b30:	4bb3      	ldr	r3, [pc, #716]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	4bb2      	ldr	r3, [pc, #712]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b36:	2104      	movs	r1, #4
 8003b38:	438a      	bics	r2, r1
 8003b3a:	621a      	str	r2, [r3, #32]
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCC_OscConfig+0x398>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x380>
 8003b46:	4bae      	ldr	r3, [pc, #696]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b48:	6a1a      	ldr	r2, [r3, #32]
 8003b4a:	4bad      	ldr	r3, [pc, #692]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	621a      	str	r2, [r3, #32]
 8003b52:	4bab      	ldr	r3, [pc, #684]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	4baa      	ldr	r3, [pc, #680]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	621a      	str	r2, [r3, #32]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0x398>
 8003b60:	4ba7      	ldr	r3, [pc, #668]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	4ba6      	ldr	r3, [pc, #664]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	438a      	bics	r2, r1
 8003b6a:	621a      	str	r2, [r3, #32]
 8003b6c:	4ba4      	ldr	r3, [pc, #656]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	4ba3      	ldr	r3, [pc, #652]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003b72:	2104      	movs	r1, #4
 8003b74:	438a      	bics	r2, r1
 8003b76:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d014      	beq.n	8003baa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fe7a 	bl	8002878 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe fe75 	bl	8002878 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a9b      	ldr	r2, [pc, #620]	; (8003e04 <HAL_RCC_OscConfig+0x624>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e12b      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	4b98      	ldr	r3, [pc, #608]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x3aa>
 8003ba8:	e013      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fe65 	bl	8002878 <HAL_GetTick>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fe60 	bl	8002878 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a91      	ldr	r2, [pc, #580]	; (8003e04 <HAL_RCC_OscConfig+0x624>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e116      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bd2:	231f      	movs	r3, #31
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	4b87      	ldr	r3, [pc, #540]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003be2:	4989      	ldr	r1, [pc, #548]	; (8003e08 <HAL_RCC_OscConfig+0x628>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2210      	movs	r2, #16
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d12a      	bne.n	8003c50 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bfa:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfe:	4b80      	ldr	r3, [pc, #512]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c00:	2104      	movs	r1, #4
 8003c02:	430a      	orrs	r2, r1
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c06:	4b7e      	ldr	r3, [pc, #504]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0a:	4b7d      	ldr	r3, [pc, #500]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fe fe31 	bl	8002878 <HAL_GetTick>
 8003c16:	0003      	movs	r3, r0
 8003c18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c1c:	f7fe fe2c 	bl	8002878 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0e3      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c2e:	4b74      	ldr	r3, [pc, #464]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	2202      	movs	r2, #2
 8003c34:	4013      	ands	r3, r2
 8003c36:	d0f1      	beq.n	8003c1c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c38:	4b71      	ldr	r3, [pc, #452]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	22f8      	movs	r2, #248	; 0xf8
 8003c3e:	4393      	bics	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	00da      	lsls	r2, r3, #3
 8003c48:	4b6d      	ldr	r3, [pc, #436]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c4e:	e034      	b.n	8003cba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	3305      	adds	r3, #5
 8003c56:	d111      	bne.n	8003c7c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c58:	4b69      	ldr	r3, [pc, #420]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5c:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c5e:	2104      	movs	r1, #4
 8003c60:	438a      	bics	r2, r1
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c64:	4b66      	ldr	r3, [pc, #408]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	22f8      	movs	r2, #248	; 0xf8
 8003c6a:	4393      	bics	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	00da      	lsls	r2, r3, #3
 8003c74:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c76:	430a      	orrs	r2, r1
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7a:	e01e      	b.n	8003cba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c7c:	4b60      	ldr	r3, [pc, #384]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c80:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c82:	2104      	movs	r1, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003c88:	4b5d      	ldr	r3, [pc, #372]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8c:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003c8e:	2101      	movs	r1, #1
 8003c90:	438a      	bics	r2, r1
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7fe fdf0 	bl	8002878 <HAL_GetTick>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c9e:	f7fe fdeb 	bl	8002878 <HAL_GetTick>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0a2      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d1f1      	bne.n	8003c9e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d100      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x4e4>
 8003cc2:	e097      	b.n	8003df4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc4:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	220c      	movs	r2, #12
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d100      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x4f2>
 8003cd0:	e06b      	b.n	8003daa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d14c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003ce0:	494a      	ldr	r1, [pc, #296]	; (8003e0c <HAL_RCC_OscConfig+0x62c>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fdc7 	bl	8002878 <HAL_GetTick>
 8003cea:	0003      	movs	r3, r0
 8003cec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fe fdc2 	bl	8002878 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e079      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d02:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	049b      	lsls	r3, r3, #18
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d0e:	4b3c      	ldr	r3, [pc, #240]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	220f      	movs	r2, #15
 8003d14:	4393      	bics	r3, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b38      	ldr	r3, [pc, #224]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4a3a      	ldr	r2, [pc, #232]	; (8003e10 <HAL_RCC_OscConfig+0x630>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	431a      	orrs	r2, r3
 8003d36:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	0449      	lsls	r1, r1, #17
 8003d46:	430a      	orrs	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fd95 	bl	8002878 <HAL_GetTick>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fd90 	bl	8002878 <HAL_GetTick>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e047      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	049b      	lsls	r3, r3, #18
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x574>
 8003d72:	e03f      	b.n	8003df4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d7a:	4924      	ldr	r1, [pc, #144]	; (8003e0c <HAL_RCC_OscConfig+0x62c>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fe fd7a 	bl	8002878 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fe fd75 	bl	8002878 <HAL_GetTick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e02c      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	049b      	lsls	r3, r3, #18
 8003da4:	4013      	ands	r3, r2
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x5aa>
 8003da8:	e024      	b.n	8003df4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e01f      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_RCC_OscConfig+0x620>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	025b      	lsls	r3, r3, #9
 8003dc8:	401a      	ands	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d10e      	bne.n	8003df0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	23f0      	movs	r3, #240	; 0xf0
 8003de4:	039b      	lsls	r3, r3, #14
 8003de6:	401a      	ands	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b008      	add	sp, #32
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	40021000 	.word	0x40021000
 8003e04:	00001388 	.word	0x00001388
 8003e08:	efffffff 	.word	0xefffffff
 8003e0c:	feffffff 	.word	0xfeffffff
 8003e10:	ffc2ffff 	.word	0xffc2ffff

08003e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0b3      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b5b      	ldr	r3, [pc, #364]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4013      	ands	r3, r2
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d911      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b58      	ldr	r3, [pc, #352]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	0019      	movs	r1, r3
 8003e40:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e09a      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4013      	ands	r3, r2
 8003e62:	d015      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d006      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e6e:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003e74:	21e0      	movs	r1, #224	; 0xe0
 8003e76:	00c9      	lsls	r1, r1, #3
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	22f0      	movs	r2, #240	; 0xf0
 8003e82:	4393      	bics	r3, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2201      	movs	r2, #1
 8003e96:	4013      	ands	r3, r2
 8003e98:	d040      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d114      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06e      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	049b      	lsls	r3, r3, #18
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e062      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e05b      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed8:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	4393      	bics	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eec:	f7fe fcc4 	bl	8002878 <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef4:	e009      	b.n	8003f0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef6:	f7fe fcbf 	bl	8002878 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_RCC_ClockConfig+0x18c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e042      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	220c      	movs	r2, #12
 8003f10:	401a      	ands	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1ec      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d211      	bcs.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4393      	bics	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <HAL_RCC_ClockConfig+0x184>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	4013      	ands	r3, r2
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e020      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2204      	movs	r2, #4
 8003f54:	4013      	ands	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <HAL_RCC_ClockConfig+0x190>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f6c:	f000 f820 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f70:	0001      	movs	r1, r0
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x188>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	220f      	movs	r2, #15
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x194>)
 8003f7e:	5cd3      	ldrb	r3, [r2, r3]
 8003f80:	000a      	movs	r2, r1
 8003f82:	40da      	lsrs	r2, r3
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x198>)
 8003f86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7fe fc2f 	bl	80027ec <HAL_InitTick>
  
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b004      	add	sp, #16
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	00001388 	.word	0x00001388
 8003fa4:	fffff8ff 	.word	0xfffff8ff
 8003fa8:	08006ae4 	.word	0x08006ae4
 8003fac:	20000404 	.word	0x20000404

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b08f      	sub	sp, #60	; 0x3c
 8003fb4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003fb6:	2314      	movs	r3, #20
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fbe:	c313      	stmia	r3!, {r0, r1, r4}
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	4a29      	ldr	r2, [pc, #164]	; (800406c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fca:	c313      	stmia	r3!, {r0, r1, r4}
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd8:	2300      	movs	r3, #0
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	220c      	movs	r2, #12
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d002      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x4a>
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d003      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x50>
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ffe:	e02d      	b.n	800405c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	0c9b      	lsrs	r3, r3, #18
 8004004:	220f      	movs	r2, #15
 8004006:	4013      	ands	r3, r2
 8004008:	2214      	movs	r2, #20
 800400a:	18ba      	adds	r2, r7, r2
 800400c:	5cd3      	ldrb	r3, [r2, r3]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	220f      	movs	r2, #15
 8004016:	4013      	ands	r3, r2
 8004018:	1d3a      	adds	r2, r7, #4
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800401e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	025b      	lsls	r3, r3, #9
 8004024:	4013      	ands	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800402a:	4812      	ldr	r0, [pc, #72]	; (8004074 <HAL_RCC_GetSysClockFreq+0xc4>)
 800402c:	f7fc f86c 	bl	8000108 <__udivsi3>
 8004030:	0003      	movs	r3, r0
 8004032:	001a      	movs	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	4353      	muls	r3, r2
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
 800403a:	e009      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800403c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403e:	000a      	movs	r2, r1
 8004040:	0152      	lsls	r2, r2, #5
 8004042:	1a52      	subs	r2, r2, r1
 8004044:	0193      	lsls	r3, r2, #6
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	185b      	adds	r3, r3, r1
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004054:	e002      	b.n	800405c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800405a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b00f      	add	sp, #60	; 0x3c
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	08006a44 	.word	0x08006a44
 800406c:	08006a54 	.word	0x08006a54
 8004070:	40021000 	.word	0x40021000
 8004074:	007a1200 	.word	0x007a1200

08004078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <HAL_RCC_GetHCLKFreq+0x10>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000404 	.word	0x20000404

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004090:	f7ff fff2 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004094:	0001      	movs	r1, r0
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	2207      	movs	r2, #7
 800409e:	4013      	ands	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	40d9      	lsrs	r1, r3
 80040a6:	000b      	movs	r3, r1
}    
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	08006af4 	.word	0x08006af4

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	025b      	lsls	r3, r3, #9
 80040d0:	4013      	ands	r3, r2
 80040d2:	d100      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80040d4:	e08e      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2017      	movs	r0, #23
 80040d8:	183b      	adds	r3, r7, r0
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040de:	4b5f      	ldr	r3, [pc, #380]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	055b      	lsls	r3, r3, #21
 80040e6:	4013      	ands	r3, r2
 80040e8:	d110      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	4b5c      	ldr	r3, [pc, #368]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	4b5b      	ldr	r3, [pc, #364]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	0549      	lsls	r1, r1, #21
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
 80040f8:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	055b      	lsls	r3, r3, #21
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	183b      	adds	r3, r7, r0
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b54      	ldr	r3, [pc, #336]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d11a      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b50      	ldr	r3, [pc, #320]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	0049      	lsls	r1, r1, #1
 8004122:	430a      	orrs	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fe fba7 	bl	8002878 <HAL_GetTick>
 800412a:	0003      	movs	r3, r0
 800412c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fe fba2 	bl	8002878 <HAL_GetTick>
 8004134:	0002      	movs	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e087      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d0f0      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800414e:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004150:	6a1a      	ldr	r2, [r3, #32]
 8004152:	23c0      	movs	r3, #192	; 0xc0
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4013      	ands	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d034      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	23c0      	movs	r3, #192	; 0xc0
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4013      	ands	r3, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d02c      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004170:	4b3a      	ldr	r3, [pc, #232]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800417c:	6a1a      	ldr	r2, [r3, #32]
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	0249      	lsls	r1, r1, #9
 8004184:	430a      	orrs	r2, r1
 8004186:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004188:	4b34      	ldr	r3, [pc, #208]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	4b33      	ldr	r3, [pc, #204]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800418e:	4936      	ldr	r1, [pc, #216]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004190:	400a      	ands	r2, r1
 8004192:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	4013      	ands	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fe fb69 	bl	8002878 <HAL_GetTick>
 80041a6:	0003      	movs	r3, r0
 80041a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	e009      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fe fb64 	bl	8002878 <HAL_GetTick>
 80041b0:	0002      	movs	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e048      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041de:	2317      	movs	r3, #23
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e8:	4b1c      	ldr	r3, [pc, #112]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041ee:	4920      	ldr	r1, [pc, #128]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041fe:	4b17      	ldr	r3, [pc, #92]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2203      	movs	r2, #3
 8004204:	4393      	bics	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800420e:	430a      	orrs	r2, r1
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2220      	movs	r2, #32
 8004218:	4013      	ands	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2210      	movs	r2, #16
 8004222:	4393      	bics	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800422c:	430a      	orrs	r2, r1
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4013      	ands	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	2240      	movs	r2, #64	; 0x40
 8004242:	4393      	bics	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800424c:	430a      	orrs	r2, r1
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	0018      	movs	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	b006      	add	sp, #24
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	40021000 	.word	0x40021000
 8004260:	40007000 	.word	0x40007000
 8004264:	fffffcff 	.word	0xfffffcff
 8004268:	fffeffff 	.word	0xfffeffff
 800426c:	00001388 	.word	0x00001388
 8004270:	efffffff 	.word	0xefffffff

08004274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e042      	b.n	800430c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	223d      	movs	r2, #61	; 0x3d
 800428a:	5c9b      	ldrb	r3, [r3, r2]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	223c      	movs	r2, #60	; 0x3c
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0018      	movs	r0, r3
 800429e:	f7fe f941 	bl	8002524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223d      	movs	r2, #61	; 0x3d
 80042a6:	2102      	movs	r1, #2
 80042a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	0019      	movs	r1, r3
 80042b4:	0010      	movs	r0, r2
 80042b6:	f000 fcfd 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2246      	movs	r2, #70	; 0x46
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	223e      	movs	r2, #62	; 0x3e
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223f      	movs	r2, #63	; 0x3f
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2240      	movs	r2, #64	; 0x40
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2241      	movs	r2, #65	; 0x41
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2242      	movs	r2, #66	; 0x42
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2243      	movs	r2, #67	; 0x43
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2244      	movs	r2, #68	; 0x44
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2245      	movs	r2, #69	; 0x45
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223d      	movs	r2, #61	; 0x3d
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	223d      	movs	r2, #61	; 0x3d
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e03b      	b.n	80043a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	223d      	movs	r2, #61	; 0x3d
 8004330:	2102      	movs	r1, #2
 8004332:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2101      	movs	r1, #1
 8004340:	430a      	orrs	r2, r1
 8004342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_TIM_Base_Start_IT+0x98>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00f      	beq.n	800436e <HAL_TIM_Base_Start_IT+0x5a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	05db      	lsls	r3, r3, #23
 8004356:	429a      	cmp	r2, r3
 8004358:	d009      	beq.n	800436e <HAL_TIM_Base_Start_IT+0x5a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_TIM_Base_Start_IT+0x5a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d111      	bne.n	8004392 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2207      	movs	r2, #7
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d010      	beq.n	80043a2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	e007      	b.n	80043a2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40014000 	.word	0x40014000

080043b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e042      	b.n	8004450 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223d      	movs	r2, #61	; 0x3d
 80043ce:	5c9b      	ldrb	r3, [r3, r2]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	223c      	movs	r2, #60	; 0x3c
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 f839 	bl	8004458 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	223d      	movs	r2, #61	; 0x3d
 80043ea:	2102      	movs	r1, #2
 80043ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	0019      	movs	r1, r3
 80043f8:	0010      	movs	r0, r2
 80043fa:	f000 fc5b 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2246      	movs	r2, #70	; 0x46
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	223e      	movs	r2, #62	; 0x3e
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	223f      	movs	r2, #63	; 0x3f
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2240      	movs	r2, #64	; 0x40
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2241      	movs	r2, #65	; 0x41
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2242      	movs	r2, #66	; 0x42
 800442a:	2101      	movs	r1, #1
 800442c:	5499      	strb	r1, [r3, r2]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2243      	movs	r2, #67	; 0x43
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2244      	movs	r2, #68	; 0x44
 800443a:	2101      	movs	r1, #1
 800443c:	5499      	strb	r1, [r3, r2]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2245      	movs	r2, #69	; 0x45
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223d      	movs	r2, #61	; 0x3d
 800444a:	2101      	movs	r1, #1
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	230f      	movs	r3, #15
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <HAL_TIM_OC_Start_IT+0x2a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	223e      	movs	r2, #62	; 0x3e
 8004484:	5c9b      	ldrb	r3, [r3, r2]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	4193      	sbcs	r3, r2
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e01f      	b.n	80044d2 <HAL_TIM_OC_Start_IT+0x6a>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d108      	bne.n	80044aa <HAL_TIM_OC_Start_IT+0x42>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	223f      	movs	r2, #63	; 0x3f
 800449c:	5c9b      	ldrb	r3, [r3, r2]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	1e5a      	subs	r2, r3, #1
 80044a4:	4193      	sbcs	r3, r2
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e013      	b.n	80044d2 <HAL_TIM_OC_Start_IT+0x6a>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d108      	bne.n	80044c2 <HAL_TIM_OC_Start_IT+0x5a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	5c9b      	ldrb	r3, [r3, r2]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	4193      	sbcs	r3, r2
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e007      	b.n	80044d2 <HAL_TIM_OC_Start_IT+0x6a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2241      	movs	r2, #65	; 0x41
 80044c6:	5c9b      	ldrb	r3, [r3, r2]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	4193      	sbcs	r3, r2
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0b7      	b.n	800464a <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <HAL_TIM_OC_Start_IT+0x82>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	223e      	movs	r2, #62	; 0x3e
 80044e4:	2102      	movs	r1, #2
 80044e6:	5499      	strb	r1, [r3, r2]
 80044e8:	e013      	b.n	8004512 <HAL_TIM_OC_Start_IT+0xaa>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_OC_Start_IT+0x92>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	223f      	movs	r2, #63	; 0x3f
 80044f4:	2102      	movs	r1, #2
 80044f6:	5499      	strb	r1, [r3, r2]
 80044f8:	e00b      	b.n	8004512 <HAL_TIM_OC_Start_IT+0xaa>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d104      	bne.n	800450a <HAL_TIM_OC_Start_IT+0xa2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2240      	movs	r2, #64	; 0x40
 8004504:	2102      	movs	r1, #2
 8004506:	5499      	strb	r1, [r3, r2]
 8004508:	e003      	b.n	8004512 <HAL_TIM_OC_Start_IT+0xaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2241      	movs	r2, #65	; 0x41
 800450e:	2102      	movs	r1, #2
 8004510:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d02a      	beq.n	800456e <HAL_TIM_OC_Start_IT+0x106>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b0c      	cmp	r3, #12
 800451c:	d830      	bhi.n	8004580 <HAL_TIM_OC_Start_IT+0x118>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d01b      	beq.n	800455c <HAL_TIM_OC_Start_IT+0xf4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d82a      	bhi.n	8004580 <HAL_TIM_OC_Start_IT+0x118>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_TIM_OC_Start_IT+0xd0>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d009      	beq.n	800454a <HAL_TIM_OC_Start_IT+0xe2>
 8004536:	e023      	b.n	8004580 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2102      	movs	r1, #2
 8004544:	430a      	orrs	r2, r1
 8004546:	60da      	str	r2, [r3, #12]
      break;
 8004548:	e01f      	b.n	800458a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2104      	movs	r1, #4
 8004556:	430a      	orrs	r2, r1
 8004558:	60da      	str	r2, [r3, #12]
      break;
 800455a:	e016      	b.n	800458a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2108      	movs	r1, #8
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]
      break;
 800456c:	e00d      	b.n	800458a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2110      	movs	r1, #16
 800457a:	430a      	orrs	r2, r1
 800457c:	60da      	str	r2, [r3, #12]
      break;
 800457e:	e004      	b.n	800458a <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004580:	230f      	movs	r3, #15
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
      break;
 8004588:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800458a:	230f      	movs	r3, #15
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d157      	bne.n	8004644 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	0018      	movs	r0, r3
 800459e:	f000 fe9f 	bl	80052e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <HAL_TIM_OC_Start_IT+0x1ec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIM_OC_Start_IT+0x162>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a29      	ldr	r2, [pc, #164]	; (8004658 <HAL_TIM_OC_Start_IT+0x1f0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIM_OC_Start_IT+0x162>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a28      	ldr	r2, [pc, #160]	; (800465c <HAL_TIM_OC_Start_IT+0x1f4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIM_OC_Start_IT+0x162>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <HAL_TIM_OC_Start_IT+0x1f8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_OC_Start_IT+0x166>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_OC_Start_IT+0x168>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	0209      	lsls	r1, r1, #8
 80045e2:	430a      	orrs	r2, r1
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_TIM_OC_Start_IT+0x1ec>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00f      	beq.n	8004610 <HAL_TIM_OC_Start_IT+0x1a8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d009      	beq.n	8004610 <HAL_TIM_OC_Start_IT+0x1a8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIM_OC_Start_IT+0x1a8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a13      	ldr	r2, [pc, #76]	; (8004658 <HAL_TIM_OC_Start_IT+0x1f0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d111      	bne.n	8004634 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2207      	movs	r2, #7
 8004618:	4013      	ands	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b06      	cmp	r3, #6
 8004620:	d010      	beq.n	8004644 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	e007      	b.n	8004644 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2101      	movs	r1, #1
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004644:	230f      	movs	r3, #15
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40000400 	.word	0x40000400

08004668 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	230f      	movs	r3, #15
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d02a      	beq.n	80046d6 <HAL_TIM_OC_Stop_IT+0x6e>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d830      	bhi.n	80046e8 <HAL_TIM_OC_Stop_IT+0x80>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d01b      	beq.n	80046c4 <HAL_TIM_OC_Stop_IT+0x5c>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b08      	cmp	r3, #8
 8004690:	d82a      	bhi.n	80046e8 <HAL_TIM_OC_Stop_IT+0x80>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_TIM_OC_Stop_IT+0x38>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d009      	beq.n	80046b2 <HAL_TIM_OC_Stop_IT+0x4a>
 800469e:	e023      	b.n	80046e8 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2102      	movs	r1, #2
 80046ac:	438a      	bics	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
      break;
 80046b0:	e01f      	b.n	80046f2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2104      	movs	r1, #4
 80046be:	438a      	bics	r2, r1
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e016      	b.n	80046f2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2108      	movs	r1, #8
 80046d0:	438a      	bics	r2, r1
 80046d2:	60da      	str	r2, [r3, #12]
      break;
 80046d4:	e00d      	b.n	80046f2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2110      	movs	r1, #16
 80046e2:	438a      	bics	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
      break;
 80046e6:	e004      	b.n	80046f2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80046e8:	230f      	movs	r3, #15
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
      break;
 80046f0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80046f2:	230f      	movs	r3, #15
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d000      	beq.n	80046fe <HAL_TIM_OC_Stop_IT+0x96>
 80046fc:	e063      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x15e>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	0018      	movs	r0, r3
 8004708:	f000 fdea 	bl	80052e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	; (80047d4 <HAL_TIM_OC_Stop_IT+0x16c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_TIM_OC_Stop_IT+0xcc>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2f      	ldr	r2, [pc, #188]	; (80047d8 <HAL_TIM_OC_Stop_IT+0x170>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_TIM_OC_Stop_IT+0xcc>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2d      	ldr	r2, [pc, #180]	; (80047dc <HAL_TIM_OC_Stop_IT+0x174>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIM_OC_Stop_IT+0xcc>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2c      	ldr	r2, [pc, #176]	; (80047e0 <HAL_TIM_OC_Stop_IT+0x178>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_TIM_OC_Stop_IT+0xd0>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_TIM_OC_Stop_IT+0xd2>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d013      	beq.n	8004766 <HAL_TIM_OC_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <HAL_TIM_OC_Stop_IT+0x17c>)
 8004746:	4013      	ands	r3, r2
 8004748:	d10d      	bne.n	8004766 <HAL_TIM_OC_Stop_IT+0xfe>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <HAL_TIM_OC_Stop_IT+0x180>)
 8004752:	4013      	ands	r3, r2
 8004754:	d107      	bne.n	8004766 <HAL_TIM_OC_Stop_IT+0xfe>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4922      	ldr	r1, [pc, #136]	; (80047ec <HAL_TIM_OC_Stop_IT+0x184>)
 8004762:	400a      	ands	r2, r1
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_TIM_OC_Stop_IT+0x17c>)
 800476e:	4013      	ands	r3, r2
 8004770:	d10d      	bne.n	800478e <HAL_TIM_OC_Stop_IT+0x126>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_TIM_OC_Stop_IT+0x180>)
 800477a:	4013      	ands	r3, r2
 800477c:	d107      	bne.n	800478e <HAL_TIM_OC_Stop_IT+0x126>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2101      	movs	r1, #1
 800478a:	438a      	bics	r2, r1
 800478c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_TIM_OC_Stop_IT+0x136>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	223e      	movs	r2, #62	; 0x3e
 8004798:	2101      	movs	r1, #1
 800479a:	5499      	strb	r1, [r3, r2]
 800479c:	e013      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x15e>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_OC_Stop_IT+0x146>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	223f      	movs	r2, #63	; 0x3f
 80047a8:	2101      	movs	r1, #1
 80047aa:	5499      	strb	r1, [r3, r2]
 80047ac:	e00b      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x15e>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d104      	bne.n	80047be <HAL_TIM_OC_Stop_IT+0x156>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	2101      	movs	r1, #1
 80047ba:	5499      	strb	r1, [r3, r2]
 80047bc:	e003      	b.n	80047c6 <HAL_TIM_OC_Stop_IT+0x15e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2241      	movs	r2, #65	; 0x41
 80047c2:	2101      	movs	r1, #1
 80047c4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80047c6:	230f      	movs	r3, #15
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	781b      	ldrb	r3, [r3, #0]
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b004      	add	sp, #16
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	00001111 	.word	0x00001111
 80047e8:	00000444 	.word	0x00000444
 80047ec:	ffff7fff 	.word	0xffff7fff

080047f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2202      	movs	r2, #2
 8004800:	4013      	ands	r3, r2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d124      	bne.n	8004850 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2202      	movs	r2, #2
 800480e:	4013      	ands	r3, r2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d11d      	bne.n	8004850 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2203      	movs	r2, #3
 800481a:	4252      	negs	r2, r2
 800481c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2203      	movs	r2, #3
 800482c:	4013      	ands	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 fa26 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004838:	e007      	b.n	800484a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fa19 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fa25 	bl	8004c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2204      	movs	r2, #4
 8004858:	4013      	ands	r3, r2
 800485a:	2b04      	cmp	r3, #4
 800485c:	d125      	bne.n	80048aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2204      	movs	r2, #4
 8004866:	4013      	ands	r3, r2
 8004868:	2b04      	cmp	r3, #4
 800486a:	d11e      	bne.n	80048aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2205      	movs	r2, #5
 8004872:	4252      	negs	r2, r2
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	23c0      	movs	r3, #192	; 0xc0
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4013      	ands	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f9f9 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004892:	e007      	b.n	80048a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0018      	movs	r0, r3
 8004898:	f000 f9ec 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0018      	movs	r0, r3
 80048a0:	f000 f9f8 	bl	8004c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2208      	movs	r2, #8
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d124      	bne.n	8004902 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2208      	movs	r2, #8
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d11d      	bne.n	8004902 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2209      	movs	r2, #9
 80048cc:	4252      	negs	r2, r2
 80048ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2203      	movs	r2, #3
 80048de:	4013      	ands	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 f9cd 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 80048ea:	e007      	b.n	80048fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 f9c0 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 f9cc 	bl	8004c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2210      	movs	r2, #16
 800490a:	4013      	ands	r3, r2
 800490c:	2b10      	cmp	r3, #16
 800490e:	d125      	bne.n	800495c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2210      	movs	r2, #16
 8004918:	4013      	ands	r3, r2
 800491a:	2b10      	cmp	r3, #16
 800491c:	d11e      	bne.n	800495c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2211      	movs	r2, #17
 8004924:	4252      	negs	r2, r2
 8004926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2208      	movs	r2, #8
 800492c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	23c0      	movs	r3, #192	; 0xc0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4013      	ands	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0018      	movs	r0, r3
 8004940:	f000 f9a0 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004944:	e007      	b.n	8004956 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f000 f993 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f99f 	bl	8004c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2201      	movs	r2, #1
 8004964:	4013      	ands	r3, r2
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10f      	bne.n	800498a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	2b01      	cmp	r3, #1
 8004976:	d108      	bne.n	800498a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2202      	movs	r2, #2
 800497e:	4252      	negs	r2, r2
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fc fdfb 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2280      	movs	r2, #128	; 0x80
 8004992:	4013      	ands	r3, r2
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d10f      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d108      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2281      	movs	r2, #129	; 0x81
 80049ac:	4252      	negs	r2, r2
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 fd7c 	bl	80054b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d10f      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d108      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2241      	movs	r2, #65	; 0x41
 80049da:	4252      	negs	r2, r2
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 f95f 	bl	8004ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2220      	movs	r2, #32
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d10f      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d108      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2221      	movs	r2, #33	; 0x21
 8004a08:	4252      	negs	r2, r2
 8004a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fd46 	bl	80054a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2317      	movs	r3, #23
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	223c      	movs	r2, #60	; 0x3c
 8004a34:	5c9b      	ldrb	r3, [r3, r2]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_OC_ConfigChannel+0x22>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e042      	b.n	8004ac4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	223c      	movs	r2, #60	; 0x3c
 8004a42:	2101      	movs	r1, #1
 8004a44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d027      	beq.n	8004a9c <HAL_TIM_OC_ConfigChannel+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d82c      	bhi.n	8004aac <HAL_TIM_OC_ConfigChannel+0x90>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d019      	beq.n	8004a8c <HAL_TIM_OC_ConfigChannel+0x70>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d826      	bhi.n	8004aac <HAL_TIM_OC_ConfigChannel+0x90>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_OC_ConfigChannel+0x50>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d008      	beq.n	8004a7c <HAL_TIM_OC_ConfigChannel+0x60>
 8004a6a:	e01f      	b.n	8004aac <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	0011      	movs	r1, r2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 f99d 	bl	8004db4 <TIM_OC1_SetConfig>
      break;
 8004a7a:	e01c      	b.n	8004ab6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 fa1d 	bl	8004ec4 <TIM_OC2_SetConfig>
      break;
 8004a8a:	e014      	b.n	8004ab6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	0011      	movs	r1, r2
 8004a94:	0018      	movs	r0, r3
 8004a96:	f000 fa99 	bl	8004fcc <TIM_OC3_SetConfig>
      break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 fb17 	bl	80050d8 <TIM_OC4_SetConfig>
      break;
 8004aaa:	e004      	b.n	8004ab6 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8004aac:	2317      	movs	r3, #23
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
      break;
 8004ab4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	223c      	movs	r2, #60	; 0x3c
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]

  return status;
 8004abe:	2317      	movs	r3, #23
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	781b      	ldrb	r3, [r3, #0]
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	223c      	movs	r2, #60	; 0x3c
 8004ae2:	5c9b      	ldrb	r3, [r3, r2]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x20>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0bc      	b.n	8004c66 <HAL_TIM_ConfigClockSource+0x19a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	223c      	movs	r2, #60	; 0x3c
 8004af0:	2101      	movs	r1, #1
 8004af2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	223d      	movs	r2, #61	; 0x3d
 8004af8:	2102      	movs	r1, #2
 8004afa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2277      	movs	r2, #119	; 0x77
 8004b08:	4393      	bics	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a58      	ldr	r2, [pc, #352]	; (8004c70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	0192      	lsls	r2, r2, #6
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0xde>
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0192      	lsls	r2, r2, #6
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d900      	bls.n	8004b32 <HAL_TIM_ConfigClockSource+0x66>
 8004b30:	e088      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0152      	lsls	r2, r2, #5
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d100      	bne.n	8004b3c <HAL_TIM_ConfigClockSource+0x70>
 8004b3a:	e088      	b.n	8004c4e <HAL_TIM_ConfigClockSource+0x182>
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	0152      	lsls	r2, r2, #5
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d900      	bls.n	8004b46 <HAL_TIM_ConfigClockSource+0x7a>
 8004b44:	e07e      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b46:	2b70      	cmp	r3, #112	; 0x70
 8004b48:	d018      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0xb0>
 8004b4a:	d900      	bls.n	8004b4e <HAL_TIM_ConfigClockSource+0x82>
 8004b4c:	e07a      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b4e:	2b60      	cmp	r3, #96	; 0x60
 8004b50:	d04f      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x126>
 8004b52:	d900      	bls.n	8004b56 <HAL_TIM_ConfigClockSource+0x8a>
 8004b54:	e076      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b56:	2b50      	cmp	r3, #80	; 0x50
 8004b58:	d03b      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x106>
 8004b5a:	d900      	bls.n	8004b5e <HAL_TIM_ConfigClockSource+0x92>
 8004b5c:	e072      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d057      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x146>
 8004b62:	d900      	bls.n	8004b66 <HAL_TIM_ConfigClockSource+0x9a>
 8004b64:	e06e      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	d063      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b6a:	d86b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d060      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b70:	d868      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d05d      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d05b      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b7a:	e063      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f000 fb88 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2277      	movs	r2, #119	; 0x77
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
      break;
 8004ba8:	e052      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f000 fb71 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	01c9      	lsls	r1, r1, #7
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e03e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	001a      	movs	r2, r3
 8004be0:	f000 fae4 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2150      	movs	r1, #80	; 0x50
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fb3e 	bl	800526c <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e02e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	001a      	movs	r2, r3
 8004c00:	f000 fb02 	bl	8005208 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2160      	movs	r1, #96	; 0x60
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fb2e 	bl	800526c <TIM_ITRx_SetConfig>
      break;
 8004c10:	e01e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	001a      	movs	r2, r3
 8004c20:	f000 fac4 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f000 fb1e 	bl	800526c <TIM_ITRx_SetConfig>
      break;
 8004c30:	e00e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	0010      	movs	r0, r2
 8004c3e:	f000 fb15 	bl	800526c <TIM_ITRx_SetConfig>
      break;
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c44:	230f      	movs	r3, #15
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
      break;
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004c4e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	223d      	movs	r2, #61	; 0x3d
 8004c54:	2101      	movs	r1, #1
 8004c56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	223c      	movs	r2, #60	; 0x3c
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	5499      	strb	r1, [r3, r2]

  return status;
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	781b      	ldrb	r3, [r3, #0]
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b004      	add	sp, #16
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	ffff00ff 	.word	0xffff00ff

08004c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a34      	ldr	r2, [pc, #208]	; (8004d98 <TIM_Base_SetConfig+0xe4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d008      	beq.n	8004cde <TIM_Base_SetConfig+0x2a>
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	05db      	lsls	r3, r3, #23
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0x2a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <TIM_Base_SetConfig+0xe8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2270      	movs	r2, #112	; 0x70
 8004ce2:	4393      	bics	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <TIM_Base_SetConfig+0xe4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <TIM_Base_SetConfig+0x76>
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	05db      	lsls	r3, r3, #23
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d013      	beq.n	8004d2a <TIM_Base_SetConfig+0x76>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a25      	ldr	r2, [pc, #148]	; (8004d9c <TIM_Base_SetConfig+0xe8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00f      	beq.n	8004d2a <TIM_Base_SetConfig+0x76>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <TIM_Base_SetConfig+0xec>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_Base_SetConfig+0x76>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <TIM_Base_SetConfig+0xf0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_Base_SetConfig+0x76>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <TIM_Base_SetConfig+0xf4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_Base_SetConfig+0x76>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a21      	ldr	r2, [pc, #132]	; (8004dac <TIM_Base_SetConfig+0xf8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <TIM_Base_SetConfig+0xfc>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	4393      	bics	r3, r2
 8004d42:	001a      	movs	r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <TIM_Base_SetConfig+0xe4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0xce>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <TIM_Base_SetConfig+0xf0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0xce>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <TIM_Base_SetConfig+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0xce>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <TIM_Base_SetConfig+0xf8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d103      	bne.n	8004d8a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	615a      	str	r2, [r3, #20]
}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40002000 	.word	0x40002000
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800
 8004db0:	fffffcff 	.word	0xfffffcff

08004db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2270      	movs	r2, #112	; 0x70
 8004de2:	4393      	bics	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2203      	movs	r2, #3
 8004dea:	4393      	bics	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4393      	bics	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <TIM_OC1_SetConfig+0xf8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_OC1_SetConfig+0x76>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <TIM_OC1_SetConfig+0xfc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_OC1_SetConfig+0x76>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <TIM_OC1_SetConfig+0x100>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_OC1_SetConfig+0x76>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <TIM_OC1_SetConfig+0x104>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4393      	bics	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	4393      	bics	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a19      	ldr	r2, [pc, #100]	; (8004eac <TIM_OC1_SetConfig+0xf8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <TIM_OC1_SetConfig+0xb0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <TIM_OC1_SetConfig+0xfc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_OC1_SetConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <TIM_OC1_SetConfig+0x100>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_OC1_SetConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <TIM_OC1_SetConfig+0x104>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d111      	bne.n	8004e88 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <TIM_OC1_SetConfig+0x108>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <TIM_OC1_SetConfig+0x10c>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b006      	add	sp, #24
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	fffffeff 	.word	0xfffffeff
 8004ec0:	fffffdff 	.word	0xfffffdff

08004ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	4393      	bics	r3, r2
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	; (8004fac <TIM_OC2_SetConfig+0xe8>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a2d      	ldr	r2, [pc, #180]	; (8004fb0 <TIM_OC2_SetConfig+0xec>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	4393      	bics	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <TIM_OC2_SetConfig+0xf0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	4393      	bics	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <TIM_OC2_SetConfig+0xf0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_OC2_SetConfig+0x9e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <TIM_OC2_SetConfig+0xf4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_OC2_SetConfig+0x9e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <TIM_OC2_SetConfig+0xf8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_OC2_SetConfig+0x9e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <TIM_OC2_SetConfig+0xfc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d113      	bne.n	8004f8a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <TIM_OC2_SetConfig+0x100>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <TIM_OC2_SetConfig+0x104>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b006      	add	sp, #24
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	ffff8fff 	.word	0xffff8fff
 8004fb0:	fffffcff 	.word	0xfffffcff
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800
 8004fc4:	fffffbff 	.word	0xfffffbff
 8004fc8:	fffff7ff 	.word	0xfffff7ff

08004fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a35      	ldr	r2, [pc, #212]	; (80050b0 <TIM_OC3_SetConfig+0xe4>)
 8004fdc:	401a      	ands	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2270      	movs	r2, #112	; 0x70
 8004ff8:	4393      	bics	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2203      	movs	r2, #3
 8005000:	4393      	bics	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <TIM_OC3_SetConfig+0xe8>)
 8005012:	4013      	ands	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <TIM_OC3_SetConfig+0xec>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10d      	bne.n	8005046 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4a23      	ldr	r2, [pc, #140]	; (80050bc <TIM_OC3_SetConfig+0xf0>)
 800502e:	4013      	ands	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <TIM_OC3_SetConfig+0xf4>)
 8005042:	4013      	ands	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <TIM_OC3_SetConfig+0xec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_OC3_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <TIM_OC3_SetConfig+0xf8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_OC3_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <TIM_OC3_SetConfig+0xfc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC3_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1a      	ldr	r2, [pc, #104]	; (80050cc <TIM_OC3_SetConfig+0x100>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d113      	bne.n	800508e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <TIM_OC3_SetConfig+0x104>)
 800506a:	4013      	ands	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <TIM_OC3_SetConfig+0x108>)
 8005072:	4013      	ands	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b006      	add	sp, #24
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	fffffeff 	.word	0xfffffeff
 80050b4:	fffffdff 	.word	0xfffffdff
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	fffff7ff 	.word	0xfffff7ff
 80050c0:	fffffbff 	.word	0xfffffbff
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800
 80050d0:	ffffefff 	.word	0xffffefff
 80050d4:	ffffdfff 	.word	0xffffdfff

080050d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4a28      	ldr	r2, [pc, #160]	; (8005188 <TIM_OC4_SetConfig+0xb0>)
 80050e8:	401a      	ands	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a22      	ldr	r2, [pc, #136]	; (800518c <TIM_OC4_SetConfig+0xb4>)
 8005104:	4013      	ands	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a21      	ldr	r2, [pc, #132]	; (8005190 <TIM_OC4_SetConfig+0xb8>)
 800510c:	4013      	ands	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <TIM_OC4_SetConfig+0xbc>)
 8005120:	4013      	ands	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a19      	ldr	r2, [pc, #100]	; (8005198 <TIM_OC4_SetConfig+0xc0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00b      	beq.n	8005150 <TIM_OC4_SetConfig+0x78>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a18      	ldr	r2, [pc, #96]	; (800519c <TIM_OC4_SetConfig+0xc4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d007      	beq.n	8005150 <TIM_OC4_SetConfig+0x78>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <TIM_OC4_SetConfig+0xc8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_OC4_SetConfig+0x78>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <TIM_OC4_SetConfig+0xcc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d109      	bne.n	8005164 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <TIM_OC4_SetConfig+0xd0>)
 8005154:	4013      	ands	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b006      	add	sp, #24
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	ffffefff 	.word	0xffffefff
 800518c:	ffff8fff 	.word	0xffff8fff
 8005190:	fffffcff 	.word	0xfffffcff
 8005194:	ffffdfff 	.word	0xffffdfff
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800
 80051a8:	ffffbfff 	.word	0xffffbfff

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	2201      	movs	r2, #1
 80051c4:	4393      	bics	r3, r2
 80051c6:	001a      	movs	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	22f0      	movs	r2, #240	; 0xf0
 80051d6:	4393      	bics	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	220a      	movs	r2, #10
 80051e8:	4393      	bics	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	46bd      	mov	sp, r7
 8005204:	b006      	add	sp, #24
 8005206:	bd80      	pop	{r7, pc}

08005208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	2210      	movs	r2, #16
 800521a:	4393      	bics	r3, r2
 800521c:	001a      	movs	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <TIM_TI2_ConfigInputStage+0x60>)
 8005232:	4013      	ands	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	22a0      	movs	r2, #160	; 0xa0
 8005244:	4393      	bics	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	46bd      	mov	sp, r7
 8005262:	b006      	add	sp, #24
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	ffff0fff 	.word	0xffff0fff

0800526c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2270      	movs	r2, #112	; 0x70
 8005280:	4393      	bics	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	2207      	movs	r2, #7
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	609a      	str	r2, [r3, #8]
}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b004      	add	sp, #16
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <TIM_ETR_SetConfig+0x3c>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b006      	add	sp, #24
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	ffff00ff 	.word	0xffff00ff

080052e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	221f      	movs	r2, #31
 80052f0:	4013      	ands	r3, r2
 80052f2:	2201      	movs	r2, #1
 80052f4:	409a      	lsls	r2, r3
 80052f6:	0013      	movs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	43d2      	mvns	r2, r2
 8005302:	401a      	ands	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	211f      	movs	r1, #31
 8005310:	400b      	ands	r3, r1
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4099      	lsls	r1, r3
 8005316:	000b      	movs	r3, r1
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b006      	add	sp, #24
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	223c      	movs	r2, #60	; 0x3c
 8005336:	5c9b      	ldrb	r3, [r3, r2]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800533c:	2302      	movs	r3, #2
 800533e:	e047      	b.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	223c      	movs	r2, #60	; 0x3c
 8005344:	2101      	movs	r1, #1
 8005346:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	223d      	movs	r2, #61	; 0x3d
 800534c:	2102      	movs	r1, #2
 800534e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2270      	movs	r2, #112	; 0x70
 8005364:	4393      	bics	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	05db      	lsls	r3, r3, #23
 800538c:	429a      	cmp	r2, r3
 800538e:	d009      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a11      	ldr	r2, [pc, #68]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	4393      	bics	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	223d      	movs	r2, #61	; 0x3d
 80053c2:	2101      	movs	r1, #1
 80053c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	223c      	movs	r2, #60	; 0x3c
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b004      	add	sp, #16
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40014000 	.word	0x40014000

080053e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	223c      	movs	r2, #60	; 0x3c
 80053f6:	5c9b      	ldrb	r3, [r3, r2]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e03e      	b.n	800547e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	223c      	movs	r2, #60	; 0x3c
 8005404:	2101      	movs	r1, #1
 8005406:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	4393      	bics	r3, r2
 800540e:	001a      	movs	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800541c:	401a      	ands	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800542a:	401a      	ands	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005438:	401a      	ands	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005446:	401a      	ands	r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a11      	ldr	r2, [pc, #68]	; (8005498 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005454:	401a      	ands	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005462:	401a      	ands	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	223c      	movs	r2, #60	; 0x3c
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	0018      	movs	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	b004      	add	sp, #16
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	fffffcff 	.word	0xfffffcff
 800548c:	fffffbff 	.word	0xfffffbff
 8005490:	fffff7ff 	.word	0xfffff7ff
 8005494:	ffffefff 	.word	0xffffefff
 8005498:	ffffdfff 	.word	0xffffdfff
 800549c:	ffffbfff 	.word	0xffffbfff

080054a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e044      	b.n	800555c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2274      	movs	r2, #116	; 0x74
 80054de:	2100      	movs	r1, #0
 80054e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fd f89f 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2224      	movs	r2, #36	; 0x24
 80054ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2101      	movs	r1, #1
 80054fc:	438a      	bics	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0018      	movs	r0, r3
 8005504:	f000 fbfe 	bl	8005d04 <UART_SetConfig>
 8005508:	0003      	movs	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e024      	b.n	800555c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f000 fd31 	bl	8005f84 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	490d      	ldr	r1, [pc, #52]	; (8005564 <HAL_UART_Init+0xa4>)
 800552e:	400a      	ands	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	212a      	movs	r1, #42	; 0x2a
 800553e:	438a      	bics	r2, r1
 8005540:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2101      	movs	r1, #1
 800554e:	430a      	orrs	r2, r1
 8005550:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	0018      	movs	r0, r3
 8005556:	f000 fdc9 	bl	80060ec <UART_CheckIdleState>
 800555a:	0003      	movs	r3, r0
}
 800555c:	0018      	movs	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	b002      	add	sp, #8
 8005562:	bd80      	pop	{r7, pc}
 8005564:	ffffb7ff 	.word	0xffffb7ff

08005568 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	1dbb      	adds	r3, r7, #6
 8005574:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557a:	2b20      	cmp	r3, #32
 800557c:	d000      	beq.n	8005580 <HAL_UART_Transmit_IT+0x18>
 800557e:	e06a      	b.n	8005656 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_Transmit_IT+0x26>
 8005586:	1dbb      	adds	r3, r7, #6
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e062      	b.n	8005658 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	015b      	lsls	r3, r3, #5
 800559a:	429a      	cmp	r2, r3
 800559c:	d109      	bne.n	80055b2 <HAL_UART_Transmit_IT+0x4a>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2201      	movs	r2, #1
 80055aa:	4013      	ands	r3, r2
 80055ac:	d001      	beq.n	80055b2 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e052      	b.n	8005658 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2274      	movs	r2, #116	; 0x74
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_UART_Transmit_IT+0x58>
 80055bc:	2302      	movs	r3, #2
 80055be:	e04b      	b.n	8005658 <HAL_UART_Transmit_IT+0xf0>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2274      	movs	r2, #116	; 0x74
 80055c4:	2101      	movs	r1, #1
 80055c6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1dba      	adds	r2, r7, #6
 80055d2:	2150      	movs	r1, #80	; 0x50
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1dba      	adds	r2, r7, #6
 80055dc:	2152      	movs	r1, #82	; 0x52
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	2100      	movs	r1, #0
 80055ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2221      	movs	r2, #33	; 0x21
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	015b      	lsls	r3, r3, #5
 80055fe:	429a      	cmp	r2, r3
 8005600:	d107      	bne.n	8005612 <HAL_UART_Transmit_IT+0xaa>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <HAL_UART_Transmit_IT+0xf8>)
 800560e:	669a      	str	r2, [r3, #104]	; 0x68
 8005610:	e002      	b.n	8005618 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <HAL_UART_Transmit_IT+0xfc>)
 8005616:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2274      	movs	r2, #116	; 0x74
 800561c:	2100      	movs	r1, #0
 800561e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005620:	f3ef 8310 	mrs	r3, PRIMASK
 8005624:	613b      	str	r3, [r7, #16]
  return(result);
 8005626:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	2301      	movs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f383 8810 	msr	PRIMASK, r3
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b008      	add	sp, #32
 800565e:	bd80      	pop	{r7, pc}
 8005660:	080065e3 	.word	0x080065e3
 8005664:	0800652f 	.word	0x0800652f

08005668 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	1dbb      	adds	r3, r7, #6
 8005674:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567a:	2b20      	cmp	r3, #32
 800567c:	d150      	bne.n	8005720 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_UART_Receive_IT+0x24>
 8005684:	1dbb      	adds	r3, r7, #6
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e048      	b.n	8005722 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	015b      	lsls	r3, r3, #5
 8005698:	429a      	cmp	r2, r3
 800569a:	d109      	bne.n	80056b0 <HAL_UART_Receive_IT+0x48>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2201      	movs	r2, #1
 80056a8:	4013      	ands	r3, r2
 80056aa:	d001      	beq.n	80056b0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e038      	b.n	8005722 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2274      	movs	r2, #116	; 0x74
 80056b4:	5c9b      	ldrb	r3, [r3, r2]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_UART_Receive_IT+0x56>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e031      	b.n	8005722 <HAL_UART_Receive_IT+0xba>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2274      	movs	r2, #116	; 0x74
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	4013      	ands	r3, r2
 80056d8:	d019      	beq.n	800570e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	613b      	str	r3, [r7, #16]
  return(result);
 80056e0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	2301      	movs	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2180      	movs	r1, #128	; 0x80
 80056fc:	04c9      	lsls	r1, r1, #19
 80056fe:	430a      	orrs	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f383 8810 	msr	PRIMASK, r3
}
 800570c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800570e:	1dbb      	adds	r3, r7, #6
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	0018      	movs	r0, r3
 8005718:	f000 fdf4 	bl	8006304 <UART_Start_Receive_IT>
 800571c:	0003      	movs	r3, r0
 800571e:	e000      	b.n	8005722 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b008      	add	sp, #32
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b0ab      	sub	sp, #172	; 0xac
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	22a4      	movs	r2, #164	; 0xa4
 800573c:	18b9      	adds	r1, r7, r2
 800573e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	20a0      	movs	r0, #160	; 0xa0
 8005748:	1839      	adds	r1, r7, r0
 800574a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	219c      	movs	r1, #156	; 0x9c
 8005754:	1879      	adds	r1, r7, r1
 8005756:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005758:	0011      	movs	r1, r2
 800575a:	18bb      	adds	r3, r7, r2
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a99      	ldr	r2, [pc, #612]	; (80059c4 <HAL_UART_IRQHandler+0x298>)
 8005760:	4013      	ands	r3, r2
 8005762:	2298      	movs	r2, #152	; 0x98
 8005764:	18bc      	adds	r4, r7, r2
 8005766:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005768:	18bb      	adds	r3, r7, r2
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d114      	bne.n	800579a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005770:	187b      	adds	r3, r7, r1
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2220      	movs	r2, #32
 8005776:	4013      	ands	r3, r2
 8005778:	d00f      	beq.n	800579a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800577a:	183b      	adds	r3, r7, r0
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2220      	movs	r2, #32
 8005780:	4013      	ands	r3, r2
 8005782:	d00a      	beq.n	800579a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	2b00      	cmp	r3, #0
 800578a:	d100      	bne.n	800578e <HAL_UART_IRQHandler+0x62>
 800578c:	e296      	b.n	8005cbc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	0010      	movs	r0, r2
 8005796:	4798      	blx	r3
      }
      return;
 8005798:	e290      	b.n	8005cbc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800579a:	2398      	movs	r3, #152	; 0x98
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d100      	bne.n	80057a6 <HAL_UART_IRQHandler+0x7a>
 80057a4:	e114      	b.n	80059d0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057a6:	239c      	movs	r3, #156	; 0x9c
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	4013      	ands	r3, r2
 80057b0:	d106      	bne.n	80057c0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057b2:	23a0      	movs	r3, #160	; 0xa0
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a83      	ldr	r2, [pc, #524]	; (80059c8 <HAL_UART_IRQHandler+0x29c>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	d100      	bne.n	80057c0 <HAL_UART_IRQHandler+0x94>
 80057be:	e107      	b.n	80059d0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057c0:	23a4      	movs	r3, #164	; 0xa4
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4013      	ands	r3, r2
 80057ca:	d012      	beq.n	80057f2 <HAL_UART_IRQHandler+0xc6>
 80057cc:	23a0      	movs	r3, #160	; 0xa0
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4013      	ands	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2201      	movs	r2, #1
 80057e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	589b      	ldr	r3, [r3, r2]
 80057e8:	2201      	movs	r2, #1
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2180      	movs	r1, #128	; 0x80
 80057f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057f2:	23a4      	movs	r3, #164	; 0xa4
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2202      	movs	r2, #2
 80057fa:	4013      	ands	r3, r2
 80057fc:	d011      	beq.n	8005822 <HAL_UART_IRQHandler+0xf6>
 80057fe:	239c      	movs	r3, #156	; 0x9c
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	4013      	ands	r3, r2
 8005808:	d00b      	beq.n	8005822 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2202      	movs	r2, #2
 8005810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	589b      	ldr	r3, [r3, r2]
 8005818:	2204      	movs	r2, #4
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005822:	23a4      	movs	r3, #164	; 0xa4
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2204      	movs	r2, #4
 800582a:	4013      	ands	r3, r2
 800582c:	d011      	beq.n	8005852 <HAL_UART_IRQHandler+0x126>
 800582e:	239c      	movs	r3, #156	; 0x9c
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	4013      	ands	r3, r2
 8005838:	d00b      	beq.n	8005852 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2204      	movs	r2, #4
 8005840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	589b      	ldr	r3, [r3, r2]
 8005848:	2202      	movs	r2, #2
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005852:	23a4      	movs	r3, #164	; 0xa4
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2208      	movs	r2, #8
 800585a:	4013      	ands	r3, r2
 800585c:	d017      	beq.n	800588e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800585e:	23a0      	movs	r3, #160	; 0xa0
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2220      	movs	r2, #32
 8005866:	4013      	ands	r3, r2
 8005868:	d105      	bne.n	8005876 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800586a:	239c      	movs	r3, #156	; 0x9c
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005874:	d00b      	beq.n	800588e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2208      	movs	r2, #8
 800587c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	589b      	ldr	r3, [r3, r2]
 8005884:	2208      	movs	r2, #8
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800588e:	23a4      	movs	r3, #164	; 0xa4
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	4013      	ands	r3, r2
 800589a:	d013      	beq.n	80058c4 <HAL_UART_IRQHandler+0x198>
 800589c:	23a0      	movs	r3, #160	; 0xa0
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	04db      	lsls	r3, r3, #19
 80058a6:	4013      	ands	r3, r2
 80058a8:	d00c      	beq.n	80058c4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	0112      	lsls	r2, r2, #4
 80058b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	589b      	ldr	r3, [r3, r2]
 80058ba:	2220      	movs	r2, #32
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	589b      	ldr	r3, [r3, r2]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d100      	bne.n	80058d0 <HAL_UART_IRQHandler+0x1a4>
 80058ce:	e1f7      	b.n	8005cc0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058d0:	23a4      	movs	r3, #164	; 0xa4
 80058d2:	18fb      	adds	r3, r7, r3
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2220      	movs	r2, #32
 80058d8:	4013      	ands	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058dc:	23a0      	movs	r3, #160	; 0xa0
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2220      	movs	r2, #32
 80058e4:	4013      	ands	r3, r2
 80058e6:	d008      	beq.n	80058fa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	0010      	movs	r0, r2
 80058f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	589b      	ldr	r3, [r3, r2]
 8005900:	2194      	movs	r1, #148	; 0x94
 8005902:	187a      	adds	r2, r7, r1
 8005904:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	4013      	ands	r3, r2
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d004      	beq.n	800591e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005914:	187b      	adds	r3, r7, r1
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2228      	movs	r2, #40	; 0x28
 800591a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800591c:	d047      	beq.n	80059ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 fd8b 	bl	800643c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	4013      	ands	r3, r2
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d137      	bne.n	80059a4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005934:	f3ef 8310 	mrs	r3, PRIMASK
 8005938:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800593a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593c:	2090      	movs	r0, #144	; 0x90
 800593e:	183a      	adds	r2, r7, r0
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	2301      	movs	r3, #1
 8005944:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	438a      	bics	r2, r1
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	183b      	adds	r3, r7, r0
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005966:	f383 8810 	msr	PRIMASK, r3
}
 800596a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	2b00      	cmp	r3, #0
 8005972:	d012      	beq.n	800599a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005978:	4a14      	ldr	r2, [pc, #80]	; (80059cc <HAL_UART_IRQHandler+0x2a0>)
 800597a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	0018      	movs	r0, r3
 8005982:	f7fd fd59 	bl	8003438 <HAL_DMA_Abort_IT>
 8005986:	1e03      	subs	r3, r0, #0
 8005988:	d01a      	beq.n	80059c0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	0018      	movs	r0, r3
 8005996:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e012      	b.n	80059c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f000 f99d 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	e00d      	b.n	80059c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	0018      	movs	r0, r3
 80059a8:	f000 f998 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	e008      	b.n	80059c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f000 f993 	bl	8005cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2280      	movs	r2, #128	; 0x80
 80059ba:	2100      	movs	r1, #0
 80059bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80059be:	e17f      	b.n	8005cc0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	46c0      	nop			; (mov r8, r8)
    return;
 80059c2:	e17d      	b.n	8005cc0 <HAL_UART_IRQHandler+0x594>
 80059c4:	0000080f 	.word	0x0000080f
 80059c8:	04000120 	.word	0x04000120
 80059cc:	08006501 	.word	0x08006501

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d000      	beq.n	80059da <HAL_UART_IRQHandler+0x2ae>
 80059d8:	e131      	b.n	8005c3e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059da:	23a4      	movs	r3, #164	; 0xa4
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2210      	movs	r2, #16
 80059e2:	4013      	ands	r3, r2
 80059e4:	d100      	bne.n	80059e8 <HAL_UART_IRQHandler+0x2bc>
 80059e6:	e12a      	b.n	8005c3e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059e8:	23a0      	movs	r3, #160	; 0xa0
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2210      	movs	r2, #16
 80059f0:	4013      	ands	r3, r2
 80059f2:	d100      	bne.n	80059f6 <HAL_UART_IRQHandler+0x2ca>
 80059f4:	e123      	b.n	8005c3e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2210      	movs	r2, #16
 80059fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2240      	movs	r2, #64	; 0x40
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d000      	beq.n	8005a0e <HAL_UART_IRQHandler+0x2e2>
 8005a0c:	e09b      	b.n	8005b46 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	217e      	movs	r1, #126	; 0x7e
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d100      	bne.n	8005a26 <HAL_UART_IRQHandler+0x2fa>
 8005a24:	e14e      	b.n	8005cc4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2258      	movs	r2, #88	; 0x58
 8005a2a:	5a9b      	ldrh	r3, [r3, r2]
 8005a2c:	187a      	adds	r2, r7, r1
 8005a2e:	8812      	ldrh	r2, [r2, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d300      	bcc.n	8005a36 <HAL_UART_IRQHandler+0x30a>
 8005a34:	e146      	b.n	8005cc4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	187a      	adds	r2, r7, r1
 8005a3a:	215a      	movs	r1, #90	; 0x5a
 8005a3c:	8812      	ldrh	r2, [r2, #0]
 8005a3e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d06e      	beq.n	8005b28 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a52:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a54:	2301      	movs	r3, #1
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	499a      	ldr	r1, [pc, #616]	; (8005cd4 <HAL_UART_IRQHandler+0x5a8>)
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	677b      	str	r3, [r7, #116]	; 0x74
 8005a86:	2301      	movs	r3, #1
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	438a      	bics	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ab8:	2301      	movs	r3, #1
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2140      	movs	r1, #64	; 0x40
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ad6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aec:	f3ef 8310 	mrs	r3, PRIMASK
 8005af0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af6:	2301      	movs	r3, #1
 8005af8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	f383 8810 	msr	PRIMASK, r3
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2110      	movs	r1, #16
 8005b0e:	438a      	bics	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b14:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b18:	f383 8810 	msr	PRIMASK, r3
}
 8005b1c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	0018      	movs	r0, r3
 8005b24:	f7fd fc50 	bl	80033c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2258      	movs	r2, #88	; 0x58
 8005b2c:	5a9a      	ldrh	r2, [r3, r2]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	215a      	movs	r1, #90	; 0x5a
 8005b32:	5a5b      	ldrh	r3, [r3, r1]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0011      	movs	r1, r2
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 f8d4 	bl	8005cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b44:	e0be      	b.n	8005cc4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2258      	movs	r2, #88	; 0x58
 8005b4a:	5a99      	ldrh	r1, [r3, r2]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	225a      	movs	r2, #90	; 0x5a
 8005b50:	5a9b      	ldrh	r3, [r3, r2]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	208e      	movs	r0, #142	; 0x8e
 8005b56:	183b      	adds	r3, r7, r0
 8005b58:	1a8a      	subs	r2, r1, r2
 8005b5a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	225a      	movs	r2, #90	; 0x5a
 8005b60:	5a9b      	ldrh	r3, [r3, r2]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d100      	bne.n	8005b6a <HAL_UART_IRQHandler+0x43e>
 8005b68:	e0ae      	b.n	8005cc8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005b6a:	183b      	adds	r3, r7, r0
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d100      	bne.n	8005b74 <HAL_UART_IRQHandler+0x448>
 8005b72:	e0a9      	b.n	8005cc8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b74:	f3ef 8310 	mrs	r3, PRIMASK
 8005b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7c:	2488      	movs	r4, #136	; 0x88
 8005b7e:	193a      	adds	r2, r7, r4
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	2301      	movs	r3, #1
 8005b84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f383 8810 	msr	PRIMASK, r3
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	494f      	ldr	r1, [pc, #316]	; (8005cd8 <HAL_UART_IRQHandler+0x5ac>)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	193b      	adds	r3, r7, r4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f383 8810 	msr	PRIMASK, r3
}
 8005baa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bac:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bb2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb4:	2484      	movs	r4, #132	; 0x84
 8005bb6:	193a      	adds	r2, r7, r4
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f383 8810 	msr	PRIMASK, r3
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	438a      	bics	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	193b      	adds	r3, r7, r4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	f383 8810 	msr	PRIMASK, r3
}
 8005be2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfe:	2480      	movs	r4, #128	; 0x80
 8005c00:	193a      	adds	r2, r7, r4
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	2301      	movs	r3, #1
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	193b      	adds	r3, r7, r4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c2e:	183b      	adds	r3, r7, r0
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0011      	movs	r1, r2
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 f858 	bl	8005cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c3c:	e044      	b.n	8005cc8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c3e:	23a4      	movs	r3, #164	; 0xa4
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	035b      	lsls	r3, r3, #13
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d010      	beq.n	8005c6e <HAL_UART_IRQHandler+0x542>
 8005c4c:	239c      	movs	r3, #156	; 0x9c
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	03db      	lsls	r3, r3, #15
 8005c56:	4013      	ands	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	0352      	lsls	r2, r2, #13
 8005c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f000 feac 	bl	80069c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c6c:	e02f      	b.n	8005cce <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c6e:	23a4      	movs	r3, #164	; 0xa4
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2280      	movs	r2, #128	; 0x80
 8005c76:	4013      	ands	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c7a:	23a0      	movs	r3, #160	; 0xa0
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2280      	movs	r2, #128	; 0x80
 8005c82:	4013      	ands	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01e      	beq.n	8005ccc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	0010      	movs	r0, r2
 8005c96:	4798      	blx	r3
    }
    return;
 8005c98:	e018      	b.n	8005ccc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c9a:	23a4      	movs	r3, #164	; 0xa4
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2240      	movs	r2, #64	; 0x40
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_UART_IRQHandler+0x5a2>
 8005ca6:	23a0      	movs	r3, #160	; 0xa0
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2240      	movs	r2, #64	; 0x40
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d00d      	beq.n	8005cce <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 fcf2 	bl	800669e <UART_EndTransmit_IT>
    return;
 8005cba:	e008      	b.n	8005cce <HAL_UART_IRQHandler+0x5a2>
      return;
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	e006      	b.n	8005cce <HAL_UART_IRQHandler+0x5a2>
    return;
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	e004      	b.n	8005cce <HAL_UART_IRQHandler+0x5a2>
      return;
 8005cc4:	46c0      	nop			; (mov r8, r8)
 8005cc6:	e002      	b.n	8005cce <HAL_UART_IRQHandler+0x5a2>
      return;
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	e000      	b.n	8005cce <HAL_UART_IRQHandler+0x5a2>
    return;
 8005ccc:	46c0      	nop			; (mov r8, r8)
  }

}
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b02b      	add	sp, #172	; 0xac
 8005cd2:	bd90      	pop	{r4, r7, pc}
 8005cd4:	fffffeff 	.word	0xfffffeff
 8005cd8:	fffffedf 	.word	0xfffffedf

08005cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	000a      	movs	r2, r1
 8005cf6:	1cbb      	adds	r3, r7, #2
 8005cf8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b002      	add	sp, #8
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d0c:	231e      	movs	r3, #30
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a8d      	ldr	r2, [pc, #564]	; (8005f68 <UART_SetConfig+0x264>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	0019      	movs	r1, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a88      	ldr	r2, [pc, #544]	; (8005f6c <UART_SetConfig+0x268>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a7f      	ldr	r2, [pc, #508]	; (8005f70 <UART_SetConfig+0x26c>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	0019      	movs	r1, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7b      	ldr	r2, [pc, #492]	; (8005f74 <UART_SetConfig+0x270>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d127      	bne.n	8005dda <UART_SetConfig+0xd6>
 8005d8a:	4b7b      	ldr	r3, [pc, #492]	; (8005f78 <UART_SetConfig+0x274>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	2203      	movs	r2, #3
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d00d      	beq.n	8005db2 <UART_SetConfig+0xae>
 8005d96:	d81b      	bhi.n	8005dd0 <UART_SetConfig+0xcc>
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d014      	beq.n	8005dc6 <UART_SetConfig+0xc2>
 8005d9c:	d818      	bhi.n	8005dd0 <UART_SetConfig+0xcc>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <UART_SetConfig+0xa4>
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00a      	beq.n	8005dbc <UART_SetConfig+0xb8>
 8005da6:	e013      	b.n	8005dd0 <UART_SetConfig+0xcc>
 8005da8:	231f      	movs	r3, #31
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e021      	b.n	8005df6 <UART_SetConfig+0xf2>
 8005db2:	231f      	movs	r3, #31
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2202      	movs	r2, #2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e01c      	b.n	8005df6 <UART_SetConfig+0xf2>
 8005dbc:	231f      	movs	r3, #31
 8005dbe:	18fb      	adds	r3, r7, r3
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e017      	b.n	8005df6 <UART_SetConfig+0xf2>
 8005dc6:	231f      	movs	r3, #31
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	2208      	movs	r2, #8
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e012      	b.n	8005df6 <UART_SetConfig+0xf2>
 8005dd0:	231f      	movs	r3, #31
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e00d      	b.n	8005df6 <UART_SetConfig+0xf2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a67      	ldr	r2, [pc, #412]	; (8005f7c <UART_SetConfig+0x278>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d104      	bne.n	8005dee <UART_SetConfig+0xea>
 8005de4:	231f      	movs	r3, #31
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	e003      	b.n	8005df6 <UART_SetConfig+0xf2>
 8005dee:	231f      	movs	r3, #31
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2210      	movs	r2, #16
 8005df4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d15d      	bne.n	8005ebe <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005e02:	231f      	movs	r3, #31
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d015      	beq.n	8005e38 <UART_SetConfig+0x134>
 8005e0c:	dc18      	bgt.n	8005e40 <UART_SetConfig+0x13c>
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00d      	beq.n	8005e2e <UART_SetConfig+0x12a>
 8005e12:	dc15      	bgt.n	8005e40 <UART_SetConfig+0x13c>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <UART_SetConfig+0x11a>
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d005      	beq.n	8005e28 <UART_SetConfig+0x124>
 8005e1c:	e010      	b.n	8005e40 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e1e:	f7fe f935 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8005e22:	0003      	movs	r3, r0
 8005e24:	61bb      	str	r3, [r7, #24]
        break;
 8005e26:	e012      	b.n	8005e4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e28:	4b55      	ldr	r3, [pc, #340]	; (8005f80 <UART_SetConfig+0x27c>)
 8005e2a:	61bb      	str	r3, [r7, #24]
        break;
 8005e2c:	e00f      	b.n	8005e4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2e:	f7fe f8bf 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005e32:	0003      	movs	r3, r0
 8005e34:	61bb      	str	r3, [r7, #24]
        break;
 8005e36:	e00a      	b.n	8005e4e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	61bb      	str	r3, [r7, #24]
        break;
 8005e3e:	e006      	b.n	8005e4e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e44:	231e      	movs	r3, #30
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
        break;
 8005e4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d100      	bne.n	8005e56 <UART_SetConfig+0x152>
 8005e54:	e07b      	b.n	8005f4e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	005a      	lsls	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	18d2      	adds	r2, r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	0019      	movs	r1, r3
 8005e68:	0010      	movs	r0, r2
 8005e6a:	f7fa f94d 	bl	8000108 <__udivsi3>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	d91c      	bls.n	8005eb4 <UART_SetConfig+0x1b0>
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	025b      	lsls	r3, r3, #9
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d217      	bcs.n	8005eb4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	200e      	movs	r0, #14
 8005e8a:	183b      	adds	r3, r7, r0
 8005e8c:	210f      	movs	r1, #15
 8005e8e:	438a      	bics	r2, r1
 8005e90:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2207      	movs	r2, #7
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	183b      	adds	r3, r7, r0
 8005ea0:	183a      	adds	r2, r7, r0
 8005ea2:	8812      	ldrh	r2, [r2, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	183a      	adds	r2, r7, r0
 8005eae:	8812      	ldrh	r2, [r2, #0]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	e04c      	b.n	8005f4e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb4:	231e      	movs	r3, #30
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	e047      	b.n	8005f4e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ebe:	231f      	movs	r3, #31
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d015      	beq.n	8005ef4 <UART_SetConfig+0x1f0>
 8005ec8:	dc18      	bgt.n	8005efc <UART_SetConfig+0x1f8>
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d00d      	beq.n	8005eea <UART_SetConfig+0x1e6>
 8005ece:	dc15      	bgt.n	8005efc <UART_SetConfig+0x1f8>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <UART_SetConfig+0x1d6>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d005      	beq.n	8005ee4 <UART_SetConfig+0x1e0>
 8005ed8:	e010      	b.n	8005efc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eda:	f7fe f8d7 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	61bb      	str	r3, [r7, #24]
        break;
 8005ee2:	e012      	b.n	8005f0a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <UART_SetConfig+0x27c>)
 8005ee6:	61bb      	str	r3, [r7, #24]
        break;
 8005ee8:	e00f      	b.n	8005f0a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fe f861 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	61bb      	str	r3, [r7, #24]
        break;
 8005ef2:	e00a      	b.n	8005f0a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	61bb      	str	r3, [r7, #24]
        break;
 8005efa:	e006      	b.n	8005f0a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f00:	231e      	movs	r3, #30
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
        break;
 8005f08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01e      	beq.n	8005f4e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	085a      	lsrs	r2, r3, #1
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	18d2      	adds	r2, r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	0019      	movs	r1, r3
 8005f20:	0010      	movs	r0, r2
 8005f22:	f7fa f8f1 	bl	8000108 <__udivsi3>
 8005f26:	0003      	movs	r3, r0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d909      	bls.n	8005f46 <UART_SetConfig+0x242>
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	025b      	lsls	r3, r3, #9
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d204      	bcs.n	8005f46 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	60da      	str	r2, [r3, #12]
 8005f44:	e003      	b.n	8005f4e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005f46:	231e      	movs	r3, #30
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f5a:	231e      	movs	r3, #30
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b008      	add	sp, #32
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	ffff69f3 	.word	0xffff69f3
 8005f6c:	ffffcfff 	.word	0xffffcfff
 8005f70:	fffff4ff 	.word	0xfffff4ff
 8005f74:	40013800 	.word	0x40013800
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40004400 	.word	0x40004400
 8005f80:	007a1200 	.word	0x007a1200

08005f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2201      	movs	r2, #1
 8005f92:	4013      	ands	r3, r2
 8005f94:	d00b      	beq.n	8005fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a4a      	ldr	r2, [pc, #296]	; (80060c8 <UART_AdvFeatureConfig+0x144>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4a43      	ldr	r2, [pc, #268]	; (80060cc <UART_AdvFeatureConfig+0x148>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a3b      	ldr	r2, [pc, #236]	; (80060d0 <UART_AdvFeatureConfig+0x14c>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <UART_AdvFeatureConfig+0x150>)
 8006004:	4013      	ands	r3, r2
 8006006:	0019      	movs	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2210      	movs	r2, #16
 800601a:	4013      	ands	r3, r2
 800601c:	d00b      	beq.n	8006036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <UART_AdvFeatureConfig+0x154>)
 8006026:	4013      	ands	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2220      	movs	r2, #32
 800603c:	4013      	ands	r3, r2
 800603e:	d00b      	beq.n	8006058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	4a25      	ldr	r2, [pc, #148]	; (80060dc <UART_AdvFeatureConfig+0x158>)
 8006048:	4013      	ands	r3, r2
 800604a:	0019      	movs	r1, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	2240      	movs	r2, #64	; 0x40
 800605e:	4013      	ands	r3, r2
 8006060:	d01d      	beq.n	800609e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <UART_AdvFeatureConfig+0x15c>)
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	035b      	lsls	r3, r3, #13
 8006082:	429a      	cmp	r2, r3
 8006084:	d10b      	bne.n	800609e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <UART_AdvFeatureConfig+0x160>)
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	4013      	ands	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4a0e      	ldr	r2, [pc, #56]	; (80060e8 <UART_AdvFeatureConfig+0x164>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }
}
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b002      	add	sp, #8
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	fffdffff 	.word	0xfffdffff
 80060cc:	fffeffff 	.word	0xfffeffff
 80060d0:	fffbffff 	.word	0xfffbffff
 80060d4:	ffff7fff 	.word	0xffff7fff
 80060d8:	ffffefff 	.word	0xffffefff
 80060dc:	ffffdfff 	.word	0xffffdfff
 80060e0:	ffefffff 	.word	0xffefffff
 80060e4:	ff9fffff 	.word	0xff9fffff
 80060e8:	fff7ffff 	.word	0xfff7ffff

080060ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2280      	movs	r2, #128	; 0x80
 80060f8:	2100      	movs	r1, #0
 80060fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060fc:	f7fc fbbc 	bl	8002878 <HAL_GetTick>
 8006100:	0003      	movs	r3, r0
 8006102:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2208      	movs	r2, #8
 800610c:	4013      	ands	r3, r2
 800610e:	2b08      	cmp	r3, #8
 8006110:	d10c      	bne.n	800612c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2280      	movs	r2, #128	; 0x80
 8006116:	0391      	lsls	r1, r2, #14
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <UART_CheckIdleState+0x8c>)
 800611c:	9200      	str	r2, [sp, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	f000 f82c 	bl	800617c <UART_WaitOnFlagUntilTimeout>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d001      	beq.n	800612c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e021      	b.n	8006170 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2204      	movs	r2, #4
 8006134:	4013      	ands	r3, r2
 8006136:	2b04      	cmp	r3, #4
 8006138:	d10c      	bne.n	8006154 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2280      	movs	r2, #128	; 0x80
 800613e:	03d1      	lsls	r1, r2, #15
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4a0d      	ldr	r2, [pc, #52]	; (8006178 <UART_CheckIdleState+0x8c>)
 8006144:	9200      	str	r2, [sp, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	f000 f818 	bl	800617c <UART_WaitOnFlagUntilTimeout>
 800614c:	1e03      	subs	r3, r0, #0
 800614e:	d001      	beq.n	8006154 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e00d      	b.n	8006170 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2274      	movs	r2, #116	; 0x74
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b004      	add	sp, #16
 8006176:	bd80      	pop	{r7, pc}
 8006178:	01ffffff 	.word	0x01ffffff

0800617c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b094      	sub	sp, #80	; 0x50
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	1dfb      	adds	r3, r7, #7
 800618a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	e0a3      	b.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006190:	3301      	adds	r3, #1
 8006192:	d100      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006194:	e09f      	b.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fc fb6f 	bl	8002878 <HAL_GetTick>
 800619a:	0002      	movs	r2, r0
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <UART_WaitOnFlagUntilTimeout+0x30>
 80061a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d13d      	bne.n	8006228 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ac:	f3ef 8310 	mrs	r3, PRIMASK
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
 80061b6:	2301      	movs	r3, #1
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	f383 8810 	msr	PRIMASK, r3
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	494c      	ldr	r1, [pc, #304]	; (8006300 <UART_WaitOnFlagUntilTimeout+0x184>)
 80061ce:	400a      	ands	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f383 8810 	msr	PRIMASK, r3
}
 80061dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061de:	f3ef 8310 	mrs	r3, PRIMASK
 80061e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	643b      	str	r3, [r7, #64]	; 0x40
 80061e8:	2301      	movs	r3, #1
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	f383 8810 	msr	PRIMASK, r3
}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2101      	movs	r1, #1
 8006200:	438a      	bics	r2, r1
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	f383 8810 	msr	PRIMASK, r3
}
 800620e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2274      	movs	r2, #116	; 0x74
 8006220:	2100      	movs	r1, #0
 8006222:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e067      	b.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2204      	movs	r2, #4
 8006230:	4013      	ands	r3, r2
 8006232:	d050      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69da      	ldr	r2, [r3, #28]
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	401a      	ands	r2, r3
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	429a      	cmp	r2, r3
 8006246:	d146      	bne.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2280      	movs	r2, #128	; 0x80
 800624e:	0112      	lsls	r2, r2, #4
 8006250:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006252:	f3ef 8310 	mrs	r3, PRIMASK
 8006256:	613b      	str	r3, [r7, #16]
  return(result);
 8006258:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625c:	2301      	movs	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f383 8810 	msr	PRIMASK, r3
}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4923      	ldr	r1, [pc, #140]	; (8006300 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006274:	400a      	ands	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f383 8810 	msr	PRIMASK, r3
}
 8006282:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006284:	f3ef 8310 	mrs	r3, PRIMASK
 8006288:	61fb      	str	r3, [r7, #28]
  return(result);
 800628a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628c:	64bb      	str	r3, [r7, #72]	; 0x48
 800628e:	2301      	movs	r3, #1
 8006290:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f383 8810 	msr	PRIMASK, r3
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2101      	movs	r1, #1
 80062a6:	438a      	bics	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]
 80062aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2280      	movs	r2, #128	; 0x80
 80062c6:	2120      	movs	r1, #32
 80062c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2274      	movs	r2, #116	; 0x74
 80062ce:	2100      	movs	r1, #0
 80062d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e010      	b.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	425a      	negs	r2, r3
 80062e6:	4153      	adcs	r3, r2
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	001a      	movs	r2, r3
 80062ec:	1dfb      	adds	r3, r7, #7
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d100      	bne.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80062f4:	e74b      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b014      	add	sp, #80	; 0x50
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	fffffe5f 	.word	0xfffffe5f

08006304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08c      	sub	sp, #48	; 0x30
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	1dbb      	adds	r3, r7, #6
 8006310:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1dba      	adds	r2, r7, #6
 800631c:	2158      	movs	r1, #88	; 0x58
 800631e:	8812      	ldrh	r2, [r2, #0]
 8006320:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1dba      	adds	r2, r7, #6
 8006326:	215a      	movs	r1, #90	; 0x5a
 8006328:	8812      	ldrh	r2, [r2, #0]
 800632a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	015b      	lsls	r3, r3, #5
 800633a:	429a      	cmp	r2, r3
 800633c:	d10d      	bne.n	800635a <UART_Start_Receive_IT+0x56>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <UART_Start_Receive_IT+0x4c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	225c      	movs	r2, #92	; 0x5c
 800634a:	4939      	ldr	r1, [pc, #228]	; (8006430 <UART_Start_Receive_IT+0x12c>)
 800634c:	5299      	strh	r1, [r3, r2]
 800634e:	e01a      	b.n	8006386 <UART_Start_Receive_IT+0x82>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	225c      	movs	r2, #92	; 0x5c
 8006354:	21ff      	movs	r1, #255	; 0xff
 8006356:	5299      	strh	r1, [r3, r2]
 8006358:	e015      	b.n	8006386 <UART_Start_Receive_IT+0x82>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <UART_Start_Receive_IT+0x7a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d104      	bne.n	8006374 <UART_Start_Receive_IT+0x70>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	225c      	movs	r2, #92	; 0x5c
 800636e:	21ff      	movs	r1, #255	; 0xff
 8006370:	5299      	strh	r1, [r3, r2]
 8006372:	e008      	b.n	8006386 <UART_Start_Receive_IT+0x82>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	225c      	movs	r2, #92	; 0x5c
 8006378:	217f      	movs	r1, #127	; 0x7f
 800637a:	5299      	strh	r1, [r3, r2]
 800637c:	e003      	b.n	8006386 <UART_Start_Receive_IT+0x82>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	225c      	movs	r2, #92	; 0x5c
 8006382:	2100      	movs	r1, #0
 8006384:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	2100      	movs	r1, #0
 800638c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2222      	movs	r2, #34	; 0x22
 8006392:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006394:	f3ef 8310 	mrs	r3, PRIMASK
 8006398:	61fb      	str	r3, [r7, #28]
  return(result);
 800639a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639e:	2301      	movs	r3, #1
 80063a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	f383 8810 	msr	PRIMASK, r3
}
 80063a8:	46c0      	nop			; (mov r8, r8)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2101      	movs	r1, #1
 80063b6:	430a      	orrs	r2, r1
 80063b8:	609a      	str	r2, [r3, #8]
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	f383 8810 	msr	PRIMASK, r3
}
 80063c4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	015b      	lsls	r3, r3, #5
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d107      	bne.n	80063e2 <UART_Start_Receive_IT+0xde>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <UART_Start_Receive_IT+0x130>)
 80063de:	665a      	str	r2, [r3, #100]	; 0x64
 80063e0:	e002      	b.n	80063e8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <UART_Start_Receive_IT+0x134>)
 80063e6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2274      	movs	r2, #116	; 0x74
 80063ec:	2100      	movs	r1, #0
 80063ee:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f0:	f3ef 8310 	mrs	r3, PRIMASK
 80063f4:	613b      	str	r3, [r7, #16]
  return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fa:	2301      	movs	r3, #1
 80063fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f383 8810 	msr	PRIMASK, r3
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2190      	movs	r1, #144	; 0x90
 8006412:	0049      	lsls	r1, r1, #1
 8006414:	430a      	orrs	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f383 8810 	msr	PRIMASK, r3
}
 8006422:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b00c      	add	sp, #48	; 0x30
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	000001ff 	.word	0x000001ff
 8006434:	0800685d 	.word	0x0800685d
 8006438:	080066f5 	.word	0x080066f5

0800643c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	; 0x38
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006444:	f3ef 8310 	mrs	r3, PRIMASK
 8006448:	617b      	str	r3, [r7, #20]
  return(result);
 800644a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	2301      	movs	r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f383 8810 	msr	PRIMASK, r3
}
 8006458:	46c0      	nop			; (mov r8, r8)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4925      	ldr	r1, [pc, #148]	; (80064fc <UART_EndRxTransfer+0xc0>)
 8006466:	400a      	ands	r2, r1
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006476:	f3ef 8310 	mrs	r3, PRIMASK
 800647a:	623b      	str	r3, [r7, #32]
  return(result);
 800647c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
 8006480:	2301      	movs	r3, #1
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	f383 8810 	msr	PRIMASK, r3
}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2101      	movs	r1, #1
 8006498:	438a      	bics	r2, r1
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f383 8810 	msr	PRIMASK, r3
}
 80064a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d118      	bne.n	80064e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b0:	f3ef 8310 	mrs	r3, PRIMASK
 80064b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	2301      	movs	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2110      	movs	r1, #16
 80064d2:	438a      	bics	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b00e      	add	sp, #56	; 0x38
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	fffffedf 	.word	0xfffffedf

08006500 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	225a      	movs	r2, #90	; 0x5a
 8006512:	2100      	movs	r1, #0
 8006514:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2252      	movs	r2, #82	; 0x52
 800651a:	2100      	movs	r1, #0
 800651c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	0018      	movs	r0, r3
 8006522:	f7ff fbdb 	bl	8005cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	46bd      	mov	sp, r7
 800652a:	b004      	add	sp, #16
 800652c:	bd80      	pop	{r7, pc}

0800652e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b08a      	sub	sp, #40	; 0x28
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800653a:	2b21      	cmp	r3, #33	; 0x21
 800653c:	d14d      	bne.n	80065da <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2252      	movs	r2, #82	; 0x52
 8006542:	5a9b      	ldrh	r3, [r3, r2]
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d132      	bne.n	80065b0 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006550:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	2301      	movs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	438a      	bics	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657c:	f3ef 8310 	mrs	r3, PRIMASK
 8006580:	617b      	str	r3, [r7, #20]
  return(result);
 8006582:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	2301      	movs	r3, #1
 8006588:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	430a      	orrs	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f383 8810 	msr	PRIMASK, r3
}
 80065ac:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80065ae:	e014      	b.n	80065da <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b292      	uxth	r2, r2
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2252      	movs	r2, #82	; 0x52
 80065cc:	5a9b      	ldrh	r3, [r3, r2]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b299      	uxth	r1, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2252      	movs	r2, #82	; 0x52
 80065d8:	5299      	strh	r1, [r3, r2]
}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	46bd      	mov	sp, r7
 80065de:	b00a      	add	sp, #40	; 0x28
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08c      	sub	sp, #48	; 0x30
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ee:	2b21      	cmp	r3, #33	; 0x21
 80065f0:	d151      	bne.n	8006696 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2252      	movs	r2, #82	; 0x52
 80065f6:	5a9b      	ldrh	r3, [r3, r2]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d132      	bne.n	8006664 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006602:	60fb      	str	r3, [r7, #12]
  return(result);
 8006604:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
 8006608:	2301      	movs	r3, #1
 800660a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f383 8810 	msr	PRIMASK, r3
}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2180      	movs	r1, #128	; 0x80
 8006620:	438a      	bics	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f383 8810 	msr	PRIMASK, r3
}
 800662e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006630:	f3ef 8310 	mrs	r3, PRIMASK
 8006634:	61bb      	str	r3, [r7, #24]
  return(result);
 8006636:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	2301      	movs	r3, #1
 800663c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2140      	movs	r1, #64	; 0x40
 8006652:	430a      	orrs	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006662:	e018      	b.n	8006696 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	881a      	ldrh	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	05d2      	lsls	r2, r2, #23
 8006674:	0dd2      	lsrs	r2, r2, #23
 8006676:	b292      	uxth	r2, r2
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2252      	movs	r2, #82	; 0x52
 8006688:	5a9b      	ldrh	r3, [r3, r2]
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b299      	uxth	r1, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2252      	movs	r2, #82	; 0x52
 8006694:	5299      	strh	r1, [r3, r2]
}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	46bd      	mov	sp, r7
 800669a:	b00c      	add	sp, #48	; 0x30
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b086      	sub	sp, #24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a6:	f3ef 8310 	mrs	r3, PRIMASK
 80066aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	2301      	movs	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f383 8810 	msr	PRIMASK, r3
}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2140      	movs	r1, #64	; 0x40
 80066c8:	438a      	bics	r2, r1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f383 8810 	msr	PRIMASK, r3
}
 80066d6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7fa ff5e 	bl	80015a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b006      	add	sp, #24
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b090      	sub	sp, #64	; 0x40
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066fc:	203e      	movs	r0, #62	; 0x3e
 80066fe:	183b      	adds	r3, r7, r0
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	215c      	movs	r1, #92	; 0x5c
 8006704:	5a52      	ldrh	r2, [r2, r1]
 8006706:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670c:	2b22      	cmp	r3, #34	; 0x22
 800670e:	d000      	beq.n	8006712 <UART_RxISR_8BIT+0x1e>
 8006710:	e095      	b.n	800683e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	213c      	movs	r1, #60	; 0x3c
 8006718:	187b      	adds	r3, r7, r1
 800671a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800671c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800671e:	187b      	adds	r3, r7, r1
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b2da      	uxtb	r2, r3
 8006724:	183b      	adds	r3, r7, r0
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b2d9      	uxtb	r1, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	400a      	ands	r2, r1
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	225a      	movs	r2, #90	; 0x5a
 8006742:	5a9b      	ldrh	r3, [r3, r2]
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b299      	uxth	r1, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	225a      	movs	r2, #90	; 0x5a
 800674e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	225a      	movs	r2, #90	; 0x5a
 8006754:	5a9b      	ldrh	r3, [r3, r2]
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d178      	bne.n	800684e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675c:	f3ef 8310 	mrs	r3, PRIMASK
 8006760:	61bb      	str	r3, [r7, #24]
  return(result);
 8006762:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006764:	63bb      	str	r3, [r7, #56]	; 0x38
 8006766:	2301      	movs	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f383 8810 	msr	PRIMASK, r3
}
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4936      	ldr	r1, [pc, #216]	; (8006858 <UART_RxISR_8BIT+0x164>)
 800677e:	400a      	ands	r2, r1
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	f383 8810 	msr	PRIMASK, r3
}
 800678c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800678e:	f3ef 8310 	mrs	r3, PRIMASK
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
 8006798:	2301      	movs	r3, #1
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	f383 8810 	msr	PRIMASK, r3
}
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2101      	movs	r1, #1
 80067b0:	438a      	bics	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	f383 8810 	msr	PRIMASK, r3
}
 80067be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d12f      	bne.n	8006834 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067da:	f3ef 8310 	mrs	r3, PRIMASK
 80067de:	60fb      	str	r3, [r7, #12]
  return(result);
 80067e0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
 80067e4:	2301      	movs	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f383 8810 	msr	PRIMASK, r3
}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2110      	movs	r1, #16
 80067fc:	438a      	bics	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f383 8810 	msr	PRIMASK, r3
}
 800680a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	2210      	movs	r2, #16
 8006814:	4013      	ands	r3, r2
 8006816:	2b10      	cmp	r3, #16
 8006818:	d103      	bne.n	8006822 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2210      	movs	r2, #16
 8006820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2258      	movs	r2, #88	; 0x58
 8006826:	5a9a      	ldrh	r2, [r3, r2]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0011      	movs	r1, r2
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff fa5d 	bl	8005cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006832:	e00c      	b.n	800684e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	0018      	movs	r0, r3
 8006838:	f7fa febe 	bl	80015b8 <HAL_UART_RxCpltCallback>
}
 800683c:	e007      	b.n	800684e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2108      	movs	r1, #8
 800684a:	430a      	orrs	r2, r1
 800684c:	619a      	str	r2, [r3, #24]
}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	46bd      	mov	sp, r7
 8006852:	b010      	add	sp, #64	; 0x40
 8006854:	bd80      	pop	{r7, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	fffffedf 	.word	0xfffffedf

0800685c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b090      	sub	sp, #64	; 0x40
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006864:	203e      	movs	r0, #62	; 0x3e
 8006866:	183b      	adds	r3, r7, r0
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	215c      	movs	r1, #92	; 0x5c
 800686c:	5a52      	ldrh	r2, [r2, r1]
 800686e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006874:	2b22      	cmp	r3, #34	; 0x22
 8006876:	d000      	beq.n	800687a <UART_RxISR_16BIT+0x1e>
 8006878:	e095      	b.n	80069a6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	213c      	movs	r1, #60	; 0x3c
 8006880:	187b      	adds	r3, r7, r1
 8006882:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006884:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800688c:	187b      	adds	r3, r7, r1
 800688e:	183a      	adds	r2, r7, r0
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	4013      	ands	r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	225a      	movs	r2, #90	; 0x5a
 80068aa:	5a9b      	ldrh	r3, [r3, r2]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b299      	uxth	r1, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	225a      	movs	r2, #90	; 0x5a
 80068b6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	225a      	movs	r2, #90	; 0x5a
 80068bc:	5a9b      	ldrh	r3, [r3, r2]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d178      	bne.n	80069b6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c4:	f3ef 8310 	mrs	r3, PRIMASK
 80068c8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ca:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068cc:	637b      	str	r3, [r7, #52]	; 0x34
 80068ce:	2301      	movs	r3, #1
 80068d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f383 8810 	msr	PRIMASK, r3
}
 80068d8:	46c0      	nop			; (mov r8, r8)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4936      	ldr	r1, [pc, #216]	; (80069c0 <UART_RxISR_16BIT+0x164>)
 80068e6:	400a      	ands	r2, r1
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f383 8810 	msr	PRIMASK, r3
}
 80068f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f6:	f3ef 8310 	mrs	r3, PRIMASK
 80068fa:	623b      	str	r3, [r7, #32]
  return(result);
 80068fc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006900:	2301      	movs	r3, #1
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	f383 8810 	msr	PRIMASK, r3
}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2101      	movs	r1, #1
 8006918:	438a      	bics	r2, r1
 800691a:	609a      	str	r2, [r3, #8]
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	f383 8810 	msr	PRIMASK, r3
}
 8006926:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	2b01      	cmp	r3, #1
 800693a:	d12f      	bne.n	800699c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006942:	f3ef 8310 	mrs	r3, PRIMASK
 8006946:	60bb      	str	r3, [r7, #8]
  return(result);
 8006948:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694c:	2301      	movs	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f383 8810 	msr	PRIMASK, r3
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2110      	movs	r1, #16
 8006964:	438a      	bics	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f383 8810 	msr	PRIMASK, r3
}
 8006972:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	2210      	movs	r2, #16
 800697c:	4013      	ands	r3, r2
 800697e:	2b10      	cmp	r3, #16
 8006980:	d103      	bne.n	800698a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2258      	movs	r2, #88	; 0x58
 800698e:	5a9a      	ldrh	r2, [r3, r2]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0011      	movs	r1, r2
 8006994:	0018      	movs	r0, r3
 8006996:	f7ff f9a9 	bl	8005cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800699a:	e00c      	b.n	80069b6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	0018      	movs	r0, r3
 80069a0:	f7fa fe0a 	bl	80015b8 <HAL_UART_RxCpltCallback>
}
 80069a4:	e007      	b.n	80069b6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2108      	movs	r1, #8
 80069b2:	430a      	orrs	r2, r1
 80069b4:	619a      	str	r2, [r3, #24]
}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	46bd      	mov	sp, r7
 80069ba:	b010      	add	sp, #64	; 0x40
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	fffffedf 	.word	0xfffffedf

080069c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b002      	add	sp, #8
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	2600      	movs	r6, #0
 80069d8:	4d0c      	ldr	r5, [pc, #48]	; (8006a0c <__libc_init_array+0x38>)
 80069da:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <__libc_init_array+0x3c>)
 80069dc:	1b64      	subs	r4, r4, r5
 80069de:	10a4      	asrs	r4, r4, #2
 80069e0:	42a6      	cmp	r6, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	2600      	movs	r6, #0
 80069e6:	f000 f821 	bl	8006a2c <_init>
 80069ea:	4d0a      	ldr	r5, [pc, #40]	; (8006a14 <__libc_init_array+0x40>)
 80069ec:	4c0a      	ldr	r4, [pc, #40]	; (8006a18 <__libc_init_array+0x44>)
 80069ee:	1b64      	subs	r4, r4, r5
 80069f0:	10a4      	asrs	r4, r4, #2
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	00b3      	lsls	r3, r6, #2
 80069fa:	58eb      	ldr	r3, [r5, r3]
 80069fc:	4798      	blx	r3
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	00b3      	lsls	r3, r6, #2
 8006a04:	58eb      	ldr	r3, [r5, r3]
 8006a06:	4798      	blx	r3
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	08006afc 	.word	0x08006afc
 8006a10:	08006afc 	.word	0x08006afc
 8006a14:	08006afc 	.word	0x08006afc
 8006a18:	08006b00 	.word	0x08006b00

08006a1c <memset>:
 8006a1c:	0003      	movs	r3, r0
 8006a1e:	1882      	adds	r2, r0, r2
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d100      	bne.n	8006a26 <memset+0xa>
 8006a24:	4770      	bx	lr
 8006a26:	7019      	strb	r1, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	e7f9      	b.n	8006a20 <memset+0x4>

08006a2c <_init>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr

08006a38 <_fini>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3e:	bc08      	pop	{r3}
 8006a40:	469e      	mov	lr, r3
 8006a42:	4770      	bx	lr
